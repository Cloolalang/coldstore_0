[
    {
        "id": "1173c82f.938c8",
        "type": "tab",
        "label": "Coldstore_0",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c41dabcb5f7e3c2a",
        "type": "tab",
        "label": "MULS_0",
        "disabled": false,
        "info": ""
    },
    {
        "id": "fd36bbc4.fe50d8",
        "type": "subflow",
        "name": "OK/Cancel helper",
        "info": "# OK/Cancel dialog helper\n\n## description\n\nThis is a little helper to make OK/Cancel dialogs easy to implement inside a data stream\n\n## how it works\n\nIf a message arrives at the **imput** a message dialog box is triggered. The original Message is cloned into `msg.dialogHelperOrgMsg`. If the dialog sends `msg.payload` with the **passPayload** the original message is released on the second output.\n\n## configuration\n\n- **Title** ***optional** a string displayed on the title of the dialog\n- **Message** message to be displayed\n- **passPayload** the `msg.payload` expected on the imput to release to original message.",
        "category": "",
        "in": [
            {
                "x": 37,
                "y": 85,
                "wires": [
                    {
                        "id": "6a44f1d4.72a75"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 343,
                "y": 85,
                "wires": [
                    {
                        "id": "6a44f1d4.72a75",
                        "port": 1
                    }
                ]
            },
            {
                "x": 343,
                "y": 136,
                "wires": [
                    {
                        "id": "6a44f1d4.72a75",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "title",
                "type": "str",
                "value": "Please Confirm",
                "ui": {
                    "icon": "font-awesome/fa-comment",
                    "label": {
                        "en-US": "Title"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "message",
                "type": "str",
                "value": "should the message pass on?",
                "ui": {
                    "icon": "font-awesome/fa-comment-o",
                    "label": {
                        "en-US": "Message"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "passPayload",
                "type": "str",
                "value": "OK",
                "ui": {
                    "icon": "font-awesome/fa-check-square-o",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    },
                    "label": {}
                }
            }
        ],
        "color": "#3FADB5",
        "icon": "font-awesome/fa-comments-o",
        "status": {
            "x": 343,
            "y": 34,
            "wires": [
                {
                    "id": "6a44f1d4.72a75",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "2924702c.b33a7",
        "type": "subflow",
        "name": "ui-table handler",
        "info": "# ui-table handler\nUniversal handler for ui-table.\n## features\n- buffer table data\n- add or update individual rows or cells of the table\n- delete rows\n- clear tableData\n- handle column width\n- handle column order\n- hide und unhide columns\n- hide and unhide rows\n- records row order\n\nFor real life example see:\n\n**syslog server** for logfile like table with filters\n\n**remote device table** for dynamically updated table with context menues\n\n**irrigation system** for sortable rows\n\n## sending data to ui-tabel\n\nsend an object containing the updated properties of a table row by sending msg.<tableDataProp>.\n\nThe table is updated using the `updateOrAddData` command. You can alter the command used by adding the `msg.tabulatorCommand` and `msg.tabulatorParameter`\n\n```\nmsg.tabulatorCommand=\"addData\";\nmsg.tabulatorParameter=[true];\n```\n## configuration\n- `tabulator` json formatted object containing configuration of the table. See ui-table for more details.\n- `property` property of the msg object that contains the data to be passed to ui-table. I.e. *state* `msg.state`\n- `index` index column to identify individual rows. Each message containing data must have a unique `msg.topic` to identify the row. Messages without this `msg.topic` will be droped. It is not nessesary but possible to display the index column in the table. Do not enable editing on this column otherwise you will loose the connection and another row will be added to the table as soon as a new message arrives!\n\n   Defaults to *$topic* `msg.state.$topic`\n- `maxRows`maximum number of rows held by table widget. If grater than **0** the amount of rows in ui-table is limited. for tis to work the index row must be a Number. ´rows < currentID-maxRows´ will be deleted.\n- `maxStore`maximum number of rows stored by this node for replay if a client connects. If grater than **0** the amount of rows in flow context is limited. for this to work the index row must be a Number. ´rows < currentID-maxStore´ will be deleted.\n- `dashboard` name of the dashboard tab to only update the table if the dashboard is visible. If empty the table will be updated on every tab change and connect.\n- `context` configuration of context data. The subflow will save or cache data in the flows context using `$parent.`. \n   **tableData** caches the incoming data to restore it on `ui-control´ *change* messages.\n   **tableConfig** saves column width and order to save the interactive table layot\n   **tableEdit** saves edits on the table data otherwise it would be overwritten when new data arrives\n```json\n{\n    \"tableData\": {\n        \"name\": \"tableData\"\n    },\n    \"tableConfig\": {\n        \"name\": \"tableConfig\",\n        \"storage\": \"file\"\n    },\n    \"tableEdit\": {\n        \"name\": \"tableEdit\",\n        \"storage\": \"file\"\n    }\n}\n```\n\n## commands\ncommands can be passed by sending a object as `msg.payload`\n\n```json\n{\n    \"command\": \"delete\",\n    \"object\": \"columnOrder\"\n}\n```\n\n- `deleteTable` tableCache\n- `deleteRow` delete single row. `object` matching index property\n- `ignoreRow` delete single row and put it on an ignore list. `object` matching index property\n- `unIgnoreRow`remove row from the ignore list.  `object` matching index property\n- `unIgnoreRows`delte the ignore list. \n- `deleteRowOrder` delete custom row order\n- `deleteColumnOrder` delete custom column order\n  This is important if you add or delete columns in the tabulator config otherwise the columns most likely don`t show up\n- `deleteColumnWidth` delete custom column width\n- `columnHide` hide a column. `object` matching column field\n- `columnUnHide` unhide a column. `object` matching column field\n- `columnsUnHide` unhide all hidden columns.\n- `setMaxStore`set maximum amount of rows in cache\n- `setMaxDisplay` set maximum amout of rows in ui-table\n \n## background\nui-table warps the powerfull tabluator library. This subflow makes it easier to unleash the powerfull features of ui-table",
        "category": "dashboard",
        "in": [
            {
                "x": 54,
                "y": 85,
                "wires": [
                    {
                        "id": "5eb0bd6b.74b794"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 85,
                "wires": [
                    {
                        "id": "5eb0bd6b.74b794",
                        "port": 1
                    }
                ]
            },
            {
                "x": 360,
                "y": 136,
                "wires": [
                    {
                        "id": "5eb0bd6b.74b794",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "tabulator",
                "type": "json",
                "value": "{\"tabulator\":{\"responsiveLayout\":\"collapse\",\"responsiveLayoutCollapseStartOpen\":false,\"index\":\"$name\",\"layout\":\"fitColumns\",\"movableColumns\":true,\"groupBy\":\"\",\"columnResized\":\"function(column){     var newColumn = {         field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",\"columnMoved\":\"function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.definition.field, 'title': column._column.definition.title});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",\"rowFormatter\":\"function(row){     var data = row.getData();     switch (data.$state) {         case \\\"lost\\\":             row.getElement().style.backgroundColor = \\\"#9e2e66\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"sleeping\\\":             row.getElement().style.backgroundColor = \\\"#336699\\\";             break;         case \\\"disconnected\\\":             row.getElement().style.backgroundColor = \\\"#cc3300\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"alert\\\":             row.getElement().style.backgroundColor = \\\"#A6A6DF\\\";             break;         case \\\"init\\\":             row.getElement().style.backgroundColor = \\\"#f2f20d\\\";             break;         case \\\"ready\\\":             row.getElement().style.backgroundColor = \\\"\\\";             row.getElement().style.color = \\\"\\\";             break;         } }\",\"columns\":[{\"formatter\":\"responsiveCollapse\",\"width\":30,\"minWidth\":30,\"align\":\"center\",\"resizable\":false,\"headerSort\":false,\"frozen\":true,\"title\":\"expand\",\"field\":\"expand\",\"headerVertical\":\"flip\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {      var html = cell.getValue(); return html;  }\",\"title\":\"State\",\"field\":\"$stateIcon\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {     var html = cell.getValue(); return html;  }\",\"title\":\"Signal\",\"field\":\"signalIcon\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"title\":\"Name\",\"field\":\"$name\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"title\":\"State\",\"field\":\"$state\",\"width\":100,\"align\":\"center\",\"headerVertical\":\"flip\"},{\"title\":\"last-ready\",\"field\":\"lastSeenreadyFormatted\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Homie\",\"field\":\"$homie\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Platform\",\"field\":\"$implementation\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Statistics\",\"columns\":[{\"title\":\"Interval\",\"field\":\"interval\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"outputFormat\":\"d hh:mm:ss\",\"inputFormat\":\"seconds\",\"invalidPlaceholder\":\"(unknown)\"},\"title\":\"Uptime\",\"field\":\"uptime\",\"formatter\":\"function(cell, formatterParams, onRendered){     var pad = function (num) {         return (\\\"0\\\"+num).slice(-2);     };     var secs = Number(cell.getValue());     if (Number.isNaN(secs)) return;     var minutes = Math.floor(secs / 60);     secs = secs%60;     var hours = Math.floor(minutes/60);     minutes = minutes%60;     var days = Math.floor(hours/24);     hours = hours%24;     if (days>0)         return days+\\\"d \\\"+pad(hours)+\\\":\\\"+pad(minutes);     else         return pad(hours)+\\\":\\\"+pad(minutes)+\\\":\\\"+pad(secs); }\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\"; else return; }\",\"legendColor\":\"#FFFFFF\",\"legendAlign\":\"center\"},\"title\":\"Signal\",\"field\":\"signal\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":2.5,\"max\":3.5,\"color\":[\"red\",\"green\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" V</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Supply\",\"field\":\"supply\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Battery\",\"field\":\"battery\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100000,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+(value/1024).toFixed(2)+\\\" kB</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Memory\",\"field\":\"freeheap\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"target\":\"_blank\",\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"CPU load\",\"field\":\"cpuload\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":20,\"max\":60,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" °C</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"CPU temp\",\"field\":\"cputemp\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"}]},{\"title\":\"Firmware\",\"columns\":[{\"formatter\":\"link\",\"formatterParams\":{\"labelField\":\"$localip\",\"urlPrefix\":\"http://\",\"target\":\"_blank\"},\"title\":\"IP\",\"field\":\"$localip\",\"width\":100},{\"title\":\"mac\",\"field\":\"$mac\",\"width\":100},{\"title\":\"Accsess Point\",\"field\":\"SSID\",\"width\":100},{\"title\":\"Firmware\",\"field\":\"name\",\"width\":100},{\"title\":\"Version\",\"field\":\"version\",\"width\":100},{\"title\":\"Last Boot Cause\",\"field\":\"lastBootCause\",\"width\":100},{\"title\":\"Reset Reason\",\"field\":\"resetReason\",\"width\":100}]}]},\"customHeight\":12}",
                "ui": {
                    "icon": "font-awesome/fa-table",
                    "label": {
                        "en-US": "Tabulator"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableDataProp",
                "type": "str",
                "value": "row",
                "ui": {
                    "icon": "font-awesome/fa-tag",
                    "label": {
                        "en-US": "rowProperty"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool",
                            "json",
                            "bin",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableIndex",
                "type": "str",
                "value": "$topic",
                "ui": {
                    "icon": "font-awesome/fa-indent",
                    "label": {
                        "en-US": "Index"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "maxRows",
                "type": "num",
                "value": "0",
                "ui": {
                    "icon": "font-awesome/fa-list-ol",
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "bool",
                            "env"
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "maxStore",
                "type": "num",
                "value": "0",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "dashboard",
                "type": "str",
                "value": "Remote Device Table",
                "ui": {
                    "icon": "font-awesome/fa-dashboard",
                    "label": {
                        "en-US": "Dashboard"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableContext",
                "type": "json",
                "value": "{\"tableData\":{\"name\":\"tableData\"},\"tableConfig\":{\"name\":\"tableConfig\",\"storage\":\"file\"},\"tableEdit\":{\"name\":\"tableEdit\",\"storage\":\"file\"}}",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Context"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            }
        ],
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_slider.png",
        "status": {
            "x": 360,
            "y": 34,
            "wires": [
                {
                    "id": "5eb0bd6b.74b794",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "6073e1c296d35b3e",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "in": [],
        "out": [],
        "env": []
    },
    {
        "id": "bbd2484.ddde038",
        "type": "group",
        "z": "1173c82f.938c8",
        "name": "Group",
        "style": {
            "label": true
        },
        "nodes": [
            "55e464ef.b89adc"
        ],
        "x": 8,
        "y": 3753,
        "w": 794,
        "h": 574
    },
    {
        "id": "55e464ef.b89adc",
        "type": "group",
        "z": "1173c82f.938c8",
        "g": "bbd2484.ddde038",
        "name": "Controls",
        "style": {
            "fill": "#ffcf3f",
            "label": true
        },
        "nodes": [
            "c84fc56e.248c88",
            "dd232594.591ac8",
            "b4287368.019748",
            "fdbfd42c.ddc208",
            "c5cfcd08.20d528",
            "68aed72f.f4445",
            "dc9ad9d9.c169f8",
            "5e76fcaf.f4400c",
            "d374803c.b4799",
            "fa6a12b0.3409f8",
            "f8beac32.4682f",
            "2a5982c7.7e4f5e",
            "4150b7b1.ba5788",
            "c089b199.1fdf3",
            "57bbdb6d.8096bc",
            "11079783.00a9f",
            "d1364909.24acb8",
            "4ccda17e.42b31",
            "3110c218.8f5a0e",
            "0ce7a40d07ecdd3f",
            "59b11097cd696ad3",
            "4a2f9d802dd6e662",
            "ce9eee9769e5746b"
        ],
        "x": 34,
        "y": 3779,
        "w": 742,
        "h": 522
    },
    {
        "id": "12a71c68e037171b",
        "type": "group",
        "z": "c41dabcb5f7e3c2a",
        "name": "Intro - Email",
        "style": {
            "label": true,
            "fill": "#e3f3d3",
            "fill-opacity": "0.5"
        },
        "nodes": [
            "4ce573d7e01f66c7",
            "87eca6dbf1428191",
            "61954e81a1d5d094",
            "ab5207a49a69a7de",
            "2083f6977d7fc405",
            "09978762dee85cd5",
            "78e1e7d0588ce078",
            "0fa9a5258a1622f6"
        ],
        "x": 4,
        "y": 19,
        "w": 1112,
        "h": 262
    },
    {
        "id": "3263de3e0f898f10",
        "type": "group",
        "z": "c41dabcb5f7e3c2a",
        "name": "New Account",
        "style": {
            "fill": "#ffbfbf",
            "fill-opacity": "0.25",
            "label": true
        },
        "nodes": [
            "2a074ed40e1da8af",
            "faec0750d4ceacc3",
            "582dddc2d9a160d0",
            "8d66c08d7bc840ff",
            "caacbc9d37bac05a",
            "57fedb6b789ac4e6",
            "2de34d262a466b53",
            "237ce4ad84d7b8a1",
            "4c230c7d11b5b868",
            "d8dc9b07eaece746",
            "33e1dbafaad6a8e9",
            "76510867835dbd1f",
            "3cd5dd13e15d1ae8",
            "1bf5a3b2a901f738",
            "6170ad66484831c5",
            "0f7e4910c0209ccb",
            "3be19d1ade68f24f"
        ],
        "x": 14,
        "y": 1099,
        "w": 1382,
        "h": 202
    },
    {
        "id": "aed77accfef15d69",
        "type": "group",
        "z": "c41dabcb5f7e3c2a",
        "name": "Login",
        "style": {
            "fill": "#ffbfbf",
            "fill-opacity": "0.25",
            "label": true
        },
        "nodes": [
            "354e9be8749e4f24",
            "14dd10224be70f56",
            "75f8275b75b390a0",
            "7094444a259847bd",
            "5f0016dd2bd479e7",
            "869cbb4a197164b9",
            "c8302faadaa025d5",
            "7ae8d485fcf8c77b",
            "9f18e66e54f033a8",
            "c461d9908e954e88",
            "a96deb4a28f47198",
            "271b423aa75c177d",
            "558fe1f99567a0cb",
            "097d886403fd9f53",
            "863c36637546224e",
            "28870a5e706ba7d5",
            "27b084eefd4ea2e7",
            "61dcc23944b0b91b",
            "c0978612e7d9d270",
            "d61cab465b467c51",
            "52e912764a143fa3",
            "3dea5460a367d469",
            "74866f6d369b2859",
            "5cc2fdf2897b26dc",
            "8d7c21aac1ac35d8",
            "d2cd75a10911659d",
            "d706ba1578fc16dc",
            "b02f44c09d1f94db",
            "e90ea0a2953fe107",
            "091d706ba3ffcc13",
            "74a05dd3287f5461",
            "687e74e198486585",
            "0e3983836a11b937",
            "e9ab5ad42ee003e6",
            "3dda8babeb581f79",
            "310b1fe135c3e717",
            "821a5a31c2c81ffb",
            "fdf676b095f1b428",
            "fe602a0b4c39f061",
            "216cf569bca96428",
            "b45d371caa47e88d",
            "eaf9592bd002aada",
            "89fe7f674849bf86",
            "1110d905eb2eccfb",
            "80666941f7fa4210",
            "a8bfedcf5085177c",
            "eadaabbe660be926",
            "92ba9bc98d31c0d9",
            "a15bfb0844e0a3e9",
            "b350266c23f5f45f",
            "0277abefce2b7304",
            "879cce7895ddbf69",
            "8cc5f2448c72e199",
            "93a0cc64b722e4ed",
            "de71fe4ed0997974"
        ],
        "x": 14,
        "y": 439,
        "w": 1392,
        "h": 642
    },
    {
        "id": "2e4a973ce65408b1",
        "type": "group",
        "z": "c41dabcb5f7e3c2a",
        "name": "Account",
        "style": {
            "fill": "#ffbfbf",
            "fill-opacity": "0.25",
            "label": true
        },
        "nodes": [
            "d6014b8e9bd84ba0",
            "d1518006576d581a",
            "c89fd45c26cd9fbb",
            "830a5238d794f995",
            "44a13994e6a2edee",
            "1f379ab99b64fffe",
            "0936e69792e9e931",
            "680eadae35828e61",
            "898fe46c9cc43e66",
            "655b112dc3fb704a",
            "994fe74ed4dfcdbb",
            "6d0c146da60e90d5",
            "bb5063e55a80427f",
            "39c811e6fa319bbe",
            "cab2922d07aded5b",
            "7e970a344b1d75cc",
            "2338d1279427871b",
            "f7c00df29bcb05e2",
            "76a2461f4ec80b30",
            "da9818e314856fdb",
            "62a9a326626dfd4c",
            "04fb7c3d2b5be29e",
            "4cec6764593871b5",
            "13cfcf93c1870536",
            "2f02d693787db905",
            "2f4a9ec437bb8351",
            "81b4d4099053f3d5",
            "0bfa599fd6974cea",
            "ee384bcf2840e03b",
            "11b2242d02af92bf",
            "8752b7c1031e6a3a",
            "3cc0117201cfc7d2",
            "88c857749ee84015",
            "0b6b108009ba038a",
            "f9898a802db93508",
            "6393e1f58bf73f67",
            "2723a0b38576aa5a",
            "5b695cf3f5f90fb5",
            "85b9eb944fbf4cc0",
            "f49799d82e90a078",
            "02ed626f22b5e3aa",
            "dde0575d65d919fa",
            "35e2bcae446c23f6",
            "6be7c77952ca028a",
            "da307dcd4172d6c6",
            "b525619e27fde573",
            "9dc531e34930449d",
            "bf605a1ca6bd7101",
            "4f280863a740e34b",
            "9c9e1a70306a5f37",
            "cbfcb6eb9d52b84f",
            "5e31ae968abe08b1",
            "0aa458a5809a4cbf",
            "484ac935427ac595",
            "2a769c7e6722c2f5",
            "59cb5b03a3882862",
            "a36cebefdfc67741"
        ],
        "x": 14,
        "y": 1579,
        "w": 1382,
        "h": 582
    },
    {
        "id": "7ae971cd6a4ab6e7",
        "type": "group",
        "z": "c41dabcb5f7e3c2a",
        "name": "Account Recovery",
        "style": {
            "fill": "#ffbfbf",
            "fill-opacity": "0.25",
            "label": true
        },
        "nodes": [
            "8ffd4af903f8b09a",
            "fd4cb80e51ab4136",
            "60c84b7a129edfb7",
            "73395e138a5fdc41",
            "8da253e70d21fd83",
            "08707fa8c89728d2",
            "8c9d6715a971ad35",
            "92a0c52394ac9d4a",
            "c36f976a2e761131",
            "6d7507f6d7771ac2",
            "04ef67ee654f6958",
            "33e3930ec32a9a8b",
            "b3a89553cafe55e8",
            "fb544b431717be3f",
            "597d06a42a43b1c1",
            "21eb15a68b127821",
            "2a55bbc652195838",
            "775ab5fd91b135ae",
            "e79a56e9a9b55cae",
            "8713baa42835d74f",
            "928f8660eeae5a19"
        ],
        "x": 14,
        "y": 1319,
        "w": 1382,
        "h": 242
    },
    {
        "id": "56111ac47191353b",
        "type": "group",
        "z": "c41dabcb5f7e3c2a",
        "name": "Admin",
        "style": {
            "fill": "#ffbfbf",
            "fill-opacity": "0.25",
            "label": true
        },
        "nodes": [
            "e693b9d9088218e6",
            "2f6ebfd640872d93",
            "91338a61028c2361",
            "9bca7631b2dae514",
            "41a33860889cc3e8",
            "1e7a2c47653b9835",
            "a33ad65d4b0c856c",
            "adcb626739a95f30",
            "6add71cb3e09d844",
            "f08fec2160ef41d4",
            "dac7daae26f1d2f9",
            "b14283d35dd9c730",
            "59fb91b525ba279c",
            "12dea2612f0b91b1",
            "43e8eb8e3d94f5ec",
            "c577e9a0e19da9ea",
            "9916bef7f5f5c226",
            "fccdcd1495da3786",
            "604234d1321118d8",
            "41ade310f7b4e99c",
            "79f9dcaf9da9e843",
            "19dd273a459375af",
            "5b4bc452ce94ae40",
            "a98554748f393990",
            "cf09953ae4360eed",
            "15c6a855493c3beb",
            "39ac47ef6cd19f4d",
            "6fab9da458248d40",
            "ea81c0cf05228539",
            "1d4d1ba44c3947c4",
            "4a53109ad69bc072",
            "1348e27566db70b4",
            "0679b522cbae5d1a",
            "956ff575ab92f03a",
            "b7991fbfeb5e720b",
            "50314fe5ab23afb2",
            "3d8ff1d0278fde59",
            "9cd3d91c5780f9c4",
            "7e39593fb1e3d2c2",
            "77d483b477482b9f",
            "7c82fb64a5389391",
            "c516dc3620bf72a6",
            "899e7e8097c7671b",
            "ffc9880c37b9830e",
            "e9166572e2e5cef7",
            "b9ed2b6108632ab2",
            "1aa6ba4f2eb2237d",
            "c0d369dddf5d1640",
            "a41cc2201165538a",
            "558d4c47b9d12dab",
            "5569c5ff696c7ec5",
            "dbf2a85be0a13137",
            "53a11c2ffe323173",
            "cbc31439e8fa2b78",
            "d11b8012d7b85422",
            "c6053bdec9f60716",
            "87e9b8336e5bac9c",
            "b8fe157d325cfc4e",
            "a163912dfe3d0543",
            "cac6cddf3d620e42",
            "8038a38fda2c4219",
            "27802c81f876c9ad",
            "6e3f68ecb71f64be",
            "4cd0192f7fb4fca2",
            "d34656873d81882a",
            "29ee3813939e4ed8",
            "043e18e2200b0d98",
            "d19a62b8ea5a9c57",
            "e64d1c8f91fff975",
            "e5aebe5611ae5f78",
            "4623ef1a87c53293",
            "9e7ed6c0f20918a8",
            "9df26c1470963cb8",
            "974be58b3f54c0b9",
            "1cdb742aeb29abb0",
            "e4f7431a1903f1e0",
            "3789aef0b9f2e1ab",
            "c7092f2f2e67dac9",
            "29718fbaed2535cd",
            "561a9c200abebd0b",
            "a9d86c8ef282bb91",
            "e9b969c95d5778bc",
            "15a044fc6f0c2001",
            "9edb23f357d59dcc",
            "b685e53c12548239",
            "a2e007c41865126d",
            "4458f5c9cfeedc0d",
            "94ccd1b57a90e602",
            "ebdee6d0fae6c6f5",
            "b15331c0e18d3e21",
            "bfa72de2354bc3fe",
            "5d7d82c8670245f3",
            "bf10724ee5b988c2",
            "0b5559898ad8da18",
            "13d4012482ce7302",
            "787290ef27fb331c",
            "8e02d9c93738f4a8",
            "4a011d850c917617",
            "a582fad23925d224",
            "18199f4fa0831ba0",
            "92dd127ff102ff6f",
            "2d2354f1af05e1c6",
            "f5146760de4e8758",
            "08a57e6b52ae549d",
            "544095b98b439bfe",
            "3e1f3842fb5e08ab",
            "5fc7845076ec7ce6",
            "786eb56c2c281851",
            "67041f0dab406657",
            "74b3ec5e0b604173",
            "c50ac02107e51607",
            "fcda572602b0a1f6",
            "54fa49eb3fb62714",
            "4b2aeae8521c0df0",
            "a2d2efe645ab4831",
            "6457278e7553a1cc",
            "4f1afb269bf53e5c",
            "45e4fdf6ea399bad",
            "a090e0bfab8caeac",
            "05fd1227e81deb37",
            "c50ed7267bc4792c",
            "b74f1aa24cc905e5",
            "45cc70f93dfe7c9d",
            "896ee2994338fc76",
            "4ed47483a0c1e420",
            "eb5060a927f5d048",
            "a6b7ae535c52113d",
            "dd592b93f0679665",
            "9ac1ddbe2e0e59d7",
            "2018aa2c7e9ee4d3",
            "ab2ebc25210b0c4a",
            "033711dc11081ee9",
            "8d3b886b47cca5aa",
            "13c6568262324fcf",
            "d648727fbdc5181e",
            "583a27654863c2d7",
            "32f1e25ff50f7403"
        ],
        "x": 14,
        "y": 2179,
        "w": 1452,
        "h": 1202
    },
    {
        "id": "8feac48172d8bf79",
        "type": "group",
        "z": "c41dabcb5f7e3c2a",
        "name": "Automation",
        "style": {
            "fill": "#e3f3d3",
            "fill-opacity": "0.5",
            "label": true
        },
        "nodes": [
            "34b1be91079d305f",
            "aa32a20089ea273f",
            "3e48a0f47ff4601d",
            "4ccec825f7a3f61c",
            "d7dc45d9eaaa5bbd",
            "e55de2ea8fe1b808",
            "47b0ca4d392b4a3d",
            "ccaec00ec1cfac37",
            "7fd0b0c43664e4bd",
            "6daa024591cbcdf3",
            "2b69418f5360dbb9",
            "2eace958102fb3f5",
            "3fe2a5bb32b4697e",
            "c079520fb02e505a"
        ],
        "x": 34,
        "y": 3399,
        "w": 1162,
        "h": 282
    },
    {
        "id": "6a660e82fb2466d2",
        "type": "group",
        "z": "c41dabcb5f7e3c2a",
        "name": "Startup",
        "style": {
            "fill": "#ffbfbf",
            "fill-opacity": "0.25",
            "label": true
        },
        "nodes": [
            "20d617db294db734",
            "195d19e53e9d69c3",
            "e1d475220f18364f",
            "295760e4528b7c79",
            "140745fe239573ce",
            "1e8060c1b384a540",
            "fe6005da5fd94e38",
            "426d17127e2e548b",
            "c12350b57a359f68",
            "49c15f57b5e87663",
            "9404935d1c3b7ff5",
            "dc0d8fd05c60e450",
            "5e2c3efeb2e30977",
            "392ebb07145975d5",
            "d444824a1a23aaa6",
            "eefe2a5a07b175e3",
            "80f8db78c272e8ac",
            "afe1fd7820350e2a",
            "1bf30cb24ec9da5e",
            "875a2e8f4cbf12cd",
            "9e7961717d461488",
            "09a8e1683e2c9470",
            "9a51bd297d1051a0",
            "d50f1a35d6a9368a",
            "e1ec9400127a7ece",
            "cb9d65dbb4a13d07",
            "4594b2c112f16cf8",
            "7e782627688460f6",
            "8e9ccf34228ae865"
        ],
        "x": 4,
        "y": 3699,
        "w": 1422,
        "h": 322
    },
    {
        "id": "7f3bda38b203a79d",
        "type": "group",
        "z": "c41dabcb5f7e3c2a",
        "name": "Home",
        "style": {
            "fill": "#e3f3d3",
            "fill-opacity": "0.5",
            "label": true
        },
        "nodes": [
            "805fd4172020316e",
            "2132e47088039d39"
        ],
        "x": 14,
        "y": 299,
        "w": 192,
        "h": 122
    },
    {
        "id": "40dabcc2f273ed5f",
        "type": "mqtt-broker",
        "name": "",
        "broker": "178.62.224.58",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "a31e02fc.1ce67",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "coldstore_0",
        "name": "coldstore_0",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "90716eaa.c5b68",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 56,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "93052513.5fe5f8",
        "type": "ui_group",
        "name": "System Status coldstore_0",
        "tab": "5c4d39b567c71a51",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "db9184c5.018a7",
        "type": "ui_group",
        "name": "Doors Local coldstore_0",
        "tab": "5c4d39b567c71a51",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "f5f7cada415a15e8",
        "type": "ui_group",
        "name": "Default",
        "tab": "d9365e0f.e1bf6",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1deed69fcda2c602",
        "type": "ui_group",
        "name": "Default coldstore",
        "tab": "5c4d39b567c71a51",
        "order": 5,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "62b44eba9c39b679",
        "type": "ui_group",
        "name": "Default",
        "tab": "db5f25b4b4c5ca8e",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "4edfae8b.b8925",
        "type": "ui_group",
        "name": "Tab",
        "tab": "69e3b08450578e6c",
        "order": 2,
        "disp": false,
        "width": "25",
        "collapse": false
    },
    {
        "id": "205ac72e296cb65f",
        "type": "ui_group",
        "name": "Default",
        "tab": "5142458f484f3e53",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "cc7d7ea92ffb628f",
        "type": "ui_group",
        "name": "Default",
        "tab": "152c5964d720afc7",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "a40bb0d9c16471df",
        "type": "ui_group",
        "name": "Default",
        "tab": "fc0af643ec51fbb4",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "63cbcf0b.0d48d8",
        "type": "ui_group",
        "name": "Controls coldstore_0",
        "tab": "5c4d39b567c71a51",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "9a6254e6.c472c8",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "order": 1,
        "disp": false,
        "width": "8",
        "collapse": false
    },
    {
        "id": "d62e4f05.76a81",
        "type": "ui_group",
        "name": "Alarms coldstore_0",
        "tab": "5c4d39b567c71a51",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "de7c45f.67e08b8",
        "type": "ui_group",
        "name": "DS18B20-2 Local Alarm Controls coldstore_0",
        "tab": "5c4d39b567c71a51",
        "order": 9,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "f46577b7.dfeb8",
        "type": "ui_group",
        "name": "Door Local Alarm Controls coldstore_0",
        "tab": "5c4d39b567c71a51",
        "order": 10,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "b8630066.5d446",
        "type": "ui_group",
        "name": "One dimension Array",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "65dfd687.bc39a8",
        "type": "ui_group",
        "name": "Default",
        "tab": "5394d338.3dd19c",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "85815d64.6c718",
        "type": "ui_group",
        "name": "",
        "tab": "bb7236c.d277cc8",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "6362fed0d780d457",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": 6
    },
    {
        "id": "0a51efc7ca8bb6a3",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": 6
    },
    {
        "id": "4914d4b6012ce9fd",
        "type": "ui_group",
        "name": "Refridgerators & Freezers coldstore_0",
        "tab": "5c4d39b567c71a51",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "8a904467dbc89824",
        "type": "ui_group",
        "name": "DS18B20-1 Local Alarm Controls coldstore_0",
        "tab": "5c4d39b567c71a51",
        "order": 8,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "9c6d6c10d628edc2",
        "type": "ui_group",
        "name": "Alarms coldstore_1",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "7acd7c305efdd1c1",
        "type": "ui_group",
        "name": "Refridgerators & Freezers coldstore_1",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "afbb7ee5c76916e2",
        "type": "ui_group",
        "name": "Doors Local coldstore_1",
        "tab": "",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "e0fd5dd6ca80e438",
        "type": "ui_group",
        "name": "System Status coldstore_1",
        "tab": "",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "44f4b117c8025aa5",
        "type": "ui_group",
        "name": "Controls coldstore_1",
        "tab": "",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "7b04de70ad95151e",
        "type": "ui_group",
        "name": "DS18B20-1 Local Alarm Controls coldstore_1",
        "tab": "",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "bcf19869a60bb419",
        "type": "ui_group",
        "name": "DS18B20-2 Local Alarm Controls coldstore_1",
        "tab": "",
        "order": 7,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "e269610e15ea3539",
        "type": "ui_group",
        "name": "Door Local Alarm Controls coldstore_1",
        "tab": "",
        "order": 8,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d9365e0f.e1bf6",
        "type": "ui_tab",
        "name": "Login",
        "icon": "lock",
        "order": 12,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "5c4d39b567c71a51",
        "type": "ui_tab",
        "name": "Health Sciences - Lab 1 Cold Storage Systems - Device: coldstore_0     Version Beta 1.0",
        "icon": "dashboard",
        "order": 17,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "db5f25b4b4c5ca8e",
        "type": "ui_tab",
        "name": "New Account",
        "icon": "dashboard",
        "order": 13,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "69e3b08450578e6c",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 10,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5142458f484f3e53",
        "type": "ui_tab",
        "name": "Account",
        "icon": "dashboard",
        "order": 15,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "152c5964d720afc7",
        "type": "ui_tab",
        "name": "Admin",
        "icon": "dashboard",
        "order": 16,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "fc0af643ec51fbb4",
        "type": "ui_tab",
        "name": "AccountRecovery",
        "icon": "dashboard",
        "order": 14,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "5394d338.3dd19c",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 19,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "bb7236c.d277cc8",
        "type": "ui_tab",
        "name": "Flashing LED",
        "icon": "dashboard",
        "order": 20,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a482d85407b28e21",
        "type": "ui_link",
        "name": "Link 10",
        "icon": "open_in_browser",
        "target": "newtab",
        "order": 10
    },
    {
        "id": "ed59a5bda7c9dfac",
        "type": "mqtt-broker",
        "name": "local",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "6a44f1d4.72a75",
        "type": "function",
        "z": "fd36bbc4.fe50d8",
        "name": "confirm",
        "func": "var status={fill:\"\",shape:\"dot\",text:\"\"};\nif (msg!==undefined && !msg.hasOwnProperty(\"dialogHelperOrgMsg\")) { // no message in queue\n    var dialogMsg={\n        topic:env.get('title'),\n        payload:env.get('message'),\n        socketid:msg.socketid,\n        dialogHelperOrgMsg:RED.util.cloneMessage(msg)\n    };\n    status={fill:\"yellow\",shape:\"dot\",text:\"waiting for response\"};\n    return [{payload:status},dialogMsg,null];\n} else {\n    if (msg.payload===env.get('passPayload')) {\n        status={fill:\"green\",shape:\"dot\",text:\"message passed\"};\n        return [{payload:status},null,msg.dialogHelperOrgMsg];\n    } else {\n        status={fill:\"blue\",shape:\"dot\",text:msg.payload+\" (!\"+env.get('passPayload')+\") message droped\"};\n        return [{payload:status},null,null];\n    }\n}",
        "outputs": 3,
        "noerr": 0,
        "x": 196,
        "y": 85,
        "wires": [
            [],
            [],
            []
        ],
        "info": "# OK/Cancel dialog helper function\n\n## description\n\nThis is a little helper to make OK/Cancel dialogs easy to implement inside a data stream\n\n## how it works\n\nIf a message arrives at the **imput** a message dialog box is triggered. The original Message is cloned into `msg.dialogHelperOrgMsg`. If the dialog sends `msg.payload` with the **passPayload** the original message is released on the second output.\n\n## envioment variables\n\n- **title** ***optional** a string displayed on the title of the dialog\n- **message** message to be displayed\n- **passPayload** the `msg.payload` expected on the imput to release to original message."
    },
    {
        "id": "5eb0bd6b.74b794",
        "type": "function",
        "z": "2924702c.b33a7",
        "name": "handle tableData",
        "func": "var status = {fill:\"red\",shape:\"dot\",text: \"payload \"};\nvar tableIndex = env.get(\"tableIndex\") || \"$topic\";\nvar tableDataProp = env.get(\"tableDataProp\") || \"row\";\nvar tableContext = env.get(\"tableContext\");\nvar dashboard = env.get(\"dashboard\");\nvar maxRows = env.get(\"maxRows\") || 0;\nvar maxStore = env.get(\"maxStore\") || 0;\n\nif (!tableContext.hasOwnProperty(\"tableData\") || !tableContext.hasOwnProperty(\"tableConfig\")) {\n    status.text=\"tableContext not defined\";\n    node.error(status.text);\n    return [{payload:status},null];\n}\n\n// context store to cache table data (memoryOnly prefered)\nvar tableData = flow.get(\"$parent.\"+tableContext.tableData.name,tableContext.tableData.storage);\nif (tableData===undefined) {\n    node.warn(\"[ui-table handler] tableData initialized!\");\n    tableData={};\n    flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n}\n\n// context Store to save table configuration (file)\nvar tableConfig = flow.get(\"$parent.\"+tableContext.tableConfig.name,tableContext.tableConfig.storage);\nif (tableConfig===undefined) {\n    node.warn(\"[ui-table handler] tableConfig initialized!\");\n    tableConfig={ResponsiveLayout:true};\n    flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n}\n\nif (tableConfig.hasOwnProperty(\"maxStore\")) maxStore=tableConfig.maxStore;\nif (tableConfig.hasOwnProperty(\"maxRows\")) maxRows=tableConfig.maxRows;\n\n// context Store to save table configuration (file)\nvar tableEdit;\nif (tableContext.hasOwnProperty(\"tableEdit\")) {\n    tableEdit = flow.get(\"$parent.\"+tableContext.tableEdit.name,tableContext.tableEdit.storage);\n    if (tableEdit===undefined) {\n        node.warn(\"[ui-table handler] tableEdit initialized!\");\n        tableEdit={};\n        flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n    }\n}\n\n// function to merge partial data into existing table row\nvar mergeObject = function (destination, source, filter) {\n    for (let currentSource in source) {\n        if (source.hasOwnProperty(currentSource)) {\n            if (filter!==undefined && tableEdit && tableEdit.hasOwnProperty(filter) && tableEdit[filter].hasOwnProperty(currentSource)) {\n                destination[currentSource]= tableEdit[filter][currentSource];\n                source[currentSource]=tableEdit[filter][currentSource];\n            } else {\n                destination[currentSource]= source[currentSource];\n            }\n        }    \n    }\n    return source;\n};\n    \n// deep search for a column\nvar searchTabulatorColumn = function (columns,key,match) {\n    var result;\n    for (let column of columns) {\n        if (column.hasOwnProperty(\"columns\")) {\n            result = searchTabulatorColumn(column.columns,key,match);\n            if (result!==undefined) return result;\n        } else if (column.hasOwnProperty(key) && column[key]===match) {\n            return column;\n        }\n    }\n};\n\n// command message to update add or update data on ui-table\nvar msgToTable={};\nmsgToTable.payload={\n    \"command\":msg.tabulatorCommand || \"updateOrAddData\",\n    \"arguments\": [],\n    \"returnPromise\": false\n};\n\n// store data in tableData\nif (msg.hasOwnProperty(tableDataProp)) {\n    // store data for later recover\n    if (!msg.hasOwnProperty(\"topic\")) { // check if index existst\n        status.text=\"msg.topic not defined!\";\n        return [{payload:status},null];\n    }\n    if (!tableData.hasOwnProperty(msg.topic)){ // first seen\n        if (maxRows>0 && Object.keys(tableData).lenght===0) {\n            tableConfig.currentFirstRow=msg.topic;\n        }\n        tableData[msg.topic]={};\n        if (tableEdit && tableEdit.hasOwnProperty(msg.topic)) { // table edits available!\n            Object.keys(tableEdit[msg.topic]).forEach((key) => {\n                msg[tableDataProp][key]=tableEdit[msg.topic][key];\n                tableData[msg.topic][key]=tableEdit[msg.topic][key];\n            })\n        }\n        if (maxStore>0 && typeof msg.topic === \"number\") { // limit rows in tableData\n            let rowKeys = Object.keys(tableData);\n            if (rowKeys.length>maxStore) {\n                for (let i=0; i<(rowKeys.length-maxStore); i++) {\n                    delete tableData[rowKeys[i]];\n                }\n            }\n        }\n    }\n    if (!tableData[msg.topic].hasOwnProperty(tableIndex)) tableData[msg.topic][tableIndex]=msg.topic;\n    msg[tableDataProp]=mergeObject(tableData[msg.topic],msg[tableDataProp],msg.topic);\n    msg[tableDataProp][tableIndex]=msg.topic;\n    msgToTable.payload.arguments=[[msg[tableDataProp]]];\n    // add aditional parameters\n    if (msg.hasOwnProperty(\"tabulatorParameter\") && Array.isArray(msg.tabulatorParameter)) {\n        for (let arg in msg.tabulatorParameter) msgToTable.payload.arguments.push(arg);\n    }\n    // delete rows if rows exceed maxRows\n    /*\n    if (maxRows>0 && tableConfig.hasOwnProperty(\"currentFirstRow\") && typeof tableData[msg.topic][tableIndex]===\"number\") {\n        //node.warn([maxRows,tableConfig.hasOwnProperty(\"currentFirstRow\"),typeof tableData[msg.topic][tableIndex],tableConfig.currentFirstRow,tableData[msg.topic][tableIndex]-maxRows])\n        if (tableConfig.currentFirstRow<tableData[msg.topic][tableIndex]-maxRows) {\n            node.warn([\"maxRowExeeded\",tableConfig.currentFirstRow]);\n            node.send([null,{payload:{\"command\":\"deleteRow\",\"arguments\": [tableConfig.currentFirstRow],\"returnPromise\": false}},null]);\n            tableConfig.currentFirstRow++;\n        }\n    }*/\n    if (maxRows>0 && typeof tableData[msg.topic][tableIndex]===\"number\" && msg.topic-maxRows>0) {\n        node.send([null,{payload:{\"command\":\"deleteRow\",\"arguments\": [msg.topic-maxRows],\"returnPromise\": false}},null]);\n    }\n    status.fill=\"green\";\n    status.text=msg.topic+\" updated\";\n    return [{payload:status},msgToTable,null];\n} if (msg.payload===\"connect\" || (msg.payload===\"change\" && msg.name===dashboard) || (msg.hasOwnProperty(\"payload\") && msg.payload.hasOwnProperty(\"command\"))) { \n    if (!msg.hasOwnProperty(\"ui_control\")) {\n        msg.ui_control = env.get('tabulator');\n        status.text+=\" ui_control added\";\n    }\n    //process commands\n    //node.warn({\"command\":msg.payload.command,\"msg\":msg,\"object\":msg.payload.object})\n    if (msg.payload.hasOwnProperty(\"command\")) {\n        status.fill=\"blue\";\n        switch(msg.payload.command) {\n            case 'deleteTable':\n                flow.set(\"$parent.\"+tableContext.tableData.name,undefined,tableContext.tableData.storage);\n                tableData={};\n                status.text=\"tabledata deleted\";\n                node.warn(\"[ui-table handler] \"+\"tabledata deleted\");\n                break;\n            case 'deleteRow':\n            case 'deleteDevice':\n                if (tableData.hasOwnProperty(msg.payload.object)) {\n                    delete tableData[msg.payload.object];\n                    status.text=msg.payload.object+\" deleted\";\n                } else {\n                    status.fill=\"yellow\";\n                    status.text=msg.payload.object+\" undefined\";\n                }\n                break;\n            case 'ignoreRow':\n            case 'ignoreDevice':\n                if (tableData.hasOwnProperty(msg.payload.object)) {\n                    delete tableData[msg.payload.object];\n                    status.text=msg.payload.object+\" will be ignored\";\n                    if (!tableConfig.hasOwnProperty('ignoreDevice')) tableConfig.ignoreDevice={};\n                    tableConfig.ignoreDevice[msg.payload.object]=true;\n                }\n                break;\n            case 'unIgnoreRow':\n            case 'unIgnoreDevice':\n                if (tableConfig.hasOwnProperty('ignoreDevice')) {\n                    delete tableConfig.ignoreDevice[msg.payload.object];\n                }\n                break;\n            case 'unIgnoreRows':\n            case 'unIgnoreDevices':\n                delete tableConfig.ignoreDevice;\n                break;\n            case 'updateData':\n                status.text=\"column \"+msg.payload.column+\" updated\";\n                return [{payload:status},msg];\n            case 'updateTable':\n                status.text=msg.payload.command+\": \";\n                break;\n            case 'columnHide':\n                if (!tableConfig.hasOwnProperty('columnVisible')) tableConfig.columnVisible={};\n                tableConfig.columnVisible[msg.payload.object]=false;\n                break;\n            case 'columnUnHide':\n                if (!tableConfig.hasOwnProperty('columnVisible')) tableConfig.columnVisible={};\n                tableConfig.columnVisible[msg.payload.object]=true;\n                break;\n            case 'columnsUnHide':\n                for (let column in tableConfig.columnVisible) {\n                    if (tableConfig.columnVisible.hasOwnProperty(column)) tableConfig.columnVisible[column]=true;\n                }\n                break;\n            case 'refreshTable':\n                break;\n            case 'deleteColumnOrder':\n            case 'restoreColumnOrder':\n                delete tableConfig.columns;\n                break;\n            case 'deleteColumnWidth':\n            case 'resetColumnWidth':\n                delete tableConfig.columnWidths;\n                break;\n            case 'setResponsiveLayout':\n                tableConfig.ResponsiveLayout=!tableConfig.ResponsiveLayout;\n                break;\n            case 'deleteRowOrder':\n                delete tableConfig.rowOrder;\n                break;\n            case 'setMaxStore':\n                tableConfig.maxStore=msg.payload.object;\n                maxStore=msg.payload.object;\n                break;\n            case 'setMaxRows':\n                tableConfig.maxRows=msg.payload.object;\n                maxRows=msg.payload.object;\n                break;\n            default:\n                status.fill=\"red\";\n                status.text=\"unknown command \"+msg.payload.command;\n                node.warn(\"[ui-table handler] \"+status.text);\n                break;\n        }\n        flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n        node.send([{payload:status},null,null]);\n    }\n\n    // crawl through tabulator arrays and updated user defined values\n    var crawlTabulator = function (columns,match,config,property) {\n        for (let column of columns) {\n            if (column.hasOwnProperty(\"columns\")) {\n                crawlTabulator(column.columns,match,config,property);\n            } else if (config.hasOwnProperty(column[match])) column[property]=config[column.field];\n        }\n    };\n    \n    // restore custom column width\n    if (tableConfig.hasOwnProperty(\"columnWidths\") && msg.hasOwnProperty(\"ui_control\")) {\n        crawlTabulator(msg.ui_control.tabulator.columns,\"field\",tableConfig.columnWidths,\"width\");\n    }\n    \n    // restore custom column hide/show\n    if (tableConfig.hasOwnProperty(\"columnVisible\") && msg.hasOwnProperty(\"ui_control\")) {\n        crawlTabulator(msg.ui_control.tabulator.columns,\"field\",tableConfig.columnVisible,\"visible\");\n    }\n    \n    // restore custom responsive / standard view\n    if (tableConfig.hasOwnProperty(\"ResponsiveLayout\")) {\n        if (!tableConfig.ResponsiveLayout) {\n            msg.ui_control.tabulator.responsiveLayout=false;\n        }\n        msg.ui_control.tabulator.columns.forEach((column,index) => {\n            if (column.formatter===\"responsiveCollapse\") { // hide expand column on any position\n                column.visible=tableConfig.ResponsiveLayout;\n                return;\n            }\n        });\n    }\n\n    // sort columns\n    if (tableConfig.hasOwnProperty(\"columns\") && msg.hasOwnProperty(\"ui_control\") && msg.ui_control.hasOwnProperty(\"tabulator\")) {\n        var addedColumns = 0;\n        var sortColumnsByLayout = function (sortColumns, columnsLayout, targetColumns) {\n            for (var layoutColumn=0;  layoutColumn<columnsLayout.length; layoutColumn++) {\n                for (var sortColumn in sortColumns) {\n                    if (sortColumns[sortColumn].hasOwnProperty(\"columns\")) {\n                        targetColumns.push({\"title\":sortColumns[sortColumn].title, \"columns\":[]});\n                        sortColumnsByLayout(sortColumns[sortColumn].columns,columnsLayout,targetColumns[targetColumns.length-1].columns);\n                        layoutColumn=addedColumns; // jump forward after childes added\n                    } else {\n                        if (columnsLayout[layoutColumn].field===sortColumns[sortColumn].field){\n                            targetColumns.push(sortColumns[sortColumn]);\n                            addedColumns++;\n                            break;\n                        }\n                    }\n                }\n            }\n        };                 \n        var newColumns=[];\n        sortColumnsByLayout(msg.ui_control.tabulator.columns,tableConfig.columns,newColumns);\n        msg.ui_control.tabulator.columns=newColumns;\n    }\n\n    // restore stored lines after connect\n    msg.payload=[];\n    \n    var pushRowData = function(rowData) {\n        // ignore rows in ignoreRows array\n        if (tableConfig && tableConfig.hasOwnProperty(\"ignoreDevice\") && tableConfig.ignoreDevice[rowData]) {\n            // do nothing\n        } else {\n            // merge edits into table\n            if (tableEdit && tableEdit.hasOwnProperty(rowData)) {\n                let tableRow = RED.util.cloneMessage(tableData[rowData]);\n                Object.keys(tableEdit[rowData]).forEach((field) => {\n                    tableRow[field]=tableEdit[rowData][field];\n                });\n                msg.payload.push(tableRow);\n            } else {\n                msg.payload.push(tableData[rowData]);\n            }\n        }\n    }\n    \n    if (tableConfig.hasOwnProperty(\"rowOrder\")) {\n        // first check if new rows exits which are not in rowOrder\n        Object.keys(tableData).forEach((key) => {\n            if (tableConfig.rowOrder.indexOf(tableData[key][tableIndex])<0) {\n                tableConfig.rowOrder.push(tableData[key][tableIndex]); // add row to the end of rowOrder\n            }\n        });\n        tableConfig.rowOrder.forEach((value,index) => {\n            node.warn([\"pushRowOrder\",value,tableData.hasOwnProperty(value),tableData[value]]);\n            if (tableData.hasOwnProperty(value)) { // push rows in rowOrder sequence\n                pushRowData(value);\n            } else { // delete not existing rows from rowOrder\n                tableConfig.rowOrder.splice(index,1)\n            }\n       });\n    } else {\n        for (let rowData in tableData) {\n            pushRowData(rowData);\n        }\n    }\n    // store the first index if maxRows limits amount of displayed lines\n    \n    if (maxRows>0 && tableData) {\n        let tableKeys=Object.keys(tableData);\n        if (tableKeys.length>0 && typeof tableData[tableKeys[0]][tableIndex] === \"number\") {\n            tableConfig.currentFirstRow=tableData[tableKeys[0]][tableIndex];\n        }\n    }\n    status.fill=\"blue\";\n    status.text+=\" \"+msg.payload.length+\" rows restored\";\n    return [{payload:status},msg,[{topic:\"maxRows\",payload:maxRows},{topic:\"maxStore\",payload:maxStore}]];\n} if (msg.hasOwnProperty(\"ui_control\")) {\n    // callback from tabulator\n    status.fill=\"blue\";\n    status.text=\"unknown callback \"+msg.ui_control.callback;\n    switch(msg.ui_control.callback) {\n        case \"columnResized\": // save new column width\n            if (tableConfig.columnWidths===undefined) tableConfig.columnWidths={};\n            tableConfig.columnWidths[msg.ui_control.columnWidths.field]=msg.ui_control.columnWidths.width;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=msg.ui_control.columnWidths.field+\"=\"+msg.ui_control.columnWidths.width+\"px\";\n            break;\n        case \"columnMoved\": // save new column order\n            if (tableConfig.columns===undefined) tableConfig.columns=[];\n            tableConfig.columns=msg.ui_control.columns;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=\"new column order\";\n            break;\n        case \"cellEdited\":\n            if (tableEdit) {\n                if (!tableEdit.hasOwnProperty(msg[tableIndex])) tableEdit[msg[tableIndex]]={};\n                tableEdit[msg[tableIndex]][msg.field] = msg.payload; // save data and mark as edited field\n                flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n                tableData[msg[tableIndex]][msg.field] = msg.payload; // overwrite tableData with edit\n                flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n                status.text=msg[tableIndex]+\" \"+msg.field+\" edited to \"+msg.payload;\n                msg[tableDataProp]={};\n                msg[tableDataProp][tableIndex]=msg[tableIndex];\n                msg[tableDataProp][msg.field]=msg.payload;\n                msgToTable.payload.arguments=[[msg[tableDataProp]]];\n                node.send([{payload:status},msgToTable,msg]);\n            } else {\n                node.error(\"[ui-table handler] no tableEdit store defined!\")\n            }\n            break;\n        case \"rowContext\":\n            msg.ignoredDevices=[];\n            for (let rowData in tableConfig.ignoreDevice) {\n                if (tableConfig.ignoreDevice.hasOwnProperty(rowData)) {\n                    msg.ignoredDevices.push({\"text\":rowData,\"icon\":\"fa fa-plug\",\"topic\":\"unIgnoreDevice\",\"payload\":rowData})  \n                }\n            }\n            break;\n        case \"headerContext\":\n            msg.hiddenColumns=[];\n            let tabulatorConfig = env.get('tabulator');\n            for (let column in tableConfig.columnVisible) {\n                if (tableConfig.columnVisible.hasOwnProperty(column) &&\n                    !tableConfig.columnVisible[column]) {\n                    let configColumn=searchTabulatorColumn(tabulatorConfig.tabulator.columns,\"field\",column);\n                    let icon;\n                    if (configColumn.hasOwnProperty('title') && configColumn.title.toLowerCase().includes('</i>')) {\n                        // <i class='fa fa-star-half-o'></i> State\n                        let start=configColumn.title.indexOf(\"'fa \");\n                        let end=configColumn.title.indexOf(\"'\",start+1);\n                        icon=configColumn.title.substring(start+4,end);\n                    }\n                    msg.hiddenColumns.push({\"text\":column,\"icon\":icon,\"topic\":\"columnUnHide\",\"payload\":configColumn.field})  \n                }\n            }\n            break;\n        case \"rowMoved\":\n            if (tableConfig.rowOrder===undefined) tableConfig.rowOrder={};\n            tableConfig.rowOrder=msg.ui_control.rowOrder;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=\"new row order\";\n            break;\n        default:\n            // if rowIndex exists pass complete object\n            if (msg.hasOwnProperty(tableIndex)) {\n                msg.rowData=tableData[msg[tableIndex]];\n            }\n            status.text=\"pass message\";\n    }\n    return [{payload:status},null,msg];\n}\n// nothing to do bejond this point\nstatus.text+=\" [\"+msg.payload+\"]\";\nreturn [{payload:status},null];\n",
        "outputs": 3,
        "noerr": 0,
        "x": 192,
        "y": 85,
        "wires": [
            [],
            [],
            []
        ],
        "icon": "font-awesome/fa-table"
    },
    {
        "id": "6d147d64.67d9f4",
        "type": "mqtt in",
        "z": "1173c82f.938c8",
        "name": "",
        "topic": "tele/coldstore_0/SENSOR",
        "qos": "2",
        "datatype": "json",
        "broker": "40dabcc2f273ed5f",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 110,
        "y": 120,
        "wires": [
            [
                "6d3d9e00.84d044",
                "c52e8c21.d3d438",
                "52cf49.01cec8b8",
                "7303474a.075258",
                "722fc336.6872bc",
                "b33ee945.24ded8",
                "bffd6fa4.8651f",
                "d32b02a9.3960b",
                "8f6e0c8d.3a5df",
                "b4114840.18132",
                "def8acde.5a48a",
                "2b90fdab.9c5c8a",
                "ec0604b0.9e77d",
                "7473f7bb36648d52"
            ]
        ]
    },
    {
        "id": "f57462f9.647c1",
        "type": "mqtt in",
        "z": "1173c82f.938c8",
        "name": "",
        "topic": "tele/coldstore_0/LWT",
        "qos": "2",
        "datatype": "auto",
        "broker": "40dabcc2f273ed5f",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 100,
        "y": 2000,
        "wires": [
            [
                "de8e7ce2.ba34f8",
                "2b90fdab.9c5c8a",
                "ec0604b0.9e77d"
            ]
        ]
    },
    {
        "id": "f27aeb59.f36a2",
        "type": "inject",
        "z": "1173c82f.938c8",
        "d": true,
        "name": "Test normal message",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Time\":\"2022-02-18T13:50:24\",\"Switch1\":\"ON\",\"DS18B20-1\":{\"Id\":\"3C01F095118C\",\"Temperature\":2.4},\"DS18B20-2\":{\"Id\":\"3C01F095F789\",\"Temperature\":-17.2},\"SI7021\":{\"Temperature\":25.7,\"Humidity\":51.5},\"TempUnit\":\"C\"}",
        "payloadType": "json",
        "x": 120,
        "y": 20,
        "wires": [
            [
                "6d3d9e00.84d044",
                "c52e8c21.d3d438",
                "7303474a.075258",
                "52cf49.01cec8b8",
                "b33ee945.24ded8",
                "722fc336.6872bc",
                "def8acde.5a48a"
            ]
        ]
    },
    {
        "id": "6d3d9e00.84d044",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "Extract DS18B20-1  temperature",
        "func": "if(typeof msg.payload[\"DS18B20-1\"] !== 'undefined') {\nmsg.payload = msg.payload[\"DS18B20-1\"].Temperature\nreturn msg;\n} else {\n    msg.payload = null\n    //failed we need to create a sensor fail here\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 280,
        "wires": [
            [
                "42937831.4e92",
                "4f0423eb.74888c"
            ]
        ]
    },
    {
        "id": "c52e8c21.d3d438",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "Extract DS18B20-2 temperature",
        "func": "if(typeof msg.payload[\"DS18B20-2\"] !== 'undefined') {\nmsg.payload = msg.payload[\"DS18B20-2\"].Temperature\nreturn msg;\n} else {\n    msg.payload = null\n    //failed we need to create a sensor fail here\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 440,
        "y": 880,
        "wires": [
            [
                "de349c66.fdaf68",
                "e9fe3b9b.7e9c28"
            ]
        ]
    },
    {
        "id": "7303474a.075258",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "Extract SI7021 Temperature",
        "func": "if(typeof msg.payload.SI7021.Temperature !== 'undefined') {\nmsg.payload = msg.payload.SI7021.Temperature\nreturn msg;\n} else {\n    msg.payload = null\n    //failed we need to create a sensor fail here\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 1400,
        "wires": [
            [
                "503ac60b.22147",
                "6fe2a3ae.0a20c4"
            ]
        ]
    },
    {
        "id": "52cf49.01cec8b8",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "Extract SI7021Humidity",
        "func": "if(typeof msg.payload.SI7021.Humidity !== 'undefined') {\nmsg.payload = msg.payload.SI7021.Humidity\nreturn msg;\n} else {\n    msg.payload = null\n    //failed we need to create a sensor fail here\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 1500,
        "wires": [
            [
                "19a4d04e.5fa458",
                "59c5d55b.f349b4"
            ]
        ]
    },
    {
        "id": "89834a8d.e8cc28",
        "type": "mqtt in",
        "z": "1173c82f.938c8",
        "d": true,
        "name": "",
        "topic": "stat/coldstore_0/POWER",
        "qos": "2",
        "datatype": "auto",
        "broker": "40dabcc2f273ed5f",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 110,
        "y": 2380,
        "wires": [
            [
                "5ef90666.14ccf8"
            ]
        ]
    },
    {
        "id": "5ef90666.14ccf8",
        "type": "change",
        "z": "1173c82f.938c8",
        "d": true,
        "name": "Door 1 process a",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "ON",
                "fromt": "str",
                "to": "1",
                "tot": "num"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "OFF",
                "fromt": "str",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 90,
        "y": 2420,
        "wires": [
            [
                "b35142a0.975d28",
                "e4cfbac3.9c97b",
                "aa5c92f.7d2c3f"
            ]
        ]
    },
    {
        "id": "de8e7ce2.ba34f8",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "Sonoff Availability",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "Online",
                "fromt": "str",
                "to": "1",
                "tot": "num"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "Offline",
                "fromt": "str",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 2000,
        "wires": [
            [
                "f3a5fdb0.7896",
                "b7f60560.efb098",
                "b790eafacd43ce73"
            ]
        ]
    },
    {
        "id": "222347ee.b885f8",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "Sensor OK",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 400,
        "wires": [
            [
                "a1762781.4584c",
                "5bf8ef84.4bfe9",
                "985c506200a7df59"
            ]
        ]
    },
    {
        "id": "722fc336.6872bc",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "Check sensor DS18B20-1 value in message",
        "func": "if(typeof msg.payload[\"DS18B20-1\"] !== 'undefined') {\n    // blah blah#\n    return msg;\n} else {\n    // failed we need to create a sensor fail here\n    //return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 480,
        "y": 400,
        "wires": [
            [
                "222347ee.b885f8"
            ]
        ]
    },
    {
        "id": "b33ee945.24ded8",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "Check sensor DS18B20-1 value not in message",
        "func": "if(typeof msg.payload[\"DS18B20-1\"] !== 'undefined') {\n    // blah blah#\n    //return msg;\n} else {\n    // failed we need to create a sensor fail here\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 500,
        "wires": [
            [
                "97cb1a22.5f28a8"
            ]
        ]
    },
    {
        "id": "97cb1a22.5f28a8",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "Sensor Not OK",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 500,
        "wires": [
            [
                "a1762781.4584c",
                "5bf8ef84.4bfe9",
                "78b8f5fac8e76369",
                "12fd611a9e331342"
            ]
        ]
    },
    {
        "id": "bffd6fa4.8651f",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "Check sensor DS18B20-2 value in message",
        "func": "if(typeof msg.payload[\"DS18B20-2\"] !== 'undefined') {\n    // blah blah#\n    return msg;\n} else {\n    // failed we need to create a sensor fail here\n    //return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 480,
        "y": 1140,
        "wires": [
            [
                "355f3fa5.fd9068"
            ]
        ]
    },
    {
        "id": "d32b02a9.3960b",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "Check sensor DS18B20-2 value not in message",
        "func": "if(typeof msg.payload[\"DS18B20-2\"] !== 'undefined') {\n    // blah blah#\n    //return msg;\n} else {\n    // failed we need to create a sensor fail here\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 490,
        "y": 1220,
        "wires": [
            [
                "d66a7207.d15778"
            ]
        ]
    },
    {
        "id": "355f3fa5.fd9068",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "Sensor OK",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 1140,
        "wires": [
            [
                "ac083610.e915a8",
                "f9e3126a25b36bb9",
                "985c506200a7df59"
            ]
        ]
    },
    {
        "id": "d66a7207.d15778",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "Sensor Not OK",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 1220,
        "wires": [
            [
                "ac083610.e915a8",
                "b5e5b7e440db5240",
                "f9e3126a25b36bb9",
                "12fd611a9e331342"
            ]
        ]
    },
    {
        "id": "8f6e0c8d.3a5df",
        "type": "switch",
        "z": "1173c82f.938c8",
        "name": "Check sensor SI7021 value in message",
        "property": "payload.SI7021.Temperature",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 400,
        "y": 1600,
        "wires": [
            [
                "5ccf3ce4.17086c"
            ]
        ]
    },
    {
        "id": "b4114840.18132",
        "type": "switch",
        "z": "1173c82f.938c8",
        "name": "Check sensor SI7021 value not in message",
        "property": "payload.SI7021.Temperature",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 390,
        "y": 1680,
        "wires": [
            [
                "7b056fb4.91ab6"
            ]
        ]
    },
    {
        "id": "5ccf3ce4.17086c",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "Sensor OK",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 1600,
        "wires": [
            [
                "32dd1d42.1e93d2",
                "e7791560.9efb28",
                "985c506200a7df59"
            ]
        ]
    },
    {
        "id": "7b056fb4.91ab6",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "Sensor Not OK",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 1680,
        "wires": [
            [
                "32dd1d42.1e93d2",
                "e7791560.9efb28",
                "54ae486df4997c96",
                "12fd611a9e331342"
            ]
        ]
    },
    {
        "id": "def8acde.5a48a",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "Sonoff last message timestamp",
        "func": "msg.payload = msg.payload.Time;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 450,
        "y": 180,
        "wires": [
            [
                "526a87c.ca14878"
            ]
        ]
    },
    {
        "id": "3b1901dd.5ecbce",
        "type": "inject",
        "z": "1173c82f.938c8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 840,
        "y": 4940,
        "wires": [
            [
                "937b4243.e99bd8"
            ]
        ]
    },
    {
        "id": "274b294f.5bdc86",
        "type": "mqtt in",
        "z": "1173c82f.938c8",
        "name": "Tasmota Switch/Relay",
        "topic": "stat/coldstore_0/POWER",
        "qos": "2",
        "datatype": "auto",
        "broker": "40dabcc2f273ed5f",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 100,
        "y": 1780,
        "wires": [
            [
                "8bab20a2.9f0d78",
                "2b90fdab.9c5c8a",
                "ec0604b0.9e77d"
            ]
        ]
    },
    {
        "id": "af8fb9ae.0967b8",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "MQTT JSON - Influx db",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[\t    {\t        \"Time\": msg.payload.Time,\t        \"Switch1\": msg.payload.Switch1,\t        \"DS18B20-1 Id\": msg.payload.\"DS18B20-1\".Id,\t        \"DS18B20-1 Temperature\": msg.payload.\"DS18B20-1\".Temperature,\t        \"DS18B20-2 Id\": msg.payload.\"DS18B20-2\".Id,\t        \"DS18B20-2 Temperature\": msg.payload.\"DS18B20-2\".Temperature,\t        \"SI7021 Temperature\": msg.payload.SI7021.Temperature,\t        \"SI7021 Humidity\": msg.payload.SI7021.Humidity\t    }\t]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "4e55302f.784298",
        "type": "inject",
        "z": "1173c82f.938c8",
        "name": "Test missing sensor message",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Time\":\"2022-02-18T13:50:24\",\"Switch1\":\"ON\",\"DS18B20-2\":{\"Id\":\"3C01F095F789\",\"Temperature\":-17.2},\"SI7021\":{\"Temperature\":25.7,\"Humidity\":51.5},\"TempUnit\":\"C\"}",
        "payloadType": "json",
        "x": 470,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "649e0c9271602ca8",
        "type": "inject",
        "z": "1173c82f.938c8",
        "name": "every 1 second",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 2920,
        "wires": [
            [
                "a07e6c57b1a1c8c0"
            ]
        ]
    },
    {
        "id": "a07e6c57b1a1c8c0",
        "type": "switch",
        "z": "1173c82f.938c8",
        "name": "flow.clock_state == \"run\" ?",
        "property": "clock_state",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "run",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 360,
        "y": 2920,
        "wires": [
            [
                "4f71dedcce348bad"
            ]
        ]
    },
    {
        "id": "4f71dedcce348bad",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "decrement flow.clock_value",
        "func": "let clock_value = flow.get(\"clock_value\") || 0;\n\nclock_value++; \n\nif (clock_value < 0) clock_value = 0;\n\nflow.set(\"clock_value\", clock_value);\n\nmsg.payload = clock_value;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 2920,
        "wires": [
            [
                "56b85be367b59317"
            ]
        ]
    },
    {
        "id": "56b85be367b59317",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "seconds to minute:seconds",
        "func": "let secsDecimal = msg.payload;\n\nlet mins = Math.floor(secsDecimal/60);\nlet secs = secsDecimal % 60;\n\nmsg.payload = (mins + (secs / 100.0)).toFixed(2)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 760,
        "y": 3040,
        "wires": [
            [
                "c665a3a2.a7b748"
            ]
        ]
    },
    {
        "id": "c1aa426d.33361",
        "type": "inject",
        "z": "1173c82f.938c8",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 70,
        "y": 3000,
        "wires": [
            [
                "dd4eeeb2.c5c938"
            ]
        ]
    },
    {
        "id": "c665a3a2.a7b748",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "remove NANs",
        "func": "if(msg.payload != \"NaN\") {\nreturn msg;\n} \n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1020,
        "y": 3040,
        "wires": [
            [
                "61f1db80.482964",
                "3d38dc49.1869fc"
            ]
        ]
    },
    {
        "id": "dd4eeeb2.c5c938",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "set clock_value to 0 ",
        "rules": [
            {
                "t": "set",
                "p": "clock_value",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 3040,
        "wires": [
            [
                "56b85be367b59317"
            ]
        ]
    },
    {
        "id": "24579bcb.5c9814",
        "type": "inject",
        "z": "1173c82f.938c8",
        "name": "24h door time reset",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 100,
        "y": 3040,
        "wires": [
            [
                "dd4eeeb2.c5c938"
            ]
        ]
    },
    {
        "id": "aa5c92f.7d2c3f",
        "type": "switch",
        "z": "1173c82f.938c8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 2760,
        "wires": [
            [
                "18b72f48.e01101",
                "228dd8cd.cfc97",
                "43f098fe.ace168"
            ],
            [
                "9c1fabfb.5b1468",
                "36e3a42e.a2f6b4",
                "7dae7f40.8462b8"
            ]
        ]
    },
    {
        "id": "2f817a68.94f9ce",
        "type": "mqtt in",
        "z": "1173c82f.938c8",
        "name": "",
        "topic": "stat/coldstore_0/RESULT",
        "qos": "2",
        "datatype": "json",
        "broker": "40dabcc2f273ed5f",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 110,
        "y": 2300,
        "wires": [
            [
                "bd9a7c0a.1f41b8",
                "f78d203b.41071",
                "d03ff7a.010bb08",
                "463714dc.788ff4",
                "ec2d09cc.cb7c78",
                "ba57f561.f40538",
                "7fccc05f.e03b88",
                "2b90fdab.9c5c8a",
                "ec0604b0.9e77d",
                "383b2f59.b48b6"
            ]
        ]
    },
    {
        "id": "7953fb02.9f5f54",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "Door 1 process a",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "ON",
                "fromt": "str",
                "to": "1",
                "tot": "num"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "OFF",
                "fromt": "str",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 2280,
        "wires": [
            [
                "b35142a0.975d28",
                "e4cfbac3.9c97b",
                "aa5c92f.7d2c3f",
                "51c70dcc.561d84",
                "fadff004ceea28c5"
            ]
        ]
    },
    {
        "id": "bd9a7c0a.1f41b8",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "Extract Switch1",
        "func": "if(typeof msg.payload[\"Switch1\"] !== 'undefined') {\nmsg.payload = msg.payload[\"Switch1\"].Action\nreturn msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 2280,
        "wires": [
            [
                "7953fb02.9f5f54"
            ]
        ]
    },
    {
        "id": "381ad05a.045d18",
        "type": "mqtt in",
        "z": "1173c82f.938c8",
        "name": "",
        "topic": "tele/coldstore_0/SENSOR",
        "qos": "2",
        "datatype": "json",
        "broker": "40dabcc2f273ed5f",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 110,
        "y": 2120,
        "wires": [
            [
                "2b90fdab.9c5c8a",
                "ec0604b0.9e77d",
                "3d521669a1d197e5"
            ]
        ]
    },
    {
        "id": "9c1fabfb.5b1468",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "flow run",
        "func": "let clock_state = flow.get(\"clock_state\") || \"stop\";\n\nclock_state = clock_state === \"stop\" ? \"run\" : \"run\";\n\nflow.set(\"clock_state\", clock_state );\n\n//return msg;\n\n\n///for start   ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 2800,
        "wires": [
            [
                "56b85be367b59317"
            ]
        ]
    },
    {
        "id": "47db0e42.c337f8",
        "type": "inject",
        "z": "1173c82f.938c8",
        "name": "",
        "props": [
            {
                "p": "topic",
                "v": "1",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 70,
        "y": 2800,
        "wires": [
            [
                "9c1fabfb.5b1468"
            ]
        ]
    },
    {
        "id": "18b72f48.e01101",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "flow stop",
        "func": "let clock_state = flow.get(\"clock_state\") || \"stop\";\n\nclock_state = clock_state === \"stop\" ? \"stop\" : \"stop\";\n\nflow.set(\"clock_state\", clock_state );\n\n//return msg;\n\n\n///for start   ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 2860,
        "wires": [
            [
                "56b85be367b59317"
            ]
        ]
    },
    {
        "id": "ef77ecb5.2f961",
        "type": "inject",
        "z": "1173c82f.938c8",
        "name": "",
        "props": [
            {
                "p": "topic",
                "v": "0",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 70,
        "y": 2860,
        "wires": [
            [
                "18b72f48.e01101"
            ]
        ]
    },
    {
        "id": "51c70dcc.561d84",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "counter function",
        "func": "var counter = flow.get(\"counter\") || 0;\n\ncounter++;\n\nflow.set(\"counter\", counter);\ncounter = counter -1;//zero the counter \nmsg.payload = counter;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 2600,
        "wires": [
            [
                "bcb09236.704618"
            ]
        ]
    },
    {
        "id": "3f5a049a.ed2d74",
        "type": "inject",
        "z": "1173c82f.938c8",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 60,
        "y": 2540,
        "wires": [
            [
                "51c70dcc.561d84"
            ]
        ]
    },
    {
        "id": "cddd8c73.0df9a",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "reset counter",
        "rules": [
            {
                "t": "set",
                "p": "counter",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 2660,
        "wires": [
            [
                "51c70dcc.561d84"
            ]
        ]
    },
    {
        "id": "9342a348.2d091",
        "type": "inject",
        "z": "1173c82f.938c8",
        "name": "Reset (resets counter  at runtime)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 140,
        "y": 2720,
        "wires": [
            [
                "cddd8c73.0df9a"
            ]
        ]
    },
    {
        "id": "ab2306fb.412ea",
        "type": "inject",
        "z": "1173c82f.938c8",
        "name": "24h door time reset",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 120,
        "y": 2660,
        "wires": [
            [
                "cddd8c73.0df9a"
            ]
        ]
    },
    {
        "id": "f78d203b.41071",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "Extract Mem1",
        "func": "if(typeof msg.payload.Mem1 !== 'undefined') {\nmsg.payload = msg.payload.Mem1\nreturn msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 400,
        "y": 2380,
        "wires": [
            [
                "918d366d.04695"
            ]
        ]
    },
    {
        "id": "d03ff7a.010bb08",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "Extract Mem2",
        "func": "if(typeof msg.payload.Mem2 !== 'undefined') {\nmsg.payload = msg.payload.Mem2\nreturn msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 400,
        "y": 2420,
        "wires": [
            [
                "e8f0dcb8.f411a"
            ]
        ]
    },
    {
        "id": "383b2f59.b48b6",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "Extract Rule1 State",
        "func": "if(typeof msg.payload[\"Rule1\"] !== 'undefined') {\nmsg.payload = msg.payload[\"Rule1\"].State\nreturn msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 2500,
        "wires": [
            [
                "72f3a38b.b2199c"
            ]
        ]
    },
    {
        "id": "ec2d09cc.cb7c78",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "Extract Mem3",
        "func": "if(typeof msg.payload.Mem3 !== 'undefined') {\nmsg.payload = msg.payload.Mem3\nreturn msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 400,
        "y": 2200,
        "wires": [
            [
                "4751a2a6.441bdc"
            ]
        ]
    },
    {
        "id": "463714dc.788ff4",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "Extract Mem4",
        "func": "if(typeof msg.payload.Mem4 !== 'undefined') {\nmsg.payload = msg.payload.Mem4\nreturn msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 400,
        "y": 2240,
        "wires": [
            [
                "5a0846dd.ae7d2"
            ]
        ]
    },
    {
        "id": "8bab20a2.9f0d78",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "Change",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "ON",
                "fromt": "str",
                "to": "1",
                "tot": "num"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "OFF",
                "fromt": "str",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 1780,
        "wires": [
            [
                "3bbf6987.bbbdfe",
                "b84d3623.5258e8",
                "b2c1bdaf2b6e6344"
            ]
        ]
    },
    {
        "id": "c84fc56e.248c88",
        "type": "mqtt out",
        "z": "1173c82f.938c8",
        "g": "55e464ef.b89adc",
        "name": "Restart Sonoff",
        "topic": "cmnd/coldstore_0/Restart",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "40dabcc2f273ed5f",
        "x": 620,
        "y": 3820,
        "wires": []
    },
    {
        "id": "b4287368.019748",
        "type": "mqtt out",
        "z": "1173c82f.938c8",
        "g": "55e464ef.b89adc",
        "name": "Tasmota set teleperiod",
        "topic": "cmnd/coldstore_0/TelePeriod",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "40dabcc2f273ed5f",
        "x": 650,
        "y": 3860,
        "wires": []
    },
    {
        "id": "68aed72f.f4445",
        "type": "mqtt out",
        "z": "1173c82f.938c8",
        "g": "55e464ef.b89adc",
        "name": "Sonoff Power",
        "topic": "cmnd/coldstore_0/Power",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "40dabcc2f273ed5f",
        "x": 640,
        "y": 4260,
        "wires": []
    },
    {
        "id": "5e76fcaf.f4400c",
        "type": "mqtt out",
        "z": "1173c82f.938c8",
        "g": "55e464ef.b89adc",
        "name": "Tasmota Rule 1 on/off",
        "topic": "cmnd/coldstore_0/Rule1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "40dabcc2f273ed5f",
        "x": 640,
        "y": 3900,
        "wires": []
    },
    {
        "id": "d374803c.b4799",
        "type": "mqtt out",
        "z": "1173c82f.938c8",
        "g": "55e464ef.b89adc",
        "name": "Tasmota Mem1 set",
        "topic": "cmnd/coldstore_0/Mem1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "40dabcc2f273ed5f",
        "x": 640,
        "y": 4020,
        "wires": []
    },
    {
        "id": "fa6a12b0.3409f8",
        "type": "mqtt out",
        "z": "1173c82f.938c8",
        "g": "55e464ef.b89adc",
        "name": "Tasmota Mem2 set",
        "topic": "cmnd/coldstore_0/Mem2",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "40dabcc2f273ed5f",
        "x": 640,
        "y": 4060,
        "wires": []
    },
    {
        "id": "c089b199.1fdf3",
        "type": "mqtt out",
        "z": "1173c82f.938c8",
        "g": "55e464ef.b89adc",
        "name": "Tasmota Mem4 set",
        "topic": "cmnd/coldstore_0/Mem4",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "40dabcc2f273ed5f",
        "x": 640,
        "y": 4140,
        "wires": []
    },
    {
        "id": "57bbdb6d.8096bc",
        "type": "mqtt out",
        "z": "1173c82f.938c8",
        "g": "55e464ef.b89adc",
        "name": "Tasmota Mem3 set",
        "topic": "cmnd/coldstore_0/Mem3",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "40dabcc2f273ed5f",
        "x": 640,
        "y": 4100,
        "wires": []
    },
    {
        "id": "3110c218.8f5a0e",
        "type": "mqtt out",
        "z": "1173c82f.938c8",
        "g": "55e464ef.b89adc",
        "name": "Tasmota Rule 3 on/off",
        "topic": "cmnd/coldstore_0/Rule3",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "40dabcc2f273ed5f",
        "x": 640,
        "y": 3940,
        "wires": []
    },
    {
        "id": "ba57f561.f40538",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "Extract Rule3 State",
        "func": "if(typeof msg.payload[\"Rule3\"] !== 'undefined') {\nmsg.payload = msg.payload[\"Rule3\"].State\nreturn msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 2540,
        "wires": [
            [
                "5f403803.deafc8"
            ]
        ]
    },
    {
        "id": "5534849e.410bf4",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "Master Alarm email",
        "func": "msg = {\n    payload:\"Master Alarm triggered  visit: http://128.199.56.127:1881/ui/#!/   \" + Date().toString(),\n    topic:\"Local Master Alarm\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 1880,
        "wires": [
            [
                "10840280.70f36e"
            ]
        ]
    },
    {
        "id": "11079783.00a9f",
        "type": "mqtt out",
        "z": "1173c82f.938c8",
        "g": "55e464ef.b89adc",
        "name": "Tasmota Mem10 set",
        "topic": "cmnd/coldstore_0/Mem10",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "40dabcc2f273ed5f",
        "x": 640,
        "y": 3980,
        "wires": []
    },
    {
        "id": "7fccc05f.e03b88",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "Extract Mem10",
        "func": "if(typeof msg.payload.Mem10 !== 'undefined') {\nmsg.payload = msg.payload.Mem10\nreturn msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 400,
        "y": 2460,
        "wires": [
            [
                "c857c112.3870e"
            ]
        ]
    },
    {
        "id": "5e16523c.5f0464",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": ">30 seconds?",
        "func": "if(msg.payload > 30) {\n    msg.payload = true\nreturn msg;\n}else{\n    msg.payload = false\n    return msg;\n    \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 900,
        "y": 3340,
        "wires": [
            [
                "ebd9c6ba.b63b4"
            ]
        ]
    },
    {
        "id": "896db9eb.160f",
        "type": "inject",
        "z": "1173c82f.938c8",
        "name": "every 1 second",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 3400,
        "wires": [
            [
                "367bd2af.09ff36"
            ]
        ]
    },
    {
        "id": "367bd2af.09ff36",
        "type": "switch",
        "z": "1173c82f.938c8",
        "name": "flow.clock_state == \"run\" ?",
        "property": "clock_state1",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "run",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 3340,
        "wires": [
            [
                "a535a501.da939"
            ]
        ]
    },
    {
        "id": "a535a501.da939",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "decrement flow.clock_value",
        "func": "let clock_value1 = flow.get(\"clock_value1\") || 0;\n\nclock_value1++; \n\nif (clock_value1 < 0) clock_value1 = 0;\n\nflow.set(\"clock_value1\", clock_value1);\n\nmsg.payload = clock_value1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 580,
        "y": 3340,
        "wires": [
            [
                "5e16523c.5f0464",
                "65a36f38.aefd1"
            ]
        ]
    },
    {
        "id": "65a36f38.aefd1",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "seconds to minute:seconds",
        "func": "let secsDecimal1 = msg.payload;\n\nlet mins1 = Math.floor(secsDecimal1/60);\nlet secs1 = secsDecimal1 % 60;\n\nmsg.payload = (mins1 + (secs1 / 100.0)).toFixed(2)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 3440,
        "wires": [
            [
                "c0e96947.66ae2"
            ]
        ]
    },
    {
        "id": "419e8a8f.c3eaac",
        "type": "inject",
        "z": "1173c82f.938c8",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 70,
        "y": 3340,
        "wires": [
            [
                "36e3a42e.a2f6b4"
            ]
        ]
    },
    {
        "id": "c0e96947.66ae2",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "remove NANs",
        "func": "if(msg.payload != \"NaN\") {\nreturn msg;\n} \n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 900,
        "y": 3440,
        "wires": [
            [
                "a1dd80cc.74d87",
                "e9c34a46.d8dfe"
            ]
        ]
    },
    {
        "id": "36e3a42e.a2f6b4",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "set clock_value to 0 ",
        "rules": [
            {
                "t": "set",
                "p": "clock_value1",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 3440,
        "wires": [
            [
                "65a36f38.aefd1"
            ]
        ]
    },
    {
        "id": "7dae7f40.8462b8",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "flow run",
        "func": "let clock_state1 = flow.get(\"clock_state1\") || \"stop\";\n\nclock_state1 = clock_state1 === \"stop\" ? \"run\" : \"run\";\n\nflow.set(\"clock_state1\", clock_state1 );\n\n//return msg;\n\n\n///for start   ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 240,
        "y": 3220,
        "wires": [
            [
                "65a36f38.aefd1"
            ]
        ]
    },
    {
        "id": "42502173.de60d8",
        "type": "inject",
        "z": "1173c82f.938c8",
        "name": "",
        "props": [
            {
                "p": "topic",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 70,
        "y": 3220,
        "wires": [
            [
                "7dae7f40.8462b8"
            ]
        ]
    },
    {
        "id": "228dd8cd.cfc97",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "flow stop",
        "func": "let clock_state1 = flow.get(\"clock_state1\") || \"stop\";\n\nclock_state1 = clock_state1 === \"stop\" ? \"stop\" : \"stop\";\n\nflow.set(\"clock_state1\", clock_state1 );\n\n//return msg;\n\n\n///for start   ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 240,
        "y": 3280,
        "wires": [
            [
                "65a36f38.aefd1"
            ]
        ]
    },
    {
        "id": "a83981bd.2ed7c",
        "type": "inject",
        "z": "1173c82f.938c8",
        "name": "",
        "props": [
            {
                "p": "topic",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 70,
        "y": 3280,
        "wires": [
            [
                "228dd8cd.cfc97"
            ]
        ]
    },
    {
        "id": "43f098fe.ace168",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "zero on door closed",
        "func": "{\n    msg.payload = 0\n    return msg;\n    \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 580,
        "y": 3180,
        "wires": [
            [
                "5e16523c.5f0464"
            ]
        ]
    },
    {
        "id": "788b60fa.e3e618",
        "type": "inject",
        "z": "1173c82f.938c8",
        "name": "",
        "props": [
            {
                "p": "topic",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 50,
        "y": 3560,
        "wires": [
            [
                "2b90fdab.9c5c8a"
            ]
        ]
    },
    {
        "id": "ec0604b0.9e77d",
        "type": "trigger",
        "z": "1173c82f.938c8",
        "name": "",
        "op1": "true",
        "op2": "false",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "750",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 280,
        "y": 3640,
        "wires": [
            [
                "aded8577.acf82"
            ]
        ]
    },
    {
        "id": "c3e09e9f.4a7fd",
        "type": "inject",
        "z": "1173c82f.938c8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 60,
        "y": 3640,
        "wires": [
            [
                "ec0604b0.9e77d"
            ]
        ]
    },
    {
        "id": "cf4b8c98.175698",
        "type": "mqtt in",
        "z": "1173c82f.938c8",
        "name": "",
        "topic": "tele/coldstore_0/STATE",
        "qos": "2",
        "datatype": "json",
        "broker": "40dabcc2f273ed5f",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 110,
        "y": 720,
        "wires": [
            [
                "e0a6842a.42fa68"
            ]
        ]
    },
    {
        "id": "e0a6842a.42fa68",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "Extract Sonoff Uptime",
        "func": "if(typeof msg.payload.Uptime !== 'undefined') {\nmsg.payload = msg.payload.Uptime\nreturn msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 720,
        "wires": [
            [
                "35f4eec4.6c989a"
            ]
        ]
    },
    {
        "id": "b84d3623.5258e8",
        "type": "switch",
        "z": "1173c82f.938c8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 1840,
        "wires": [
            [
                "25ae5584a383b9f4",
                "c4226173.22298"
            ],
            [
                "5534849e.410bf4",
                "ff8e59884c50daf1"
            ]
        ]
    },
    {
        "id": "38cac5276d7b9eac",
        "type": "inject",
        "z": "1173c82f.938c8",
        "name": "MQTT query mems",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "35",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 280,
        "y": 4460,
        "wires": [
            [
                "52d5d9ad70aeaef0",
                "61be6f1c49293153",
                "ad4646befad3f6db",
                "9d9fef51db9c0a5e"
            ]
        ]
    },
    {
        "id": "52d5d9ad70aeaef0",
        "type": "mqtt out",
        "z": "1173c82f.938c8",
        "name": "Tasmota Mems query",
        "topic": "cmnd/coldstore_0/Mem",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "40dabcc2f273ed5f",
        "x": 580,
        "y": 4380,
        "wires": []
    },
    {
        "id": "61be6f1c49293153",
        "type": "mqtt out",
        "z": "1173c82f.938c8",
        "name": "Tasmota Rule1 query",
        "topic": "cmnd/coldstore_0/Rule1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "40dabcc2f273ed5f",
        "x": 580,
        "y": 4440,
        "wires": []
    },
    {
        "id": "ad4646befad3f6db",
        "type": "mqtt out",
        "z": "1173c82f.938c8",
        "name": "Tasmota Rule2 query",
        "topic": "cmnd/coldstore_0/Rule2",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "40dabcc2f273ed5f",
        "x": 580,
        "y": 4500,
        "wires": []
    },
    {
        "id": "9d9fef51db9c0a5e",
        "type": "mqtt out",
        "z": "1173c82f.938c8",
        "name": "Tasmota Rule3 query",
        "topic": "cmnd/coldstore_0/Rule3",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "40dabcc2f273ed5f",
        "x": 580,
        "y": 4560,
        "wires": []
    },
    {
        "id": "dc7d301f04c52c4b",
        "type": "mqtt in",
        "z": "1173c82f.938c8",
        "name": "Alarm topic",
        "topic": "stat/coldstore_0/ALARM",
        "qos": "2",
        "datatype": "json",
        "broker": "40dabcc2f273ed5f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 70,
        "y": 4740,
        "wires": [
            [
                "43d9f3eff7e73e05",
                "d1edda888c41c321",
                "04cdebd6c0a61267",
                "f69b4629e656cc21",
                "ddfedaad2fc570ce"
            ]
        ]
    },
    {
        "id": "43d9f3eff7e73e05",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "Extract DS18B20-1-undertemp",
        "func": "if(typeof msg.payload.DS18B201undertemp !== 'undefined') {\nmsg.payload = msg.payload.DS18B201undertemp\nreturn msg;\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 4660,
        "wires": [
            [
                "b18ebb81e1f584a7"
            ]
        ]
    },
    {
        "id": "d1edda888c41c321",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "Extract DS18B20-2-undertemp",
        "func": "if(typeof msg.payload.DS18B202undertemp !== 'undefined') {\nmsg.payload = msg.payload.DS18B202undertemp\nreturn msg;\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 4700,
        "wires": [
            [
                "93157cefc29d525b"
            ]
        ]
    },
    {
        "id": "04cdebd6c0a61267",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "Extract Door0 alarm",
        "func": "if(typeof msg.payload.door_0 !== 'undefined') {\nmsg.payload = msg.payload.door_0\nreturn msg;\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 4820,
        "wires": [
            [
                "d018815cafbf4094"
            ]
        ]
    },
    {
        "id": "378cbcc8b8f44a03",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "Extract for describer",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "1",
                "fromt": "num",
                "to": "DOOR ALARM",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 4820,
        "wires": [
            [
                "15fe5e1545481d3f",
                "188c046787a448d1",
                "2f92d3c932b12b3e"
            ]
        ]
    },
    {
        "id": "46b7cff269c9ec0e",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "Extract for describer",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "1",
                "fromt": "num",
                "to": "DS18B20-2-UNDERTEMP",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 4700,
        "wires": [
            [
                "15fe5e1545481d3f",
                "188c046787a448d1",
                "2f92d3c932b12b3e"
            ]
        ]
    },
    {
        "id": "6cf0da1d2eb88351",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "Extract for describer",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "1",
                "fromt": "num",
                "to": "DS18B20-1-UNDERTEMP",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 4660,
        "wires": [
            [
                "15fe5e1545481d3f",
                "188c046787a448d1",
                "2f92d3c932b12b3e"
            ]
        ]
    },
    {
        "id": "f69b4629e656cc21",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "Extract DS18B20-1-overtemp",
        "func": "if(typeof msg.payload.DS18B201overtemp !== 'undefined') {\nmsg.payload = msg.payload.DS18B201overtemp\nreturn msg;\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 4740,
        "wires": [
            [
                "10fa2461a2f14739"
            ]
        ]
    },
    {
        "id": "1bdc7dbb36b09b43",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "Extract for describer",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "1",
                "fromt": "num",
                "to": "DS18B20-1-OVERTEMP",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 4740,
        "wires": [
            [
                "15fe5e1545481d3f",
                "188c046787a448d1",
                "2f92d3c932b12b3e"
            ]
        ]
    },
    {
        "id": "ddfedaad2fc570ce",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "Extract DS18B20-2-overtemp",
        "func": "if(typeof msg.payload.DS18B202overtemp !== 'undefined') {\nmsg.payload = msg.payload.DS18B202overtemp\nreturn msg;\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 4780,
        "wires": [
            [
                "fea94cb9309beb2c"
            ]
        ]
    },
    {
        "id": "85f8917fd5df5e54",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "Extract for describer",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "1",
                "fromt": "num",
                "to": "DS18B20-2-OVERTEMP",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 4780,
        "wires": [
            [
                "15fe5e1545481d3f",
                "188c046787a448d1",
                "2f92d3c932b12b3e"
            ]
        ]
    },
    {
        "id": "ff8e59884c50daf1",
        "type": "trigger",
        "z": "1173c82f.938c8",
        "name": "Trigger",
        "op1": "togglenow",
        "op2": "false",
        "op1type": "str",
        "op2type": "bool",
        "duration": "-400",
        "extend": false,
        "overrideDelay": true,
        "units": "ms",
        "reset": "reset",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 900,
        "y": 1800,
        "wires": [
            [
                "812fc3e761299f73"
            ]
        ]
    },
    {
        "id": "25ae5584a383b9f4",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "reset",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "0",
                "fromt": "num",
                "to": "reset",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 1800,
        "wires": [
            [
                "ff8e59884c50daf1"
            ]
        ]
    },
    {
        "id": "90e73af7e14a7077",
        "type": "inject",
        "z": "1173c82f.938c8",
        "name": "test inlfux msg",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"Time\":\"2022-02-23T20:17:13\",\"Switch1\":\"OFF\",\"DS18B20-1 Id\":\"3C01F095118C\",\"DS18B20-1 Temperature\":25,\"DS18B20-2 Id\":\"3C01F095F789\",\"DS18B20-2 Temperature\":22.9,\"SI7021 Temperature\":24.7,\"SI7021 Humidity\":65.8}]",
        "payloadType": "jsonata",
        "x": 760,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "b2c1bdaf2b6e6344",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "MQTT JSON - Influx db",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[{\"masteralarm\": msg.payload}]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1610,
        "y": 1800,
        "wires": [
            [
                "08949e4b0bcab2a6"
            ]
        ]
    },
    {
        "id": "fadff004ceea28c5",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "MQTT JSON - Influx db",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[{\"door_0\": msg.payload}]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1610,
        "y": 2360,
        "wires": [
            [
                "9bc907184dc34d67"
            ]
        ]
    },
    {
        "id": "188c046787a448d1",
        "type": "debug",
        "z": "1173c82f.938c8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 4660,
        "wires": []
    },
    {
        "id": "b18ebb81e1f584a7",
        "type": "switch",
        "z": "1173c82f.938c8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 4660,
        "wires": [
            [
                "6cf0da1d2eb88351"
            ],
            [
                "15fe5e1545481d3f"
            ]
        ]
    },
    {
        "id": "93157cefc29d525b",
        "type": "switch",
        "z": "1173c82f.938c8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 4700,
        "wires": [
            [
                "46b7cff269c9ec0e"
            ],
            [
                "15fe5e1545481d3f"
            ]
        ]
    },
    {
        "id": "fea94cb9309beb2c",
        "type": "switch",
        "z": "1173c82f.938c8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 4780,
        "wires": [
            [
                "85f8917fd5df5e54"
            ],
            [
                "15fe5e1545481d3f"
            ]
        ]
    },
    {
        "id": "10fa2461a2f14739",
        "type": "switch",
        "z": "1173c82f.938c8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 4740,
        "wires": [
            [
                "1bdc7dbb36b09b43"
            ],
            [
                "15fe5e1545481d3f"
            ]
        ]
    },
    {
        "id": "d018815cafbf4094",
        "type": "switch",
        "z": "1173c82f.938c8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 4820,
        "wires": [
            [
                "378cbcc8b8f44a03"
            ],
            [
                "15fe5e1545481d3f"
            ]
        ]
    },
    {
        "id": "b790eafacd43ce73",
        "type": "switch",
        "z": "1173c82f.938c8",
        "name": "When Offline zero",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 2000,
        "wires": [
            [
                "1fe2f1376f5467f0",
                "6db30f45256b4847",
                "31fd9ed25a6528c6",
                "12fd611a9e331342",
                "66de806ccf114b9b"
            ],
            [
                "985c506200a7df59",
                "66de806ccf114b9b"
            ]
        ]
    },
    {
        "id": "1fe2f1376f5467f0",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "2 to switch leds to grey",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "2",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1270,
        "y": 2020,
        "wires": [
            [
                "e4cfbac3.9c97b",
                "32dd1d42.1e93d2",
                "a1762781.4584c",
                "f9e3126a25b36bb9",
                "5bf8ef84.4bfe9",
                "ac083610.e915a8"
            ]
        ]
    },
    {
        "id": "3d521669a1d197e5",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "sdfsdfsdfgdsfg",
        "func": "if(typeof msg.payload.Switch1 !== 'undefined') {\nmsg.payload = msg.payload.Switch1\nreturn msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 2120,
        "wires": [
            [
                "96178bf9c9dfd620"
            ]
        ]
    },
    {
        "id": "6db30f45256b4847",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "Blanks values",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1080,
        "y": 1980,
        "wires": [
            [
                "4f0423eb.74888c",
                "42937831.4e92",
                "e9fe3b9b.7e9c28",
                "de349c66.fdaf68",
                "6fe2a3ae.0a20c4",
                "503ac60b.22147",
                "59c5d55b.f349b4",
                "19a4d04e.5fa458"
            ]
        ]
    },
    {
        "id": "59b11097cd696ad3",
        "type": "switch",
        "z": "1173c82f.938c8",
        "d": true,
        "g": "55e464ef.b89adc",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 4180,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "31fd9ed25a6528c6",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "MQTT Connction fail email",
        "func": "msg = {\n    payload:\"Coldstore_0 MQTT connection is Offline  visit: http://128.199.56.127:1881/ui/#!/   \" + Date().toString(),\n    topic:\"MQTT connection fail\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 2100,
        "wires": [
            [
                "203da64c6c1b140b"
            ]
        ]
    },
    {
        "id": "78b8f5fac8e76369",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "DS18B20-1 sensor is disconnected email",
        "func": "msg = {\n    payload:\"Coldstore_0 DS18B20-1 sensor is disconnected  visit: http://128.199.56.127:1881/ui/#!/   \" + Date().toString(),\n    topic:\"Sesnor fail\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 620,
        "wires": [
            [
                "b0328acfb963a7c6"
            ]
        ]
    },
    {
        "id": "b5e5b7e440db5240",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "SI7021 sensor is disconnected email",
        "func": "msg = {\n    payload:\"Coldstore_0 SI7021 sensor is disconnected  visit: http://128.199.56.127:1881/ui/#!/   \" + Date().toString(),\n    topic:\"Sensor fail\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 1280,
        "wires": [
            [
                "1cc2eb55d4a47ce0"
            ]
        ]
    },
    {
        "id": "54ae486df4997c96",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "DS18B20-1 sensor is disconnected email",
        "func": "msg = {\n    payload:\"Coldstore_0 DS18B20-1 sensor is disconnected  visit: http://128.199.56.127:1881/ui/#!/   \" + Date().toString(),\n    topic:\"Sesnor fail\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1720,
        "wires": [
            [
                "9e3734307b38536f"
            ]
        ]
    },
    {
        "id": "985c506200a7df59",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "Topic set a",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "a",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1230,
        "y": 2880,
        "wires": [
            []
        ]
    },
    {
        "id": "99159eb31ac9b91d",
        "type": "inject",
        "z": "1173c82f.938c8",
        "name": "data 1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 970,
        "y": 2880,
        "wires": [
            [
                "985c506200a7df59"
            ]
        ]
    },
    {
        "id": "12fd611a9e331342",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "Topic set b",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "b",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1230,
        "y": 2800,
        "wires": [
            []
        ]
    },
    {
        "id": "43a41cc9217fc4e0",
        "type": "inject",
        "z": "1173c82f.938c8",
        "name": "data 0",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 970,
        "y": 2800,
        "wires": [
            [
                "12fd611a9e331342"
            ]
        ]
    },
    {
        "id": "c7a5183d38db000f",
        "type": "inject",
        "z": "1173c82f.938c8",
        "name": "reset 40 seconds",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "40",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 930,
        "y": 2720,
        "wires": [
            [
                "0f051466a751bd70"
            ]
        ]
    },
    {
        "id": "0f051466a751bd70",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "Topic set a",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "b",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1230,
        "y": 2720,
        "wires": [
            []
        ]
    },
    {
        "id": "8a8d712a6b948b92",
        "type": "function",
        "z": "1173c82f.938c8",
        "name": "bool to payload",
        "func": "//if(typeof msg.payload[\"DS18B20-1\"] !== 'undefined') {\nmsg.payload = msg.bool\nreturn msg;\n//} else {\n    //msg.payload = null\n    //failed we need to create a sensor fail here\n    //return msg;\n//}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 2720,
        "wires": [
            [
                "725f0d19accf0553"
            ]
        ]
    },
    {
        "id": "725f0d19accf0553",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "change",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "true",
                "fromt": "bool",
                "to": "1",
                "tot": "num"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "false",
                "fromt": "bool",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1460,
        "y": 2820,
        "wires": [
            [
                "3285ab0d8a580307",
                "cb486b15872ad95f",
                "6ef723f798a2bb03"
            ]
        ]
    },
    {
        "id": "96178bf9c9dfd620",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "ON",
                "fromt": "str",
                "to": "1",
                "tot": "num"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "OFF",
                "fromt": "str",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 2120,
        "wires": [
            [
                "e4cfbac3.9c97b"
            ]
        ]
    },
    {
        "id": "66de806ccf114b9b",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "MQTT JSON - Influx db",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[{\"availability\": msg.payload}]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1610,
        "y": 2060,
        "wires": [
            [
                "16d504fbe227f28c"
            ]
        ]
    },
    {
        "id": "c0609bdda4504db4",
        "type": "inject",
        "z": "1173c82f.938c8",
        "name": "At runtime to make led Green",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "OFF",
        "payloadType": "str",
        "x": 130,
        "y": 2060,
        "wires": [
            [
                "96178bf9c9dfd620"
            ]
        ]
    },
    {
        "id": "fc293b1483e67a5b",
        "type": "function",
        "z": "1173c82f.938c8",
        "d": true,
        "name": "Cloud master alarm email",
        "func": "msg = {\n    payload:\"Cloud master alarm trigger  visit: http://128.199.56.127:1881/ui/#!/   \" + Date().toString(),\n    topic:\"Cloud Master Alarm\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 2920,
        "wires": [
            [
                "42f58685c25aa5c9"
            ]
        ]
    },
    {
        "id": "6ef723f798a2bb03",
        "type": "switch",
        "z": "1173c82f.938c8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1470,
        "y": 2900,
        "wires": [
            [],
            [
                "fc293b1483e67a5b",
                "c46776f56ba066be"
            ]
        ]
    },
    {
        "id": "c46776f56ba066be",
        "type": "debug",
        "z": "1173c82f.938c8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 2980,
        "wires": []
    },
    {
        "id": "7473f7bb36648d52",
        "type": "change",
        "z": "1173c82f.938c8",
        "name": "MQTT JSON - Influx db",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[\t    {\"Switch1\": msg.payload.Switch1,\t        \"DS18B20-1 Id\": msg.payload.\"DS18B20-1\".Id,\t        \"DS18B20-1 Temperature\": msg.payload.\"DS18B20-1\".Temperature,\t        \"DS18B20-2 Id\": msg.payload.\"DS18B20-2\".Id,\t        \"DS18B20-2 Temperature\": msg.payload.\"DS18B20-2\".Temperature,\t        \"SI7021 Temperature\": msg.payload.SI7021.Temperature,\t        \"SI7021 Humidity\": msg.payload.SI7021.Humidity\t    }\t]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "f0a15736.2a642",
        "type": "influxdb out",
        "z": "1173c82f.938c8",
        "influxdb": "a31e02fc.1ce67",
        "name": "InfluxdB - coldstore_0",
        "measurement": "cold0",
        "precision": "s",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 780,
        "y": 100,
        "wires": []
    },
    {
        "id": "08949e4b0bcab2a6",
        "type": "influxdb out",
        "z": "1173c82f.938c8",
        "d": true,
        "influxdb": "a31e02fc.1ce67",
        "name": "InfluxdB - coldstore_0",
        "measurement": "cold0",
        "precision": "s",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1920,
        "y": 1800,
        "wires": []
    },
    {
        "id": "9bc907184dc34d67",
        "type": "influxdb out",
        "z": "1173c82f.938c8",
        "influxdb": "a31e02fc.1ce67",
        "name": "InfluxdB - coldstore_0",
        "measurement": "cold0",
        "precision": "s",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1880,
        "y": 2360,
        "wires": []
    },
    {
        "id": "16d504fbe227f28c",
        "type": "influxdb out",
        "z": "1173c82f.938c8",
        "d": true,
        "influxdb": "a31e02fc.1ce67",
        "name": "InfluxdB - coldstore_0",
        "measurement": "cold0",
        "precision": "s",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1920,
        "y": 2060,
        "wires": []
    },
    {
        "id": "e4cfbac3.9c97b",
        "type": "ui_led",
        "z": "1173c82f.938c8",
        "order": 1,
        "group": "db9184c5.018a7",
        "width": 0,
        "height": 0,
        "label": "Door 1 (Green = door closed)",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "1",
                "valueType": "num"
            },
            {
                "color": "#008000",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#808080",
                "value": "2",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "Door 1 Led coldstore_0",
        "x": 1610,
        "y": 2240,
        "wires": []
    },
    {
        "id": "f3a5fdb0.7896",
        "type": "ui_led",
        "z": "1173c82f.938c8",
        "order": 1,
        "group": "93052513.5fe5f8",
        "width": 0,
        "height": 0,
        "label": "Device connection",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "Device connection coldstore_0",
        "x": 1630,
        "y": 2140,
        "wires": []
    },
    {
        "id": "a1762781.4584c",
        "type": "ui_led",
        "z": "1173c82f.938c8",
        "order": 5,
        "group": "93052513.5fe5f8",
        "width": 0,
        "height": 0,
        "label": "DS18B20-1 sensor connection",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            },
            {
                "color": "#808080",
                "value": "2",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "DS18B20-1 sensor connection coldstore_0",
        "x": 1250,
        "y": 420,
        "wires": []
    },
    {
        "id": "32dd1d42.1e93d2",
        "type": "ui_led",
        "z": "1173c82f.938c8",
        "order": 7,
        "group": "93052513.5fe5f8",
        "width": 0,
        "height": 0,
        "label": "SI7021 sensor connection",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            },
            {
                "color": "#808080",
                "value": "2",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "SI7021 sensor connection coldstore_0",
        "x": 1660,
        "y": 1600,
        "wires": []
    },
    {
        "id": "c4226173.22298",
        "type": "ui_led",
        "z": "1173c82f.938c8",
        "order": 1,
        "group": "d62e4f05.76a81",
        "width": "0",
        "height": "0",
        "label": "Local master alarm",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#808080",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#ff0000",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "Local master alarm coldstore_0",
        "x": 1630,
        "y": 1840,
        "wires": []
    },
    {
        "id": "ebd9c6ba.b63b4",
        "type": "ui_led",
        "z": "1173c82f.938c8",
        "d": true,
        "order": 6,
        "group": "d62e4f05.76a81",
        "width": 0,
        "height": 0,
        "label": "Door open >30 seconds",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "true",
                "valueType": "bool"
            },
            {
                "color": "#808080",
                "value": "0",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Door open >30 seconds coldstore_0",
        "x": 1330,
        "y": 3340,
        "wires": []
    },
    {
        "id": "aded8577.acf82",
        "type": "ui_led",
        "z": "1173c82f.938c8",
        "order": 2,
        "group": "93052513.5fe5f8",
        "width": 0,
        "height": 0,
        "label": "Message traffic",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#00ffff",
                "value": "true",
                "valueType": "bool"
            },
            {
                "color": "#808080",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "Message traffic coldstore_0",
        "x": 560,
        "y": 3640,
        "wires": []
    },
    {
        "id": "f9e3126a25b36bb9",
        "type": "ui_led",
        "z": "1173c82f.938c8",
        "order": 5,
        "group": "93052513.5fe5f8",
        "width": 0,
        "height": 0,
        "label": "DS18B20-2 sensor connection",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            },
            {
                "color": "#808080",
                "value": "2",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "DS18B20-2 sensor connection coldstore_0",
        "x": 1250,
        "y": 1140,
        "wires": []
    },
    {
        "id": "3285ab0d8a580307",
        "type": "ui_led",
        "z": "1173c82f.938c8",
        "order": 9,
        "group": "d62e4f05.76a81",
        "width": 0,
        "height": 0,
        "label": "Coud master alarm",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "1",
                "valueType": "num"
            },
            {
                "color": "#808080",
                "value": "0",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "Cloud alarm master coldstore_0",
        "x": 1740,
        "y": 2820,
        "wires": []
    },
    {
        "id": "4f0423eb.74888c",
        "type": "ui_text",
        "z": "1173c82f.938c8",
        "group": "4914d4b6012ce9fd",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "DS18B20-1 Temperature (C) text coldstore_0",
        "label": "DS18B20-1 Temperature (C)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 840,
        "y": 280,
        "wires": []
    },
    {
        "id": "e9fe3b9b.7e9c28",
        "type": "ui_text",
        "z": "1173c82f.938c8",
        "group": "4914d4b6012ce9fd",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "DS18B20-2 Temperature (C) text coldstore_0",
        "label": "DS18B20-2 Temperature (C)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 840,
        "y": 880,
        "wires": []
    },
    {
        "id": "6fe2a3ae.0a20c4",
        "type": "ui_text",
        "z": "1173c82f.938c8",
        "group": "4914d4b6012ce9fd",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "SI7021 Temperature (C) text coldstore_0",
        "label": "SI7021 Temperature (C)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1660,
        "y": 1400,
        "wires": []
    },
    {
        "id": "59c5d55b.f349b4",
        "type": "ui_text",
        "z": "1173c82f.938c8",
        "group": "4914d4b6012ce9fd",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "SI7021 Relative humidity % text coldstore_0",
        "label": "SI7021 Relative humidity %",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1680,
        "y": 1480,
        "wires": []
    },
    {
        "id": "526a87c.ca14878",
        "type": "ui_text",
        "z": "1173c82f.938c8",
        "group": "4914d4b6012ce9fd",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Device last message timestamp coldstore_0",
        "label": "Device last message timestamp",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 830,
        "y": 180,
        "wires": []
    },
    {
        "id": "bcb09236.704618",
        "type": "ui_text",
        "z": "1173c82f.938c8",
        "group": "db9184c5.018a7",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Door 1 Event Count Today text coldstore_0",
        "label": "Door 1 event count today",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 710,
        "y": 2600,
        "wires": []
    },
    {
        "id": "61f1db80.482964",
        "type": "ui_text",
        "z": "1173c82f.938c8",
        "group": "db9184c5.018a7",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Door 1 open time today text coldstore_0",
        "label": "Door 1 open time today (m.ss)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1340,
        "y": 3040,
        "wires": []
    },
    {
        "id": "918d366d.04695",
        "type": "ui_text",
        "z": "1173c82f.938c8",
        "group": "8a904467dbc89824",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "DS18B20-1 Alarm Upper Setpoint Setting('C) coldstore_0",
        "label": " Setting('C)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 780,
        "y": 2380,
        "wires": []
    },
    {
        "id": "e8f0dcb8.f411a",
        "type": "ui_text",
        "z": "1173c82f.938c8",
        "group": "8a904467dbc89824",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "DS18B20-1 Alarm Lower Setpoint Setting('C) coldstore_0",
        "label": " Setting ('C)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 780,
        "y": 2420,
        "wires": []
    },
    {
        "id": "72f3a38b.b2199c",
        "type": "ui_text",
        "z": "1173c82f.938c8",
        "group": "63cbcf0b.0d48d8",
        "order": 10,
        "width": 0,
        "height": 0,
        "name": "Local Temperature Alarms State coldstore_0",
        "label": "Local Temperature Alarms State",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 740,
        "y": 2500,
        "wires": []
    },
    {
        "id": "4751a2a6.441bdc",
        "type": "ui_text",
        "z": "1173c82f.938c8",
        "group": "de7c45f.67e08b8",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "DS18B20-2 Alarm Upper Setpoint Setting('C) coldstore_0",
        "label": "Setting('C)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1720,
        "y": 2200,
        "wires": []
    },
    {
        "id": "5a0846dd.ae7d2",
        "type": "ui_text",
        "z": "1173c82f.938c8",
        "group": "de7c45f.67e08b8",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "DS18B20-2 Alarm Lower Setpoint Setting('C) coldstore_0",
        "label": " Setting('C)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1720,
        "y": 2280,
        "wires": []
    },
    {
        "id": "5f403803.deafc8",
        "type": "ui_text",
        "z": "1173c82f.938c8",
        "group": "63cbcf0b.0d48d8",
        "order": 12,
        "width": 0,
        "height": 0,
        "name": "Local Door Alarm State coldstore_0",
        "label": "Local Door Alarm State",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 710,
        "y": 2540,
        "wires": []
    },
    {
        "id": "c857c112.3870e",
        "type": "ui_text",
        "z": "1173c82f.938c8",
        "group": "f46577b7.dfeb8",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "Door Open Alarm Trigger Time Setting coldstore_0",
        "label": "Setting (s)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 760,
        "y": 2460,
        "wires": []
    },
    {
        "id": "a1dd80cc.74d87",
        "type": "ui_text",
        "z": "1173c82f.938c8",
        "group": "db9184c5.018a7",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Door open time last event text coldstore_0",
        "label": "Door open time last event (m.ss)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1330,
        "y": 3460,
        "wires": []
    },
    {
        "id": "2cd79d6f.221a7a",
        "type": "ui_text",
        "z": "1173c82f.938c8",
        "group": "93052513.5fe5f8",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Traffic -  messages per minute text coldstore_0",
        "label": "Traffic  - messages per minute",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 620,
        "y": 3560,
        "wires": []
    },
    {
        "id": "35f4eec4.6c989a",
        "type": "ui_text",
        "z": "1173c82f.938c8",
        "group": "93052513.5fe5f8",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Device uptime text coldstore_0",
        "label": "Device uptime",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 790,
        "y": 720,
        "wires": []
    },
    {
        "id": "15fe5e1545481d3f",
        "type": "ui_text",
        "z": "1173c82f.938c8",
        "group": "d62e4f05.76a81",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Local alarm fault coldstore_0",
        "label": "Local alarm fault",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1190,
        "y": 4820,
        "wires": []
    },
    {
        "id": "f8beac32.4682f",
        "type": "ui_text_input",
        "z": "1173c82f.938c8",
        "g": "55e464ef.b89adc",
        "name": "DS18B20-1 alarm upper setpoint ('C) coldstore_0",
        "label": "DS18B20-1 alarm upper setpoint ('C)",
        "tooltip": "",
        "group": "8a904467dbc89824",
        "order": 1,
        "width": "6",
        "height": "1",
        "passthru": true,
        "mode": "number",
        "delay": "1000",
        "topic": "",
        "x": 250,
        "y": 4020,
        "wires": [
            [
                "d374803c.b4799"
            ]
        ]
    },
    {
        "id": "2a5982c7.7e4f5e",
        "type": "ui_text_input",
        "z": "1173c82f.938c8",
        "g": "55e464ef.b89adc",
        "name": "DS18B20-1 alarm lower setpoint ('C) coldstore_0",
        "label": "DS18B20-1 alarm lower setpoint ('C)",
        "tooltip": "",
        "group": "8a904467dbc89824",
        "order": 3,
        "width": "6",
        "height": "1",
        "passthru": true,
        "mode": "number",
        "delay": "1000",
        "topic": "",
        "x": 250,
        "y": 4060,
        "wires": [
            [
                "fa6a12b0.3409f8"
            ]
        ]
    },
    {
        "id": "4150b7b1.ba5788",
        "type": "ui_text_input",
        "z": "1173c82f.938c8",
        "g": "55e464ef.b89adc",
        "name": "DS18B20-2 alarm lower setpoint ('C) coldstore_0",
        "label": "DS18B20-2 alarm lower setpoint ('C)",
        "tooltip": "",
        "group": "de7c45f.67e08b8",
        "order": 4,
        "width": "6",
        "height": "1",
        "passthru": true,
        "mode": "number",
        "delay": "1000",
        "topic": "",
        "x": 250,
        "y": 4140,
        "wires": [
            [
                "c089b199.1fdf3"
            ]
        ]
    },
    {
        "id": "d1364909.24acb8",
        "type": "ui_text_input",
        "z": "1173c82f.938c8",
        "g": "55e464ef.b89adc",
        "name": "Door 1 open alarm trigger time set (seconds) coldstore_0",
        "label": "Door 1 open alarm trigger time set (seconds)",
        "tooltip": "",
        "group": "f46577b7.dfeb8",
        "order": 1,
        "width": "6",
        "height": "1",
        "passthru": true,
        "mode": "number",
        "delay": "1000",
        "topic": "",
        "x": 280,
        "y": 3980,
        "wires": [
            [
                "11079783.00a9f"
            ]
        ]
    },
    {
        "id": "ce9eee9769e5746b",
        "type": "ui_text_input",
        "z": "1173c82f.938c8",
        "g": "55e464ef.b89adc",
        "name": "DS18B20-2 alarm upper setpoint ('C) coldstore_0",
        "label": "DS18B20-2 alarm upper setpoint ('C)",
        "tooltip": "",
        "group": "de7c45f.67e08b8",
        "order": 1,
        "width": "6",
        "height": "1",
        "passthru": true,
        "mode": "number",
        "delay": "1000",
        "topic": "",
        "x": 250,
        "y": 4100,
        "wires": [
            [
                "57bbdb6d.8096bc"
            ]
        ]
    },
    {
        "id": "42937831.4e92",
        "type": "ui_chart",
        "z": "1173c82f.938c8",
        "name": "DS18B20-1 Temperature (C)  chart coldstore_0",
        "group": "4914d4b6012ce9fd",
        "order": 6,
        "width": "6",
        "height": "6",
        "label": "DS18B20-1 Temperature (C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "40",
        "removeOlder": "12",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#ff0000",
            "#ff9896",
            "#544dd7",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 840,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "de349c66.fdaf68",
        "type": "ui_chart",
        "z": "1173c82f.938c8",
        "name": "DS18B20-2 Temperature (C) chart coldstore_0",
        "group": "4914d4b6012ce9fd",
        "order": 7,
        "width": "6",
        "height": "6",
        "label": "DS18B20-2 Temperature (C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "40",
        "removeOlder": "12",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 840,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "503ac60b.22147",
        "type": "ui_chart",
        "z": "1173c82f.938c8",
        "name": "SI7021 Temperature (C) chart coldstore_0",
        "group": "4914d4b6012ce9fd",
        "order": 8,
        "width": "6",
        "height": "6",
        "label": "SI7021 Temperature (C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "15",
        "ymax": "30",
        "removeOlder": "12",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1670,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "19a4d04e.5fa458",
        "type": "ui_chart",
        "z": "1173c82f.938c8",
        "name": "SI7021 Relative humidity % chart coldstore_0",
        "group": "4914d4b6012ce9fd",
        "order": 9,
        "width": "6",
        "height": "6",
        "label": "SI7021 Relative humidity %",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "12",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1680,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "b35142a0.975d28",
        "type": "ui_chart",
        "z": "1173c82f.938c8",
        "name": "Door open/close event history chart coldstore_0",
        "group": "db9184c5.018a7",
        "order": 5,
        "width": "6",
        "height": "3",
        "label": "Door open/close event history",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "1",
        "removeOlder": "12",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1690,
        "y": 2320,
        "wires": [
            []
        ]
    },
    {
        "id": "b7f60560.efb098",
        "type": "ui_chart",
        "z": "1173c82f.938c8",
        "name": "Device connection history chart coldstore_0",
        "group": "93052513.5fe5f8",
        "order": 8,
        "width": "6",
        "height": "3",
        "label": "Device connection history",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "1",
        "removeOlder": "6",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1670,
        "y": 2000,
        "wires": [
            []
        ]
    },
    {
        "id": "e7791560.9efb28",
        "type": "ui_chart",
        "z": "1173c82f.938c8",
        "name": "SI7021 sensor connection history chart coldstore_0",
        "group": "93052513.5fe5f8",
        "order": 13,
        "width": "6",
        "height": "3",
        "label": "SI7021 sensor connection history",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "1",
        "removeOlder": "12",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1700,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "ac083610.e915a8",
        "type": "ui_chart",
        "z": "1173c82f.938c8",
        "name": "DS18B20-2 sensor connection history chart coldstore_0",
        "group": "93052513.5fe5f8",
        "order": 11,
        "width": "6",
        "height": "3",
        "label": "DS18B20-2 sensor connection history",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "1",
        "removeOlder": "12",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1290,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "5bf8ef84.4bfe9",
        "type": "ui_chart",
        "z": "1173c82f.938c8",
        "name": "DS18B20-1 sensor connection chart history coldstore_0",
        "group": "93052513.5fe5f8",
        "order": 10,
        "width": "6",
        "height": "3",
        "label": "DS18B20-1 sensor connection history",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "1",
        "removeOlder": "12",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1290,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "3d38dc49.1869fc",
        "type": "ui_chart",
        "z": "1173c82f.938c8",
        "name": "Door 1 open time today history (mins) chart coldstore_0",
        "group": "db9184c5.018a7",
        "order": 7,
        "width": "6",
        "height": "3",
        "label": "Door 1 open time today history (mins)",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "10",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1390,
        "y": 3100,
        "wires": [
            []
        ]
    },
    {
        "id": "3bbf6987.bbbdfe",
        "type": "ui_chart",
        "z": "1173c82f.938c8",
        "name": "Local master alarm history coldstore_0",
        "group": "d62e4f05.76a81",
        "order": 4,
        "width": "6",
        "height": "3",
        "label": "Local master alarm history",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "1",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1660,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "e9c34a46.d8dfe",
        "type": "ui_chart",
        "z": "1173c82f.938c8",
        "d": true,
        "name": "Door open time last event History (mins) chart coldstore_0",
        "group": "db9184c5.018a7",
        "order": 6,
        "width": "6",
        "height": "3",
        "label": "Door open time last event History (mins)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "10",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1380,
        "y": 3520,
        "wires": [
            []
        ]
    },
    {
        "id": "4b9b5b35.c322bc",
        "type": "ui_chart",
        "z": "1173c82f.938c8",
        "name": "Traffic history (msgs/min) text coldstore_0",
        "group": "93052513.5fe5f8",
        "order": 9,
        "width": "6",
        "height": "3",
        "label": "Traffic history (msgs/min)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "50",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 610,
        "y": 3600,
        "wires": [
            []
        ]
    },
    {
        "id": "cb486b15872ad95f",
        "type": "ui_chart",
        "z": "1173c82f.938c8",
        "name": "Cloud master alarm history coldstore_0",
        "group": "d62e4f05.76a81",
        "order": 10,
        "width": "6",
        "height": "3",
        "label": "Cloud master alarm history ",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "1",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1760,
        "y": 2860,
        "wires": [
            []
        ]
    },
    {
        "id": "dd232594.591ac8",
        "type": "ui_button",
        "z": "1173c82f.938c8",
        "g": "55e464ef.b89adc",
        "name": "Reboot device coldstore_0",
        "group": "63cbcf0b.0d48d8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reboot device",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "1",
        "payloadType": "num",
        "topic": "",
        "x": 180,
        "y": 3820,
        "wires": [
            [
                "c84fc56e.248c88"
            ]
        ]
    },
    {
        "id": "4a2f9d802dd6e662",
        "type": "ui_button",
        "z": "1173c82f.938c8",
        "g": "55e464ef.b89adc",
        "name": "Test Alarm Emails All coldstore_0",
        "group": "63cbcf0b.0d48d8",
        "order": 13,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Test Alarm Emails All",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "",
        "x": 200,
        "y": 4220,
        "wires": [
            [
                "5534849e.410bf4",
                "31fd9ed25a6528c6",
                "54ae486df4997c96",
                "b5e5b7e440db5240",
                "78b8f5fac8e76369"
            ]
        ]
    },
    {
        "id": "c5cfcd08.20d528",
        "type": "ui_switch",
        "z": "1173c82f.938c8",
        "g": "55e464ef.b89adc",
        "name": "Local Master Alarm - OFF/ACTIVATED coldstore_0",
        "label": "Local master alarm - Off/Activated",
        "tooltip": "",
        "group": "63cbcf0b.0d48d8",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "x": 260,
        "y": 4260,
        "wires": [
            [
                "68aed72f.f4445"
            ]
        ]
    },
    {
        "id": "dc9ad9d9.c169f8",
        "type": "ui_switch",
        "z": "1173c82f.938c8",
        "g": "55e464ef.b89adc",
        "name": "Local temperature alarms - disarm/arm coldstore_0",
        "label": "Local temperature alarms - disarm/arm",
        "tooltip": "",
        "group": "63cbcf0b.0d48d8",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "x": 260,
        "y": 3900,
        "wires": [
            [
                "5e76fcaf.f4400c"
            ]
        ]
    },
    {
        "id": "4ccda17e.42b31",
        "type": "ui_switch",
        "z": "1173c82f.938c8",
        "g": "55e464ef.b89adc",
        "name": "Door 1 alarm - disarm/arm coldstore_0",
        "label": "Door 1 alarm - disarm/arm",
        "tooltip": "",
        "group": "63cbcf0b.0d48d8",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "x": 220,
        "y": 3940,
        "wires": [
            [
                "3110c218.8f5a0e"
            ]
        ]
    },
    {
        "id": "0ce7a40d07ecdd3f",
        "type": "ui_switch",
        "z": "1173c82f.938c8",
        "d": true,
        "g": "55e464ef.b89adc",
        "name": "Cloud Master Alarm - OFF/ACTIVATED coldstore_0",
        "label": "Cloud master alarm - Off/Activated",
        "tooltip": "",
        "group": "63cbcf0b.0d48d8",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "0",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "1",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "x": 260,
        "y": 4180,
        "wires": [
            [
                "59b11097cd696ad3"
            ]
        ]
    },
    {
        "id": "fdbfd42c.ddc208",
        "type": "ui_numeric",
        "z": "1173c82f.938c8",
        "d": true,
        "g": "55e464ef.b89adc",
        "name": "Tasmota Set Teleperiod (seconds) coldstore_0",
        "label": "Tasmota Set Teleperiod (seconds)",
        "tooltip": "",
        "group": "63cbcf0b.0d48d8",
        "order": 3,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": "10",
        "max": "60",
        "step": 1,
        "x": 240,
        "y": 3860,
        "wires": [
            [
                "b4287368.019748"
            ]
        ]
    },
    {
        "id": "692d93619ad1760d",
        "type": "ui_numeric",
        "z": "1173c82f.938c8",
        "g": "7f4066b5a86a06c0",
        "name": "",
        "label": "Minimum Length",
        "tooltip": "",
        "group": "cc7d7ea92ffb628f",
        "order": 13,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": false,
        "topic": "topic",
        "format": "{{value}}",
        "min": "4",
        "max": "32",
        "step": 1,
        "x": 380,
        "y": 2860,
        "wires": [
            []
        ]
    },
    {
        "id": "812fc3e761299f73",
        "type": "toggle",
        "z": "1173c82f.938c8",
        "name": "",
        "onOffTopic": "",
        "onValue": "1",
        "onType": "num",
        "offValue": "0",
        "offType": "num",
        "toggleTopic": "",
        "toggleValue": "togglenow",
        "toggleType": "str",
        "passOnOff": "ifChanged",
        "x": 1170,
        "y": 1800,
        "wires": [
            [
                "c4226173.22298"
            ]
        ]
    },
    {
        "id": "2b90fdab.9c5c8a",
        "type": "Message Counter",
        "z": "1173c82f.938c8",
        "name": "Messages Per Minute",
        "units": "minutes",
        "interval": "1",
        "alignToClock": true,
        "generator": "internal",
        "x": 300,
        "y": 3560,
        "wires": [
            [
                "2cd79d6f.221a7a",
                "4b9b5b35.c322bc"
            ],
            []
        ]
    },
    {
        "id": "10840280.70f36e",
        "type": "e-mail",
        "z": "1173c82f.938c8",
        "server": "smtp.gmail.com",
        "port": "587",
        "secure": false,
        "tls": true,
        "name": "patrickscott76@hotmail.com",
        "dname": "Gmail Emailer",
        "x": 1840,
        "y": 1880,
        "wires": []
    },
    {
        "id": "2f92d3c932b12b3e",
        "type": "e-mail",
        "z": "1173c82f.938c8",
        "server": "smtp.gmail.com",
        "port": "587",
        "secure": false,
        "tls": true,
        "name": "patrickscott76@hotmail.com",
        "dname": "Gmail Emailer",
        "x": 1140,
        "y": 4740,
        "wires": []
    },
    {
        "id": "203da64c6c1b140b",
        "type": "e-mail",
        "z": "1173c82f.938c8",
        "server": "smtp.gmail.com",
        "port": "587",
        "secure": false,
        "tls": true,
        "name": "patrickscott76@hotmail.com",
        "dname": "Gmail Emailer",
        "x": 1900,
        "y": 2100,
        "wires": []
    },
    {
        "id": "b0328acfb963a7c6",
        "type": "e-mail",
        "z": "1173c82f.938c8",
        "server": "smtp.gmail.com",
        "port": "587",
        "secure": false,
        "tls": true,
        "name": "patrickscott76@hotmail.com",
        "dname": "Gmail Emailer",
        "x": 1660,
        "y": 620,
        "wires": []
    },
    {
        "id": "1cc2eb55d4a47ce0",
        "type": "e-mail",
        "z": "1173c82f.938c8",
        "server": "smtp.gmail.com",
        "port": "587",
        "secure": false,
        "tls": true,
        "name": "patrickscott76@hotmail.com",
        "dname": "Gmail Emailer",
        "x": 1920,
        "y": 1280,
        "wires": []
    },
    {
        "id": "9e3734307b38536f",
        "type": "e-mail",
        "z": "1173c82f.938c8",
        "server": "smtp.gmail.com",
        "port": "587",
        "secure": false,
        "tls": true,
        "name": "patrickscott76@hotmail.com",
        "dname": "Gmail Emailer",
        "x": 1940,
        "y": 1720,
        "wires": []
    },
    {
        "id": "42f58685c25aa5c9",
        "type": "e-mail",
        "z": "1173c82f.938c8",
        "d": true,
        "server": "smtp.gmail.com",
        "port": "587",
        "secure": false,
        "tls": true,
        "name": "patrickscott76@hotmail.com",
        "dname": "Gmail Emailer",
        "x": 1960,
        "y": 2920,
        "wires": []
    },
    {
        "id": "a35d8bd57a539060",
        "type": "or-gate",
        "z": "1173c82f.938c8",
        "name": "Test",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num",
                "propertyType": "msg",
                "property": "payload",
                "topic": "a"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num",
                "propertyType": "msg",
                "property": "payload",
                "topic": "b"
            }
        ],
        "outputTopic": "",
        "gateType": "or",
        "emitOnlyIfTrue": false,
        "x": 1410,
        "y": 2720,
        "wires": [
            [
                "8a8d712a6b948b92"
            ]
        ]
    },
    {
        "id": "937b4243.e99bd8",
        "type": "ping",
        "z": "1173c82f.938c8",
        "mode": "triggered",
        "name": "WiFi Router Ping check",
        "host": "192.168.88.1",
        "timer": "10",
        "inputs": 1,
        "x": 1070,
        "y": 4940,
        "wires": [
            []
        ]
    },
    {
        "id": "354e9be8749e4f24",
        "type": "ui_form",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "Form for entering userName and userPassword",
        "label": "",
        "group": "f5f7cada415a15e8",
        "order": 2,
        "width": 6,
        "height": 3,
        "options": [
            {
                "label": "Username",
                "value": "Username",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Password",
                "value": "Password",
                "type": "password",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "Username": "",
            "Password": ""
        },
        "payload": "",
        "submit": "LOGIN",
        "cancel": "",
        "topic": "",
        "x": 240,
        "y": 720,
        "wires": [
            [
                "74866f6d369b2859"
            ]
        ]
    },
    {
        "id": "14dd10224be70f56",
        "type": "debug",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 520,
        "wires": []
    },
    {
        "id": "75f8275b75b390a0",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "AuthLoginCredentials",
        "func": "const socketid = msg.socketid;\nconst socketip = msg.socketip;\nconst authSettings = global.get('authSettings');\nconst params = msg.params || {};\n\n\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n\n\n//clean up AuthLoginCredentials so it does not overflow.\n//Set length of AuthLoginCredentials object, \n//Rather how many supported users at a time from authSettings.muiLogin.maxSocketips\nvar AuthLoginCredentialsMaxLength = authSettings.muiLogin.maxSocketips;\n//get keys AuthLoginCredentials object \nvar AuthLoginCredentialsKeys = Object.keys(AuthLoginCredentials);\n//get length of AuthLoginCredentials object \nvar AuthLoginCredentialsLength = AuthLoginCredentialsKeys.length;\n//remove 2 items from Credentials if > AuthLoginCredentialsMaxLength\nif (AuthLoginCredentialsLength > AuthLoginCredentialsMaxLength)\n{   \n    delete AuthLoginCredentials[AuthLoginCredentialsKeys[0]];\n    delete AuthLoginCredentials[AuthLoginCredentialsKeys[1]];\n}\n\n\n\n//set AuthLoginCredentials to users accessing this page\nif (!AuthLoginCredentials[socketid])\n{\n    AuthLoginCredentials[socketid] = {};\n    AuthLoginCredentials[socketid]['ip'] = socketip;\n}\nelse\n{\n    AuthLoginCredentials[socketid]['ip'] = socketip;\n}\n\n\nglobal.set('AuthLoginCredentials', AuthLoginCredentials);\n\n//AuthLoginCredentials = global.get('AuthLoginCredentials');\n\n//msg.AuthLoginCredentials = AuthLoginCredentials;\n//msg.AuthLoginCredentialsKeys = AuthLoginCredentialsKeys;\n//msg.AuthLoginCredentialsMaxLength = AuthLoginCredentialsMaxLength;\n//msg.AuthLoginCredentialsLength = AuthLoginCredentialsLength;\n    \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1080,
        "y": 520,
        "wires": [
            [
                "14dd10224be70f56"
            ]
        ]
    },
    {
        "id": "7094444a259847bd",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "msg.name == Login [only track users that come to Login]",
        "property": "name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Login",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 450,
        "y": 520,
        "wires": [
            [
                "5f0016dd2bd479e7"
            ]
        ]
    },
    {
        "id": "5f0016dd2bd479e7",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "socketid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 520,
        "wires": [
            [
                "75f8275b75b390a0"
            ]
        ]
    },
    {
        "id": "869cbb4a197164b9",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "msg.payload == lost",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "lost",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 340,
        "y": 640,
        "wires": [
            [
                "c8302faadaa025d5"
            ]
        ]
    },
    {
        "id": "c8302faadaa025d5",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "socketid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 640,
        "wires": [
            [
                "28870a5e706ba7d5",
                "7ae8d485fcf8c77b"
            ]
        ]
    },
    {
        "id": "7ae8d485fcf8c77b",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "Remove Credentials",
        "func": "const socketid = msg.socketid;\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\nvar admingSelections = global.get('admingSelections')||{};\n//RemoveAuthLoginCredentials when user is lost\ndelete AuthLoginCredentials[socketid];\ndelete admingSelections[socketid];\n\n\nglobal.set('AuthLoginCredentials', AuthLoginCredentials);\nglobal.set('admingSelections', admingSelections);\n\n//AuthLoginCredentials = global.get('AuthLoginCredentials');\n//msg.AuthLoginCredentials = AuthLoginCredentials;\n\n    \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1080,
        "y": 640,
        "wires": [
            [
                "9f18e66e54f033a8"
            ]
        ]
    },
    {
        "id": "9f18e66e54f033a8",
        "type": "debug",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 640,
        "wires": []
    },
    {
        "id": "c461d9908e954e88",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "msg.payload == connect",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connect",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 350,
        "y": 560,
        "wires": [
            [
                "a96deb4a28f47198"
            ]
        ]
    },
    {
        "id": "a96deb4a28f47198",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "socketid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 560,
        "wires": [
            [
                "271b423aa75c177d",
                "93a0cc64b722e4ed"
            ]
        ]
    },
    {
        "id": "271b423aa75c177d",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 600,
        "wires": [
            [
                "558fe1f99567a0cb"
            ]
        ]
    },
    {
        "id": "558fe1f99567a0cb",
        "type": "moment",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 780,
        "y": 600,
        "wires": [
            [
                "097d886403fd9f53"
            ]
        ]
    },
    {
        "id": "097d886403fd9f53",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "MUI LOG [connect]",
        "func": "const socketid = msg.socketid;\nconst socketip = msg.socketip;\nconst humanTimestamp = msg.humanTimestamp;\nconst conectionType = msg.payload;\nconst newLineInLog = conectionType + ' | ' + humanTimestamp + ` | IP - ` + socketip + ` | socket - ` + socketid;\nconst authSettings = global.get('authSettings')||{};\n\n//Get muiLog else create it\nvar muiLog = global.get('muiLog')||[];\n\n//clean up muiLog so it does not overflow.\n//Set length of muiLog array, \nvar muiLogMaxLength = authSettings.muiLog.maxmuiLogLength;\n//get length of muiLog array \nvar muiLogLength = muiLog.length;\n//remove 2 items from muiLog if > muiLogMaxLength\nif (muiLogLength > muiLogMaxLength) {   \n    muiLog.splice(muiLogLength - 2, 2);\n}\n\n\n\n\n\n\n//add new log item to the top of the array\nmuiLog.unshift(newLineInLog);\n\n\nglobal.set('muiLog', muiLog);\n//muiLog = global.get('muiLog');\n//msg.muiLog = muiLog;\n\n    \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1090,
        "y": 600,
        "wires": [
            [
                "863c36637546224e"
            ]
        ]
    },
    {
        "id": "863c36637546224e",
        "type": "debug",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 600,
        "wires": []
    },
    {
        "id": "28870a5e706ba7d5",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 680,
        "wires": [
            [
                "27b084eefd4ea2e7"
            ]
        ]
    },
    {
        "id": "27b084eefd4ea2e7",
        "type": "moment",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 780,
        "y": 680,
        "wires": [
            [
                "61dcc23944b0b91b"
            ]
        ]
    },
    {
        "id": "61dcc23944b0b91b",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "MUI LOG [lost]",
        "func": "const socketid = msg.socketid;\nconst socketip = msg.socketip;\nconst humanTimestamp = msg.humanTimestamp;\nconst conectionType = msg.payload;\nconst newLineInLog = conectionType + ' | ' + humanTimestamp + ` | IP - ` + socketip + ` | socket - ` + socketid;\nconst authSettings = global.get('authSettings')||{};\n\n\n//Get muiLog else create it\nvar muiLog = global.get('muiLog')||[];\n\n//clean up muiLog so it does not overflow.\n//Set length of muiLog array, \nvar muiLogMaxLength = authSettings.muiLog.maxmuiLogLength;\n//get length of muiLog array \nvar muiLogLength = muiLog.length;\n//remove 2 items from muiLog if > muiLogMaxLength\nif (muiLogLength > muiLogMaxLength) {   \n    muiLog.splice(muiLogLength - 2, 2);\n}\n\n\n//add new log item to the top of the array\nmuiLog.unshift(newLineInLog);\n\n\nglobal.set('muiLog', muiLog);\n//muiLog = global.get('muiLog');\n//msg.muiLog = muiLog;\n\n    \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1100,
        "y": 680,
        "wires": [
            [
                "c0978612e7d9d270"
            ]
        ]
    },
    {
        "id": "c0978612e7d9d270",
        "type": "debug",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 680,
        "wires": []
    },
    {
        "id": "d61cab465b467c51",
        "type": "ui_ui_control",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "",
        "events": "change",
        "x": 120,
        "y": 520,
        "wires": [
            [
                "7094444a259847bd"
            ]
        ]
    },
    {
        "id": "52e912764a143fa3",
        "type": "ui_ui_control",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "",
        "events": "all",
        "x": 120,
        "y": 600,
        "wires": [
            [
                "c461d9908e954e88",
                "869cbb4a197164b9"
            ]
        ]
    },
    {
        "id": "3dea5460a367d469",
        "type": "debug",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 720,
        "wires": []
    },
    {
        "id": "74866f6d369b2859",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "add userName and userPassword to AuthLoginCredentials",
        "func": "const socketid = msg.socketid;\nconst userName = msg.payload.Username;\nconst userPassword = msg.payload.Password;\nvar error = false;\nvar errorMsg;\n\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n\n\n\n//add userName and userPassword to AuthLoginCredentials.socketid\nif (AuthLoginCredentials[socketid])\n{\n    AuthLoginCredentials[socketid]['userName'] = userName;\n    AuthLoginCredentials[socketid]['userPassword'] = userPassword;\n}\nelse\n{\n    error = true;\n    errorMsg = 'socketid:' + socketid + ' not found in AuthLoginCredentials, User sat idle too long or too many users are trying to login.'\n}\n\nglobal.set('AuthLoginCredentials', AuthLoginCredentials);\n\n//AuthLoginCredentials = global.get('AuthLoginCredentials');\n\n//msg.AuthLoginCredentials = AuthLoginCredentials;\nmsg.error = error;\nmsg.errorMsg = errorMsg;\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 720,
        "wires": [
            [
                "3dea5460a367d469",
                "8d7c21aac1ac35d8"
            ]
        ]
    },
    {
        "id": "5cc2fdf2897b26dc",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "Is AuthLoginCredentials user in authUsers Object",
        "func": "const socketid = msg.socketid;\nconst AuthLoginCredentials = global.get('AuthLoginCredentials');\nconst authUsers = global.get('authUsers');\nconst userName = AuthLoginCredentials[socketid].userName;\nvar userNameCheck = false;\n\n\n//check that userName is in authUsers\nif (authUsers.hasOwnProperty(userName) ) {\nuserNameCheck = true;\n}\n\nmsg.userName = userName;\nmsg.userNameCheck = userNameCheck;\n\n\n\n    \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 800,
        "wires": [
            [
                "d706ba1578fc16dc"
            ]
        ]
    },
    {
        "id": "8d7c21aac1ac35d8",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 150,
        "y": 760,
        "wires": [
            [
                "74a05dd3287f5461"
            ]
        ]
    },
    {
        "id": "d2cd75a10911659d",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "userPassword and authUsers Hash",
        "func": "const socketid = msg.socketid;\nconst AuthLoginCredentials = global.get('AuthLoginCredentials');\nconst authUsers = global.get('authUsers');\n\nmsg.authUsersPasswordHash = authUsers[AuthLoginCredentials[socketid].userName].password;\nmsg.AuthLoginCredentialsPassword = AuthLoginCredentials[socketid].userPassword;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 200,
        "y": 880,
        "wires": [
            [
                "b02f44c09d1f94db"
            ]
        ]
    },
    {
        "id": "d706ba1578fc16dc",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "userNameCheck false/true",
        "property": "userNameCheck",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 180,
        "y": 840,
        "wires": [
            [
                "091d706ba3ffcc13"
            ],
            [
                "d2cd75a10911659d"
            ]
        ]
    },
    {
        "id": "b02f44c09d1f94db",
        "type": "twin-bcrypt",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "",
        "action": "verify",
        "field": "AuthLoginCredentialsPassword",
        "hash": "authUsersPasswordHash",
        "rounds": "4",
        "x": 130,
        "y": 920,
        "wires": [
            [
                "e90ea0a2953fe107"
            ]
        ]
    },
    {
        "id": "e90ea0a2953fe107",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "userPasswordCheck false/true",
        "property": "match",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 960,
        "wires": [
            [
                "091d706ba3ffcc13"
            ],
            [
                "821a5a31c2c81ffb"
            ]
        ]
    },
    {
        "id": "091d706ba3ffcc13",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "Failed Login counter & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst AuthLoginCredentials = global.get('AuthLoginCredentials');\nconst socketip = AuthLoginCredentials[socketid]['ip'];\nconst userName = msg.userName;\nconst userNameCheck = msg.userNameCheck;\nconst userPasswordCheck = msg.match;\nconst humanTimestamp = msg.humanTimestamp;\n\n//Get MUIlOG else create it\nvar muiLog = global.get('muiLog')||[];\n\n//clean up muiLog so it does not overflow.\n//Set length of muiLog array, \nvar muiLogMaxLength = authSettings.muiLog.maxmuiLogLength;\n//get length of muiLog array \nvar muiLogLength = muiLog.length;\n//remove 2 items from muiLog if > muiLogMaxLength\nif (muiLogLength > muiLogMaxLength) {   \n    muiLog.splice(muiLogLength - 2, 2);\n}\n\n//Get failedLoginTimmer else create it\nvar failedLoginTimmer = global.get('failedLoginTimmer')||{};\n\n\n//Check if userName exzists and is found\nif (userNameCheck === false)\n{\n    var newLineInLog = 'Relative URL: /ui/#!/1 | ' + humanTimestamp + ` | IP - ` + socketip + ` | ` + `Login FAIL - Incorrect Name: ` + userName + ` | socket - ` + socketid;\n    //add new log item to the top of the array\n    muiLog.unshift(newLineInLog);\n    \n    if (!failedLoginTimmer[socketip])\n    {\n        failedLoginTimmer[socketip] = {};\n        failedLoginTimmer[socketip]['socketid'] = socketid;\n        failedLoginTimmer[socketip]['userNameCheck'] = userNameCheck;\n        failedLoginTimmer[socketip]['userName'] = userName;\n        failedLoginTimmer[socketip]['failedattempts'] = 1;\n        \n    }\n    else\n    {\n        failedLoginTimmer[socketip]['socketid'] = socketid;\n        failedLoginTimmer[socketip]['userNameCheck'] = userNameCheck;\n        failedLoginTimmer[socketip]['userName'] = userName;\n        failedLoginTimmer[socketip]['failedattempts'] = failedLoginTimmer[socketip]['failedattempts'] + 1;\n    }\n}\nelse if (userPasswordCheck === false)\n{\n    newLineInLog = 'Relative URL: /ui/#!/1 | ' + humanTimestamp + ` | IP - ` + socketip + ` | ` + `Login FAIL - Incorrect Password | socket - ` + socketid;\n    //add new log item to the top of the array\n    muiLog.unshift(newLineInLog);\n    \n    if (!failedLoginTimmer[socketip])\n    {\n        failedLoginTimmer[socketip] = {};\n        failedLoginTimmer[socketip]['socketid'] = socketid;\n        failedLoginTimmer[socketip]['userNameCheck'] = userNameCheck;\n        failedLoginTimmer[socketip]['userName'] = userName;\n        failedLoginTimmer[socketip]['userPasswordCheck'] = userPasswordCheck;\n        failedLoginTimmer[socketip]['failedattempts'] = 1;\n        \n    }\n    else\n    {\n        failedLoginTimmer[socketip]['socketid'] = socketid;\n        failedLoginTimmer[socketip]['userNameCheck'] = userNameCheck;\n        failedLoginTimmer[socketip]['userName'] = userName;\n        failedLoginTimmer[socketip]['userPasswordCheck'] = userPasswordCheck;\n        failedLoginTimmer[socketip]['failedattempts'] = failedLoginTimmer[socketip]['failedattempts'] + 1;\n    }\n}\n\n\n\nglobal.set('muiLog', muiLog);\n\n//muiLog = global.get('muiLog');\n//msg.muiLog = muiLog;\n\nglobal.set('failedLoginTimmer', failedLoginTimmer);\n\nfailedLoginTimmer = global.get('failedLoginTimmer');\nvar failedattempts = failedLoginTimmer[socketip]['failedattempts'];\n\nmsg.failedLoginTimmer = failedLoginTimmer;\nmsg.failedattempts = failedattempts\n    \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 610,
        "y": 840,
        "wires": [
            [
                "3dda8babeb581f79"
            ]
        ]
    },
    {
        "id": "74a05dd3287f5461",
        "type": "moment",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 360,
        "y": 760,
        "wires": [
            [
                "687e74e198486585"
            ]
        ]
    },
    {
        "id": "687e74e198486585",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "Failed Login Delay",
        "func": "const socketid = msg.socketid;\nconst AuthLoginCredentials = global.get('AuthLoginCredentials');\nconst socketip = AuthLoginCredentials[socketid]['ip']||'0.0.0.0';\n\n//Get failedLoginTimmer else create it\nvar failedLoginTimmer = global.get('failedLoginTimmer')||{};\n\n\n//clean up failedLoginTimmer so it does not overflow.\n//rather how many ip's to store at any given time\nvar failedLoginTimmerMaxLength = 31557600;\n//get keys failedLoginTimmer object \nvar failedLoginTimmerKeys = Object.keys(failedLoginTimmer);\n//get length of failedLoginTimmer object \nvar failedLoginTimmerLength = failedLoginTimmerKeys.length;\n//remove 2 items from failedLoginTimmer if > failedLoginTimmerMaxLength\nif (failedLoginTimmerLength > failedLoginTimmerMaxLength)\n{   \n    delete failedLoginTimmer[failedLoginTimmerKeys[0]];\n    delete failedLoginTimmer[failedLoginTimmerKeys[1]];\n}\n\n//check if ip has been added to timmer\nif (!failedLoginTimmer[socketip])\n{\n    msg.delay = 1000;\n    //msg.rate = 1000;\n    msg.failedattempts = 1;\n    return msg;\n}\nelse\n{\n    msg.delay = failedLoginTimmer[socketip]['failedattempts'] * 1000;\n    //msg.rate = failedLoginTimmer[socketip]['failedattempts'] * 1000;\n    msg.failedattempts = failedLoginTimmer[socketip]['failedattempts'];\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 650,
        "y": 760,
        "wires": [
            [
                "0e3983836a11b937",
                "eadaabbe660be926"
            ]
        ]
    },
    {
        "id": "0e3983836a11b937",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "socketid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 130,
        "y": 800,
        "wires": [
            [
                "fdf676b095f1b428"
            ]
        ]
    },
    {
        "id": "e9ab5ad42ee003e6",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "LOGIN FAILURE warning",
        "func": "\nmsg.topic = `LOGIN FAILURE`;\nmsg.payload = `Username or Password Incorrect`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1070,
        "y": 880,
        "wires": [
            [
                "b45d371caa47e88d"
            ]
        ]
    },
    {
        "id": "3dda8babeb581f79",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "failedattempts < 5, else",
        "property": "failedattempts",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lte",
                "v": "5",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 630,
        "y": 880,
        "wires": [
            [
                "e9ab5ad42ee003e6"
            ],
            [
                "310b1fe135c3e717"
            ]
        ]
    },
    {
        "id": "310b1fe135c3e717",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "LOGIN FAILURE warning",
        "func": "\nmsg.topic = `LOGIN FAILURE`;\nmsg.payload = `Username or Password Incorrect`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 630,
        "y": 920,
        "wires": [
            [
                "1110d905eb2eccfb"
            ]
        ]
    },
    {
        "id": "821a5a31c2c81ffb",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "Login Success: MUI LOG",
        "func": "const socketid = msg.socketid;\nvar AuthLoginCredentials = global.get('AuthLoginCredentials');\nconst socketip = AuthLoginCredentials[socketid]['ip'];\nconst userName = msg.userName;\nconst humanTimestamp = msg.humanTimestamp;\nconst authUsers = global.get('authUsers');\nconst authSettings = global.get('authSettings');\n\n//Get MUIlOG else create it\nvar muiLog = global.get('muiLog')||[];\n\n//clean up muiLog so it does not overflow.\n//Set length of muiLog array, \nvar muiLogMaxLength = authSettings.muiLog.maxmuiLogLength;\n//get length of muiLog array \nvar muiLogLength = muiLog.length;\n//remove 2 items from muiLog if > muiLogMaxLength\nif (muiLogLength > muiLogMaxLength) {   \n    muiLog.splice(muiLogLength - 2, 2);\n}\n\n//Get failedLoginTimmer else create it\nvar failedLoginTimmer = global.get('failedLoginTimmer')||{};\n\n//check that userName is in authUsers\nif (failedLoginTimmer.hasOwnProperty(socketip) ) {\n    delete failedLoginTimmer[socketip];\n    //failedLoginTimmer[socketip]['failedattempts'] = 1;\n}\nglobal.set('failedLoginTimmer', failedLoginTimmer);\n\nvar newLineInLog = 'Relative URL: /ui/#!/1 | ' + humanTimestamp + ` | IP - ` + socketip + ` | User: ` + userName + ` Loged-In | socket - ` + socketid;\n//add new log item to the top of the array\nmuiLog.unshift(newLineInLog);\n\nglobal.set('muiLog', muiLog);\n\n\nvar email = authUsers[userName].email;\nvar role = authUsers[userName].role;\nvar firstname = authUsers[userName].firstname;\nvar lastname = authUsers[userName].lastname;\nvar info = authUsers[userName].info;\n\n\n//add user as loggedin to AuthLoginCredentials\nAuthLoginCredentials[socketid]['email'] = email;\nAuthLoginCredentials[socketid]['role'] = role;\nAuthLoginCredentials[socketid]['firstname'] = firstname;\nAuthLoginCredentials[socketid]['lastname'] = lastname;\nAuthLoginCredentials[socketid]['info'] = info;\nAuthLoginCredentials[socketid]['loggedin'] = true;\n\nglobal.set('AuthLoginCredentials', AuthLoginCredentials);\nAuthLoginCredentials = global.get('AuthLoginCredentials');\nmsg.AuthLoginCredentials = AuthLoginCredentials;\n\n//get ourl (original url before being sent to login page)\n//msg.ourl = AuthLoginCredentials[socketid].ourl\nreturn msg;\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 630,
        "y": 960,
        "wires": [
            [
                "92ba9bc98d31c0d9"
            ]
        ]
    },
    {
        "id": "fdf676b095f1b428",
        "type": "trigger",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "1",
        "extend": true,
        "overrideDelay": true,
        "units": "s",
        "reset": "",
        "bytopic": "topic",
        "topic": "topic",
        "outputs": 1,
        "x": 280,
        "y": 800,
        "wires": [
            [
                "5cc2fdf2897b26dc"
            ]
        ]
    },
    {
        "id": "fe602a0b4c39f061",
        "type": "ui_button",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "I forgot my Username or Password",
        "group": "f5f7cada415a15e8",
        "order": 3,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "<font size=\"-6\">I forgot my Username or Password</font>",
        "tooltip": "",
        "color": "#0094CE",
        "bgcolor": "white",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "x": 200,
        "y": 1040,
        "wires": [
            [
                "879cce7895ddbf69"
            ]
        ]
    },
    {
        "id": "216cf569bca96428",
        "type": "ui_button",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "Create a new account",
        "group": "f5f7cada415a15e8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "<font size=\"-6\">Create a new account</font>",
        "tooltip": "",
        "color": "#0094CE",
        "bgcolor": "white",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "x": 160,
        "y": 1000,
        "wires": [
            [
                "b350266c23f5f45f"
            ]
        ]
    },
    {
        "id": "b45d371caa47e88d",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1290,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "eaf9592bd002aada",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "Send User to AccountRecovery",
        "func": "msg.timeout = 2;\nmsg.topic = ``;\nmsg.url = '/ui/#!/3?socketid='+msg.socketid;\nmsg.payload = '<!DOCTYPE html><html><head><title>AccountRecovery</title></head><body>AccountRecovery<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1050,
        "y": 920,
        "wires": [
            [
                "80666941f7fa4210"
            ]
        ]
    },
    {
        "id": "4ce573d7e01f66c7",
        "type": "comment",
        "z": "c41dabcb5f7e3c2a",
        "g": "12a71c68e037171b",
        "name": "Unless replaceing Home Tab @ numeric index 0. Place all new Tabs below Account Tab with a numeric index of 6 or greater",
        "info": "",
        "x": 450,
        "y": 200,
        "wires": []
    },
    {
        "id": "89fe7f674849bf86",
        "type": "comment",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "Login Tab 1",
        "info": "",
        "x": 110,
        "y": 480,
        "wires": []
    },
    {
        "id": "1110d905eb2eccfb",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 830,
        "y": 920,
        "wires": [
            [
                "eaf9592bd002aada"
            ]
        ]
    },
    {
        "id": "80666941f7fa4210",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 920,
        "wires": []
    },
    {
        "id": "a8bfedcf5085177c",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 760,
        "wires": []
    },
    {
        "id": "eadaabbe660be926",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "Login msg & set timeout ",
        "func": "msg.timeout = msg.failedattempts;\nmsg.topic = '';\nmsg.payload = 'Logging In';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1070,
        "y": 760,
        "wires": [
            [
                "a8bfedcf5085177c"
            ]
        ]
    },
    {
        "id": "34b1be91079d305f",
        "type": "comment",
        "z": "c41dabcb5f7e3c2a",
        "g": "8feac48172d8bf79",
        "name": "Automation Tab 6",
        "info": "",
        "x": 140,
        "y": 3440,
        "wires": []
    },
    {
        "id": "aa32a20089ea273f",
        "type": "ui_ui_control",
        "z": "c41dabcb5f7e3c2a",
        "g": "8feac48172d8bf79",
        "name": "",
        "events": "change",
        "x": 140,
        "y": 3520,
        "wires": [
            [
                "3e48a0f47ff4601d"
            ]
        ]
    },
    {
        "id": "3e48a0f47ff4601d",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "8feac48172d8bf79",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "socketid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 3520,
        "wires": [
            [
                "4ccec825f7a3f61c"
            ]
        ]
    },
    {
        "id": "4ccec825f7a3f61c",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "8feac48172d8bf79",
        "name": "Change tab #",
        "property": "tab",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "6",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 460,
        "y": 3520,
        "wires": [
            [
                "6daa024591cbcdf3"
            ]
        ]
    },
    {
        "id": "d7dc45d9eaaa5bbd",
        "type": "comment",
        "z": "c41dabcb5f7e3c2a",
        "g": "8feac48172d8bf79",
        "name": " ▼Tab # here▼",
        "info": "",
        "x": 460,
        "y": 3480,
        "wires": []
    },
    {
        "id": "e55de2ea8fe1b808",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "8feac48172d8bf79",
        "name": "MUI LOG [connect]",
        "func": "const socketid = msg.socketid;\nconst socketip = msg.socketip;\nconst humanTimestamp = msg.humanTimestamp;\nconst error = msg.error;\nconst tab = msg.tab.toString();\nconst newLineInLog = 'Relative URL: /ui/#!/' + tab +' | ' + humanTimestamp + ` | IP - ` + socketip + ` | ` + error + ` | socket - ` + socketid;\n\n\n//Get muiLog else create it\nvar muiLog = global.get('muiLog')||[];\n\n\n//clean up muiLog so it does not overflow.\n//get length of muiLog array \nvar muiLogLength = muiLog.length;\n//remove 2 items from muiLog if > 1000\nif (muiLogLength > 1000)\n{   \n    muiLog.splice(muiLogLength - 2, 2);\n}\n\n\n\n//add new log item to the top of the array\nmuiLog.unshift(newLineInLog);\n\n\nglobal.set('muiLog', muiLog);\n\nmuiLog = global.get('muiLog');\n\nmsg.muiLog = muiLog;\n\n    \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 3560,
        "wires": [
            [
                "ccaec00ec1cfac37"
            ]
        ]
    },
    {
        "id": "47b0ca4d392b4a3d",
        "type": "comment",
        "z": "c41dabcb5f7e3c2a",
        "g": "8feac48172d8bf79",
        "name": "User Passed checks Do stuff",
        "info": "",
        "x": 200,
        "y": 3600,
        "wires": []
    },
    {
        "id": "ccaec00ec1cfac37",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "8feac48172d8bf79",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\nconst tab = msg.tab.toString();\nconst pageURL = '/ui/#!/' + tab;\n\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//set AuthLoginCredentials to users accessing this page\nif (!AuthLoginCredentials[socketid])\n{\n    AuthLoginCredentials[socketid] = {};\n    AuthLoginCredentials[socketid]['fromURL'] = pageURL;\n}\nelse\n{\n    AuthLoginCredentials[socketid]['fromURL'] = pageURL;\n}\nglobal.set('AuthLoginCredentials', AuthLoginCredentials);\nAuthLoginCredentials = global.get('AuthLoginCredentials');\nmsg.AuthLoginCredentials = AuthLoginCredentials;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to login page\nmsg.url = '/ui/#!/1?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Login</title></head><body>Login<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 3560,
        "wires": [
            [
                "7fd0b0c43664e4bd"
            ]
        ]
    },
    {
        "id": "7fd0b0c43664e4bd",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "8feac48172d8bf79",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1080,
        "y": 3560,
        "wires": []
    },
    {
        "id": "6daa024591cbcdf3",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "8feac48172d8bf79",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 3520,
        "wires": [
            [
                "2b69418f5360dbb9"
            ]
        ]
    },
    {
        "id": "2b69418f5360dbb9",
        "type": "moment",
        "z": "c41dabcb5f7e3c2a",
        "g": "8feac48172d8bf79",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 860,
        "y": 3520,
        "wires": [
            [
                "2eace958102fb3f5"
            ]
        ]
    },
    {
        "id": "92ba9bc98d31c0d9",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\nvar destURL = '/ui/#!/0?socketid='+socketid;\n\n//Get AuthLoginCredentials\nconst AuthLoginCredentials = global.get('AuthLoginCredentials');\n//check that fromURL is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('fromURL')) {\n    //destURL = fromURL+'?socketid='+socketid;\n    destURL = AuthLoginCredentials[socketid].fromURL + '?socketid='+socketid;\n    }\n}\n\nmsg.timeout = 2;\nmsg.topic = ``;\n\nmsg.url = destURL;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Login</title></head><body>Login<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1030,
        "y": 960,
        "wires": [
            [
                "a15bfb0844e0a3e9"
            ]
        ]
    },
    {
        "id": "a15bfb0844e0a3e9",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 960,
        "wires": []
    },
    {
        "id": "2eace958102fb3f5",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "8feac48172d8bf79",
        "name": "Is user logged in?",
        "func": "const socketid = msg.socketid;\nconst socketip = msg.socketip;\n//Get AuthLoginCredentials else create it\nconst AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\nvar isuerloggedin = false;\nvar error = 'User not logged in';\n\n\n//check that loggedin is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].loggedin === true) {\n        isuerloggedin = true;\n        //get user information from AuthLoginCredentials\n        var ip = AuthLoginCredentials[socketid].ip;\n        var userName = AuthLoginCredentials[socketid].userName;\n        var email = AuthLoginCredentials[socketid].email;\n        var role = AuthLoginCredentials[socketid].role;\n        var firstname = AuthLoginCredentials[socketid].firstname;\n        var lastname = AuthLoginCredentials[socketid].lastname;\n        var info = AuthLoginCredentials[socketid].info;\n        //if the ip that the user logged in with\n        //that is tied to the socketid of that login\n        //is diffrent then the ip used to get to this page\n        //kick the record and send user back to login page\n        if(ip !== socketip) {\n            delete AuthLoginCredentials[socketid];\n            error = 'socketip: '+socketip+' !== to Login ip: '+ip;\n            msg.error = error;\n            isuerloggedin = false;\n            msg.isuerloggedin = isuerloggedin;\n            return msg;\n        }\n        else {\n            msg.error = false;\n            msg.isuerloggedin = isuerloggedin;\n            return msg;\n        }\n    }\n    else {\n        msg.error = error;\n        msg.isuerloggedin = isuerloggedin;\n        return msg;\n    }\n}\nelse {\n    msg.error = error;\n    msg.isuerloggedin = isuerloggedin;\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1070,
        "y": 3520,
        "wires": [
            [
                "3fe2a5bb32b4697e"
            ]
        ]
    },
    {
        "id": "3fe2a5bb32b4697e",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "8feac48172d8bf79",
        "name": "1[not logged in] 2[logged in]",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 200,
        "y": 3560,
        "wires": [
            [
                "e55de2ea8fe1b808"
            ],
            [
                "c079520fb02e505a"
            ]
        ]
    },
    {
        "id": "b350266c23f5f45f",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to Create new account page\nmsg.url = '/ui/#!/2?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>New Account</title></head><body>New Account<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 1000,
        "wires": [
            [
                "0277abefce2b7304"
            ]
        ]
    },
    {
        "id": "0277abefce2b7304",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 1000,
        "wires": []
    },
    {
        "id": "879cce7895ddbf69",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to Account Recovery page\nmsg.url = '/ui/#!/3?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Account Recovery</title></head><body>Account Recovery<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 1040,
        "wires": [
            [
                "8cc5f2448c72e199"
            ]
        ]
    },
    {
        "id": "8cc5f2448c72e199",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 1040,
        "wires": []
    },
    {
        "id": "2a074ed40e1da8af",
        "type": "comment",
        "z": "c41dabcb5f7e3c2a",
        "g": "3263de3e0f898f10",
        "name": "New Account Tab 2",
        "info": "",
        "x": 130,
        "y": 1140,
        "wires": []
    },
    {
        "id": "faec0750d4ceacc3",
        "type": "ui_form",
        "z": "c41dabcb5f7e3c2a",
        "g": "3263de3e0f898f10",
        "name": "New Account",
        "label": "",
        "group": "62b44eba9c39b679",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "userName",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "userPassword",
                "type": "password",
                "required": true,
                "rows": null
            },
            {
                "label": "Confirm Password",
                "value": "confirmPassword",
                "type": "password",
                "required": true,
                "rows": null
            },
            {
                "label": "email",
                "value": "userEmail",
                "type": "email",
                "required": true,
                "rows": null
            },
            {
                "label": "First Name",
                "value": "firstName",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Last Name",
                "value": "lastName",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Department, Job role or Title",
                "value": "info",
                "type": "text",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "userName": "",
            "userPassword": "",
            "confirmPassword": "",
            "userEmail": "",
            "firstName": "",
            "lastName": "",
            "info": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "",
        "topic": "topic",
        "x": 130,
        "y": 1180,
        "wires": [
            [
                "582dddc2d9a160d0"
            ]
        ]
    },
    {
        "id": "582dddc2d9a160d0",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "3263de3e0f898f10",
        "name": "Submition Checks",
        "func": "const userSubmition = msg.payload;\nconst socketid = msg.socketid;\nconst authUsers = global.get('authUsers');\nconst userName = msg.payload.userName;\nconst userPassword = msg.payload.userPassword;\nconst confirmPassword = msg.payload.confirmPassword;\nconst userEmail = msg.payload.userEmail;\nconst firstName = msg.payload.firstName;\nconst lastName = msg.payload.lastName;\nconst info = msg.payload.info;\nconst authSettings = global.get('authSettings');\n\n// Password Regex pattern checker\nconst containsNchar = new RegExp('(?=.{'+authSettings.passReq.mustContainMinCharOf+',})');\nconst containsOneUppercase = new RegExp('(?=.*[A-Z])');\nconst containsOneLowercase = new RegExp('(?=.*[a-z])');\nconst containsOneNumber = new RegExp('(?=.*[0-9])');\nconst containsOneSpecialChar = new RegExp('(?=.*[@$!%*?&])');\n\nvar authUsersEmailsArray = [];\n\n\n//creat an arry of allready used emails\n//get all keys(usernames) from the authUsers object first\nconst authUsersKeys = Object.keys(authUsers);\nauthUsersKeys.forEach(function(eachUserName) {\n    let eachEmail = authUsers[eachUserName].email;\n    authUsersEmailsArray.push(eachEmail);\n});\n\n\n//check that userName is not allready taken by another user in authUsers\nif (authUsers.hasOwnProperty(userName) ) {\n    msg.error = true;\n    msg.topic = 'Username already in use';\n    msg.payload = 'Please Choose another Username';\n    msg.userSubmition = userSubmition;\n    return msg;\n}\nif (userPassword !== confirmPassword) {\n    msg.error = true;\n    msg.topic = 'Passwords do not match';\n    msg.payload = 'Please enter matching Passwords';\n    msg.userSubmition = userSubmition;\n    return msg;\n}\nif (!containsNchar.test(userPassword)) {\n    msg.error = true;\n    msg.topic = 'Password too short';\n    msg.payload = 'Must be longer than '+ authSettings.passReq.mustContainMinCharOf.toString() +' characters';\n    return msg;\n}\nif (authSettings.passReq.mustContainMinOneUppercase) {\n    if (!containsOneUppercase.test(userPassword)) {\n        msg.error = true;\n        msg.topic = 'Password lacks uppercase character';\n        msg.payload = 'Must contain at least one upper uppercase character. Like ABCDEFG';\n        return msg;\n    }\n    \n}\nif (authSettings.passReq.mustContainMinOneLowercase) {\n    if (!containsOneLowercase.test(userPassword)) {\n        msg.error = true;\n        msg.topic = 'Password lacks lowercase character';\n        msg.payload = 'Must contain at least one lowercase character. Like abcdefg';\n        return msg;\n    }\n}\nif (authSettings.passReq.mustContainMinOneNumber) {\n    if (!containsOneNumber.test(userPassword)) {\n        msg.error = true;\n        msg.topic = 'Password lacks a number';\n        msg.payload = 'Must contain at least one number. Like 1234567';\n        return msg;\n    }\n}\nif (authSettings.passReq.mustContainMinOneSpecialChar) {\n    if (!containsOneSpecialChar.test(userPassword)) {\n        msg.error = true;\n        msg.topic = 'Password lacks a special character';\n        msg.payload = 'Must contain at least one of these special characters. @$!%*?&';\n        return msg;\n    }\n}\nif (authUsersEmailsArray.includes(userEmail)) {\n    msg.error = true;\n    msg.topic = 'Email already in use';\n    msg.payload = 'Please recover account';\n    msg.userSubmition = userSubmition;\n    return msg;\n}\nif (true) {\n    msg.timeout = 3;\n    msg.error = false;\n    msg.topic = 'New Account Request';\n    msg.payload = 'Submitted';\n    msg.userSubmition = userSubmition;\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 310,
        "y": 1180,
        "wires": [
            [
                "8d66c08d7bc840ff"
            ]
        ]
    },
    {
        "id": "8d66c08d7bc840ff",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "3263de3e0f898f10",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 1180,
        "wires": [
            [
                "caacbc9d37bac05a"
            ],
            [
                "33e1dbafaad6a8e9"
            ]
        ]
    },
    {
        "id": "caacbc9d37bac05a",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "3263de3e0f898f10",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 650,
        "y": 1180,
        "wires": [
            [
                "57fedb6b789ac4e6"
            ]
        ]
    },
    {
        "id": "57fedb6b789ac4e6",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "3263de3e0f898f10",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "Email",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 790,
        "y": 1180,
        "wires": [
            [
                "237ce4ad84d7b8a1"
            ]
        ]
    },
    {
        "id": "2de34d262a466b53",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "3263de3e0f898f10",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 1180,
        "wires": []
    },
    {
        "id": "237ce4ad84d7b8a1",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "3263de3e0f898f10",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to Account Recovery page\nmsg.url = '/ui/#!/3?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Account Recovery</title></head><body>Account Recovery<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1030,
        "y": 1180,
        "wires": [
            [
                "2de34d262a466b53"
            ]
        ]
    },
    {
        "id": "c079520fb02e505a",
        "type": "debug",
        "z": "c41dabcb5f7e3c2a",
        "g": "8feac48172d8bf79",
        "name": "USER SUCCESS | logged in | trigger stuff on the page etc",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 3640,
        "wires": []
    },
    {
        "id": "4c230c7d11b5b868",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "3263de3e0f898f10",
        "name": "newUesrRequests & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst userSubmition = msg.userSubmition;\nconst authSettings = global.get('authSettings');\nconst humanTimestamp = msg.humanTimestamp;\nvar muiLog = global.get('muiLog')||[];\n\n//clean up muiLog so it does not overflow.\n//Set length of muiLog array, \nvar muiLogMaxLength = authSettings.muiLog.maxmuiLogLength;\n//get length of muiLog array \nvar muiLogLength = muiLog.length;\n//remove 2 items from muiLog if > muiLogMaxLength\nif (muiLogLength > muiLogMaxLength) {   \n    muiLog.splice(muiLogLength - 2, 2);\n}\n\n//get socketip first. If user does not have one send them back to login page as they direct linked in here\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n    \n        //Get newUesrRequests else create it\n        var newUesrRequests = global.get('newUesrRequests')||{};\n        \n        //clean up newUesrRequests so it does not overflow.\n        //Set max length of newUesrRequests object, \n        var newUesrRequestsMaxLength = authSettings.newUesrs.newUesrRequestsMaxPending;\n        //get keys newUesrRequests object \n        var newUesrRequestsKeys = Object.keys(newUesrRequests);\n        //get length of newUesrRequests object \n        var newUesrRequestsLength = newUesrRequestsKeys.length;\n        //remove 2 items from newUesrRequests if > newUesrRequestsMaxLength\n        if (newUesrRequestsLength > newUesrRequestsMaxLength)\n        {   \n            delete newUesrRequests[newUesrRequestsKeys[0]];\n            delete newUesrRequests[newUesrRequestsKeys[1]];\n        }\n        \n        //set newUesrRequests to values submitted in form\n        if (!newUesrRequests[userSubmition.userName])\n        {\n            newUesrRequests[userSubmition.userName] = {};\n            newUesrRequests[userSubmition.userName]['userPassword'] = userSubmition.userPassword;\n            newUesrRequests[userSubmition.userName]['userEmail'] = userSubmition.userEmail;\n            newUesrRequests[userSubmition.userName]['userRole'] = 'user';\n            newUesrRequests[userSubmition.userName]['firstName'] = userSubmition.firstName;\n            newUesrRequests[userSubmition.userName]['lastName'] = userSubmition.lastName;\n            newUesrRequests[userSubmition.userName]['info'] = userSubmition.info;\n            newUesrRequests[userSubmition.userName]['ip'] = socketip;\n        }\n        else\n        {\n            newUesrRequests[userSubmition.userName]['userPassword'] = userSubmition.userPassword;\n            newUesrRequests[userSubmition.userName]['userEmail'] = userSubmition.userEmail.toLowerCase();\n            newUesrRequests[userSubmition.userName]['userRole'] = 'user';\n            newUesrRequests[userSubmition.userName]['firstName'] = userSubmition.firstName;\n            newUesrRequests[userSubmition.userName]['lastName'] = userSubmition.lastName;\n            newUesrRequests[userSubmition.userName]['info'] = userSubmition.info;\n            newUesrRequests[userSubmition.userName]['ip'] = socketip;\n        }\n        global.set('newUesrRequests', newUesrRequests);\n        newLineInLog = 'Relative URL: /ui/#!/2 | '+ humanTimestamp + ` | IP - ` + socketip + ` | ` + `Newuser Request Submitted | socket - ` + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        msg.error = false;\n        msg.topic = 'Request';\n        msg.payload = 'Submitted';\n        msg.userSubmition = userSubmition;\n        return msg;\n    }\n    else //no ip found in AuthLoginCredentials send user to login page (this happens when they direct link to page and skip loggin page)\n    {\n        msg.error = true;\n        msg.topic = '';\n        msg.payload = 'Login';\n        return msg;\n    }\n}\nelse // no AuthLoginCredentials found send user to login page (this happens when they direct link to page and skip loggin page)\n{\n    msg.error = true;\n    msg.topic = '';\n    msg.payload = 'Login';\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 390,
        "y": 1260,
        "wires": [
            [
                "3cd5dd13e15d1ae8"
            ]
        ]
    },
    {
        "id": "d8dc9b07eaece746",
        "type": "twin-bcrypt",
        "z": "c41dabcb5f7e3c2a",
        "g": "3263de3e0f898f10",
        "name": "",
        "action": "encrypt",
        "field": "userSubmition.userPassword",
        "hash": "",
        "rounds": "4",
        "x": 130,
        "y": 1260,
        "wires": [
            [
                "4c230c7d11b5b868"
            ]
        ]
    },
    {
        "id": "33e1dbafaad6a8e9",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "3263de3e0f898f10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 150,
        "y": 1220,
        "wires": [
            [
                "76510867835dbd1f"
            ]
        ]
    },
    {
        "id": "76510867835dbd1f",
        "type": "moment",
        "z": "c41dabcb5f7e3c2a",
        "g": "3263de3e0f898f10",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 420,
        "y": 1220,
        "wires": [
            [
                "d8dc9b07eaece746"
            ]
        ]
    },
    {
        "id": "3cd5dd13e15d1ae8",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "3263de3e0f898f10",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 630,
        "y": 1240,
        "wires": [
            [
                "1bf5a3b2a901f738"
            ],
            [
                "0f7e4910c0209ccb"
            ]
        ]
    },
    {
        "id": "1bf5a3b2a901f738",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "3263de3e0f898f10",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to login page\nmsg.url = '/ui/#!/1?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Login</title></head><body>Login<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1030,
        "y": 1220,
        "wires": [
            [
                "6170ad66484831c5"
            ]
        ]
    },
    {
        "id": "6170ad66484831c5",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "3263de3e0f898f10",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 1220,
        "wires": []
    },
    {
        "id": "0f7e4910c0209ccb",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "3263de3e0f898f10",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to homepage\nmsg.url = '/ui/#!/0?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Request Submitted</title></head><body>Request Submitted<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1030,
        "y": 1260,
        "wires": [
            [
                "3be19d1ade68f24f"
            ]
        ]
    },
    {
        "id": "3be19d1ade68f24f",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "3263de3e0f898f10",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 1260,
        "wires": []
    },
    {
        "id": "20d617db294db734",
        "type": "comment",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "Things todo when node-red starts",
        "info": "",
        "x": 170,
        "y": 3740,
        "wires": []
    },
    {
        "id": "195d19e53e9d69c3",
        "type": "comment",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "import auth file to flow.auth if it exzists, if not then create a new one.",
        "info": "",
        "x": 320,
        "y": 3780,
        "wires": []
    },
    {
        "id": "e1d475220f18364f",
        "type": "file in",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "",
        "filename": "./data/auth/authUsers.dat",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 430,
        "y": 3820,
        "wires": [
            [
                "1e8060c1b384a540"
            ]
        ]
    },
    {
        "id": "295760e4528b7c79",
        "type": "inject",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 170,
        "y": 3820,
        "wires": [
            [
                "e1d475220f18364f"
            ]
        ]
    },
    {
        "id": "140745fe239573ce",
        "type": "debug",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 3820,
        "wires": []
    },
    {
        "id": "1e8060c1b384a540",
        "type": "json",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 610,
        "y": 3820,
        "wires": [
            [
                "c12350b57a359f68"
            ]
        ]
    },
    {
        "id": "fe6005da5fd94e38",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "authUsers",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 3820,
        "wires": [
            [
                "140745fe239573ce"
            ]
        ]
    },
    {
        "id": "426d17127e2e548b",
        "type": "catch",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "",
        "scope": [
            "e1d475220f18364f"
        ],
        "uncaught": false,
        "x": 290,
        "y": 3860,
        "wires": [
            [
                "afe1fd7820350e2a"
            ]
        ]
    },
    {
        "id": "c12350b57a359f68",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "msg.payload.admin has key password",
        "property": "payload.admin",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "password",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 3820,
        "wires": [
            [
                "fe6005da5fd94e38"
            ],
            [
                "afe1fd7820350e2a"
            ]
        ]
    },
    {
        "id": "49c15f57b5e87663",
        "type": "comment",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "import authsettings file to flow.authsettings if it exzists, if not then create a new one.",
        "info": "",
        "x": 370,
        "y": 3900,
        "wires": []
    },
    {
        "id": "9404935d1c3b7ff5",
        "type": "file in",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "",
        "filename": "./data/auth/authSettings.dat",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 420,
        "y": 3940,
        "wires": [
            [
                "5e2c3efeb2e30977"
            ]
        ]
    },
    {
        "id": "dc0d8fd05c60e450",
        "type": "debug",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 3940,
        "wires": []
    },
    {
        "id": "5e2c3efeb2e30977",
        "type": "json",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 610,
        "y": 3940,
        "wires": [
            [
                "eefe2a5a07b175e3"
            ]
        ]
    },
    {
        "id": "392ebb07145975d5",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "authSettings",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 3940,
        "wires": [
            [
                "dc0d8fd05c60e450"
            ]
        ]
    },
    {
        "id": "d444824a1a23aaa6",
        "type": "catch",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "",
        "scope": [
            "9404935d1c3b7ff5"
        ],
        "uncaught": false,
        "x": 290,
        "y": 3980,
        "wires": [
            [
                "09a8e1683e2c9470"
            ]
        ]
    },
    {
        "id": "eefe2a5a07b175e3",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "msg.payload.muiLogin has key maxSocketips",
        "property": "payload.muiLogin",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "maxSocketips",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 3940,
        "wires": [
            [
                "392ebb07145975d5"
            ],
            [
                "09a8e1683e2c9470"
            ]
        ]
    },
    {
        "id": "80f8db78c272e8ac",
        "type": "inject",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 3940,
        "wires": [
            [
                "9404935d1c3b7ff5"
            ]
        ]
    },
    {
        "id": "afe1fd7820350e2a",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "password",
                "pt": "msg",
                "to": "password",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 3860,
        "wires": [
            [
                "1bf30cb24ec9da5e"
            ]
        ]
    },
    {
        "id": "1bf30cb24ec9da5e",
        "type": "twin-bcrypt",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "",
        "action": "encrypt",
        "field": "password",
        "hash": "",
        "rounds": "4",
        "x": 630,
        "y": 3860,
        "wires": [
            [
                "cb9d65dbb4a13d07"
            ]
        ]
    },
    {
        "id": "875a2e8f4cbf12cd",
        "type": "debug",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 3980,
        "wires": []
    },
    {
        "id": "9e7961717d461488",
        "type": "file",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "",
        "filename": "./data/auth/authSettings.dat",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1140,
        "y": 3980,
        "wires": [
            [
                "875a2e8f4cbf12cd"
            ]
        ]
    },
    {
        "id": "09a8e1683e2c9470",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "settings object",
        "func": "//function randomString(length, chars) {\n//    var result = '';\n//   for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n//    return result;\n//}\n//create a random 32 char string for encrypt/decrypt of user passwords\n//var rString = randomString(32, '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');\n\n\nmsg.payload = {\n    muiLogin : {\n        maxSocketips : 1000\n    },\n    muiLog : {\n        maxmuiLogLength : 250\n    },\n    newUesrs : {\n        newUesrRequestsMaxPending : 1000\n    },\n    passReq : {\n        mustContainMinCharOf : 8,\n        mustContainMinOneUppercase : true,\n        mustContainMinOneLowercase : true,\n        mustContainMinOneNumber : true,\n        mustContainMinOneSpecialChar : false\n    },\n    emailSupportEnabled : false\n    \n    //ranString : rString\n}\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 3980,
        "wires": [
            [
                "9a51bd297d1051a0",
                "eefe2a5a07b175e3"
            ]
        ]
    },
    {
        "id": "9a51bd297d1051a0",
        "type": "json",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 610,
        "y": 3980,
        "wires": [
            [
                "9e7961717d461488"
            ]
        ]
    },
    {
        "id": "d50f1a35d6a9368a",
        "type": "debug",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 3860,
        "wires": []
    },
    {
        "id": "e1ec9400127a7ece",
        "type": "file",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "",
        "filename": "./data/auth/authUsers.dat",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1150,
        "y": 3860,
        "wires": [
            [
                "d50f1a35d6a9368a"
            ]
        ]
    },
    {
        "id": "cb9d65dbb4a13d07",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "authUsers object",
        "func": "var msg_password = msg.password;\nmsg.payload = {\n    admin : {\n        password : msg_password,\n        email : 'admin@admin.com',\n        role : 'admin',\n        firstname : 'john',\n        lastname : 'doe',\n        info : 'accounting department'\n    }\n}\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 810,
        "y": 3860,
        "wires": [
            [
                "4594b2c112f16cf8",
                "c12350b57a359f68"
            ]
        ]
    },
    {
        "id": "4594b2c112f16cf8",
        "type": "json",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 970,
        "y": 3860,
        "wires": [
            [
                "e1ec9400127a7ece"
            ]
        ]
    },
    {
        "id": "805fd4172020316e",
        "type": "ui_text",
        "z": "c41dabcb5f7e3c2a",
        "g": "7f3bda38b203a79d",
        "group": "4edfae8b.b8925",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "<h1 id=\"this-is-the-homepage\">This is the Homepage</h1> <p>Any one that has the <strong><em>URL</em></strong> http(s)://your-ip-address-or-domain/ui/ can  access this page without a login.</p>",
        "layout": "col-center",
        "x": 90,
        "y": 380,
        "wires": []
    },
    {
        "id": "2132e47088039d39",
        "type": "comment",
        "z": "c41dabcb5f7e3c2a",
        "g": "7f3bda38b203a79d",
        "name": "Home Tab 0",
        "info": "",
        "x": 110,
        "y": 340,
        "wires": []
    },
    {
        "id": "7e782627688460f6",
        "type": "inject",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 3980,
        "wires": [
            [
                "09a8e1683e2c9470"
            ]
        ]
    },
    {
        "id": "8e9ccf34228ae865",
        "type": "inject",
        "z": "c41dabcb5f7e3c2a",
        "g": "6a660e82fb2466d2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 3860,
        "wires": [
            [
                "afe1fd7820350e2a"
            ]
        ]
    },
    {
        "id": "87eca6dbf1428191",
        "type": "debug",
        "z": "c41dabcb5f7e3c2a",
        "g": "12a71c68e037171b",
        "name": "debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 140,
        "wires": []
    },
    {
        "id": "61954e81a1d5d094",
        "type": "comment",
        "z": "c41dabcb5f7e3c2a",
        "g": "12a71c68e037171b",
        "name": "Please setup a email node and attach it to the link in, and or replacing the debug node if you enable email support in the admin console of the dashboard page",
        "info": "",
        "x": 560,
        "y": 100,
        "wires": []
    },
    {
        "id": "ab5207a49a69a7de",
        "type": "link in",
        "z": "c41dabcb5f7e3c2a",
        "g": "12a71c68e037171b",
        "name": "email link in",
        "links": [
            "e1ef84ae04062dd2",
            "c58a466d79445350",
            "21eb15a68b127821"
        ],
        "x": 275,
        "y": 140,
        "wires": [
            [
                "87eca6dbf1428191"
            ]
        ]
    },
    {
        "id": "2083f6977d7fc405",
        "type": "comment",
        "z": "c41dabcb5f7e3c2a",
        "g": "12a71c68e037171b",
        "name": "Email Node Goes Here",
        "info": "",
        "x": 140,
        "y": 140,
        "wires": []
    },
    {
        "id": "09978762dee85cd5",
        "type": "comment",
        "z": "c41dabcb5f7e3c2a",
        "g": "12a71c68e037171b",
        "name": "Email",
        "info": "",
        "x": 90,
        "y": 60,
        "wires": []
    },
    {
        "id": "78e1e7d0588ce078",
        "type": "comment",
        "z": "c41dabcb5f7e3c2a",
        "g": "12a71c68e037171b",
        "name": "Leave property [To] field blank. The email address is provided by the users account!",
        "info": "",
        "x": 450,
        "y": 60,
        "wires": []
    },
    {
        "id": "d6014b8e9bd84ba0",
        "type": "comment",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "Account Tab 4",
        "info": "",
        "x": 110,
        "y": 1620,
        "wires": []
    },
    {
        "id": "d1518006576d581a",
        "type": "ui_form",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "Update Password",
        "label": "Update Your Password",
        "group": "205ac72e296cb65f",
        "order": 3,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Password",
                "value": "userPassword",
                "type": "password",
                "required": true,
                "rows": null
            },
            {
                "label": "Confirm Password",
                "value": "confirmPassword",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "userPassword": "",
            "confirmPassword": ""
        },
        "payload": "",
        "submit": "Update",
        "cancel": "",
        "topic": "topic",
        "x": 190,
        "y": 1860,
        "wires": [
            [
                "81b4d4099053f3d5"
            ]
        ]
    },
    {
        "id": "c89fd45c26cd9fbb",
        "type": "ui_ui_control",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "",
        "events": "change",
        "x": 120,
        "y": 1660,
        "wires": [
            [
                "830a5238d794f995"
            ]
        ]
    },
    {
        "id": "830a5238d794f995",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "socketid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 1660,
        "wires": [
            [
                "44a13994e6a2edee"
            ]
        ]
    },
    {
        "id": "44a13994e6a2edee",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "Change tab #",
        "property": "tab",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 440,
        "y": 1660,
        "wires": [
            [
                "655b112dc3fb704a"
            ]
        ]
    },
    {
        "id": "1f379ab99b64fffe",
        "type": "comment",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "<----- Put the Page Tab number in here",
        "info": "",
        "x": 690,
        "y": 1660,
        "wires": []
    },
    {
        "id": "0936e69792e9e931",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "MUI LOG [connect]",
        "func": "const socketid = msg.socketid;\nconst socketip = msg.socketip;\nconst humanTimestamp = msg.humanTimestamp;\nconst error = msg.error;\nconst tab = msg.tab.toString();\nconst newLineInLog = 'Relative URL: /ui/#!/' + tab +' | ' + humanTimestamp + ` | IP - ` + socketip + ` | ` + error + ` | socket - ` + socketid;\n\n\n//Get muiLog else create it\nvar muiLog = global.get('muiLog')||[];\n\n\n\n\n//clean up muiLog so it does not overflow.\n//get length of muiLog array \nvar muiLogLength = muiLog.length;\n//remove 2 items from muiLog if > 1000\nif (muiLogLength > 1000)\n{   \n    muiLog.splice(muiLogLength - 2, 2);\n}\n\n\n\n//add new log item to the top of the array\nmuiLog.unshift(newLineInLog);\n\n\nglobal.set('muiLog', muiLog);\n\nmuiLog = global.get('muiLog');\n\nmsg.muiLog = muiLog;\n\n    \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 650,
        "y": 1700,
        "wires": [
            [
                "680eadae35828e61"
            ]
        ]
    },
    {
        "id": "680eadae35828e61",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\nconst tab = msg.tab.toString();\nconst pageURL = '/ui/#!/' + tab;\n\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//set AuthLoginCredentials to users accessing this page\nif (!AuthLoginCredentials[socketid])\n{\n    AuthLoginCredentials[socketid] = {};\n    AuthLoginCredentials[socketid]['fromURL'] = pageURL;\n}\nelse\n{\n    AuthLoginCredentials[socketid]['fromURL'] = pageURL;\n}\nglobal.set('AuthLoginCredentials', AuthLoginCredentials);\nAuthLoginCredentials = global.get('AuthLoginCredentials');\nmsg.AuthLoginCredentials = AuthLoginCredentials;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to login page\nmsg.url = '/ui/#!/1?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Login</title></head><body>Login<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 910,
        "y": 1700,
        "wires": [
            [
                "898fe46c9cc43e66"
            ]
        ]
    },
    {
        "id": "898fe46c9cc43e66",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1180,
        "y": 1700,
        "wires": []
    },
    {
        "id": "655b112dc3fb704a",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 1660,
        "wires": [
            [
                "994fe74ed4dfcdbb"
            ]
        ]
    },
    {
        "id": "994fe74ed4dfcdbb",
        "type": "moment",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 1160,
        "y": 1660,
        "wires": [
            [
                "6d0c146da60e90d5"
            ]
        ]
    },
    {
        "id": "6d0c146da60e90d5",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "Is user logged in?",
        "func": "const socketid = msg.socketid;\nconst socketip = msg.socketip;\n//Get AuthLoginCredentials else create it\nconst AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\nvar isuerloggedin = false;\nvar error = 'User not logged in';\n\n\n//check that loggedin is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].loggedin === true) {\n        isuerloggedin = true;\n        //get user information from AuthLoginCredentials\n        var ip = AuthLoginCredentials[socketid].ip;\n        var userName = AuthLoginCredentials[socketid].userName;\n        var email = AuthLoginCredentials[socketid].email;\n        var role = AuthLoginCredentials[socketid].role;\n        var firstname = AuthLoginCredentials[socketid].firstname;\n        var lastname = AuthLoginCredentials[socketid].lastname;\n        var info = AuthLoginCredentials[socketid].info;\n        //if the ip that the user logged in with\n        //that is tied to the socketid of that login\n        //is diffrent then the ip used to get to this page\n        //kick the record and send user back to login page\n        if(ip !== socketip) {\n            delete AuthLoginCredentials[socketid];\n            error = 'socketip: '+socketip+' !== to Login ip: '+ip;\n            msg.error = error;\n            isuerloggedin = false;\n            msg.isuerloggedin = isuerloggedin;\n            return msg;\n        }\n        else {\n            msg.error = false;\n            msg.isuerloggedin = isuerloggedin;\n            return msg;\n        }\n    }\n    else {\n        msg.error = error;\n        msg.isuerloggedin = isuerloggedin;\n        return msg;\n    }\n}\nelse {\n    msg.error = error;\n    msg.isuerloggedin = isuerloggedin;\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 150,
        "y": 1700,
        "wires": [
            [
                "bb5063e55a80427f"
            ]
        ]
    },
    {
        "id": "bb5063e55a80427f",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "1[not logged in] 2[logged in]",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 380,
        "y": 1700,
        "wires": [
            [
                "0936e69792e9e931"
            ],
            []
        ]
    },
    {
        "id": "39c811e6fa319bbe",
        "type": "ui_button",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "",
        "group": "205ac72e296cb65f",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Delete Your Account",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "x": 160,
        "y": 1780,
        "wires": [
            [
                "7e970a344b1d75cc"
            ]
        ]
    },
    {
        "id": "cab2922d07aded5b",
        "type": "ui_text",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "group": "205ac72e296cb65f",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "blank",
        "label": "",
        "format": "",
        "layout": "col-center",
        "x": 75,
        "y": 1860,
        "wires": [],
        "l": false
    },
    {
        "id": "7e970a344b1d75cc",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Warning!",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "You are about to remove all your account information and delete yourself from the system. Are you sure you want to continue?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 1780,
        "wires": [
            [
                "2338d1279427871b"
            ]
        ]
    },
    {
        "id": "2338d1279427871b",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "CANCEL",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 530,
        "y": 1780,
        "wires": [
            [
                "f7c00df29bcb05e2"
            ]
        ]
    },
    {
        "id": "f7c00df29bcb05e2",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CANCEL",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 1780,
        "wires": [
            [],
            [
                "da9818e314856fdb"
            ]
        ]
    },
    {
        "id": "76a2461f4ec80b30",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "Delete Account & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst humanTimestamp = msg.humanTimestamp;\nvar authUsers = global.get('authUsers');\nvar muiLog = global.get('muiLog')||[];\n\n//clean up muiLog so it does not overflow.\n//Set length of muiLog array, \nvar muiLogMaxLength = authSettings.muiLog.maxmuiLogLength;\n//get length of muiLog array \nvar muiLogLength = muiLog.length;\n//remove 2 items from muiLog if > muiLogMaxLength\nif (muiLogLength > muiLogMaxLength) {   \n    muiLog.splice(muiLogLength - 2, 2);\n}\n\n//get socketip first. If user does not have one send them back to login page as they direct linked in here\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n    \n        //Get get the current userName that clicked the button\n        const userName = AuthLoginCredentials[socketid].userName;\n        \n        //Delete the user from system\n        delete authUsers[userName];\n        global.set('authUsers', authUsers);\n        \n        newLineInLog = 'Relative URL: /ui/#!/4 | ' + humanTimestamp + ' | IP - ' + socketip + ' | ' + 'user: ' + userName + ' Deleted themselves from the system | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        msg.error = false;\n        return msg;\n    }\n    else //no ip found in AuthLoginCredentials send user to login page (this happens when they direct link to page and skip loggin page)\n    {\n        msg.error = true;\n        return msg;\n    }\n}\nelse // no AuthLoginCredentials found send user to login page (this happens when they direct link to page and skip loggin page)\n{\n    msg.error = true;\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 1820,
        "wires": [
            [
                "13cfcf93c1870536"
            ]
        ]
    },
    {
        "id": "da9818e314856fdb",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 150,
        "y": 1820,
        "wires": [
            [
                "62a9a326626dfd4c"
            ]
        ]
    },
    {
        "id": "62a9a326626dfd4c",
        "type": "moment",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 360,
        "y": 1820,
        "wires": [
            [
                "76a2461f4ec80b30"
            ]
        ]
    },
    {
        "id": "04fb7c3d2b5be29e",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to login page\nmsg.url = '/ui/#!/1?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Login</title></head><body>Login<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1030,
        "y": 1780,
        "wires": [
            [
                "2f02d693787db905"
            ]
        ]
    },
    {
        "id": "4cec6764593871b5",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to homepage by /ui/ so they get a new socketid. this way the socketid they had tied tp AuthLoginCredentials will be deleted\nmsg.url = '/ui/';\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Account Deleted</title></head><body>Account Deleted<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1030,
        "y": 1820,
        "wires": [
            [
                "2f4a9ec437bb8351"
            ]
        ]
    },
    {
        "id": "13cfcf93c1870536",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 1800,
        "wires": [
            [
                "04fb7c3d2b5be29e"
            ],
            [
                "4cec6764593871b5"
            ]
        ]
    },
    {
        "id": "2f02d693787db905",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 1780,
        "wires": []
    },
    {
        "id": "2f4a9ec437bb8351",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 1820,
        "wires": []
    },
    {
        "id": "81b4d4099053f3d5",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "Submition Checks",
        "func": "const userSubmition = msg.payload;\nconst socketid = msg.socketid;\nconst authUsers = global.get('authUsers');\nconst userPassword = msg.payload.userPassword;\nconst confirmPassword = msg.payload.confirmPassword;\nconst authSettings = global.get('authSettings');\n\n// Password Regex pattern checker\nconst containsNchar = new RegExp('(?=.{'+authSettings.passReq.mustContainMinCharOf+',})');\nconst containsOneUppercase = new RegExp('(?=.*[A-Z])');\nconst containsOneLowercase = new RegExp('(?=.*[a-z])');\nconst containsOneNumber = new RegExp('(?=.*[0-9])');\nconst containsOneSpecialChar = new RegExp('(?=.*[@$!%*?&])');\n\nif (userPassword !== confirmPassword) {\n    msg.error = true;\n    msg.topic = 'Passwords do not match';\n    msg.payload = 'Please enter matching Passwords';\n    return msg;\n}\nif (!containsNchar.test(userPassword)) {\n    msg.error = true;\n    msg.topic = 'Password too short';\n    msg.payload = 'Must be longer than '+ authSettings.passReq.mustContainMinCharOf.toString() +' characters';\n    return msg;\n}\nif (authSettings.passReq.mustContainMinOneUppercase) {\n    if (!containsOneUppercase.test(userPassword)) {\n        msg.error = true;\n        msg.topic = 'Password lacks uppercase character';\n        msg.payload = 'Must contain at least one upper uppercase character. Like ABCDEFG';\n        return msg;\n    }\n    \n}\nif (authSettings.passReq.mustContainMinOneLowercase) {\n    if (!containsOneLowercase.test(userPassword)) {\n        msg.error = true;\n        msg.topic = 'Password lacks lowercase character';\n        msg.payload = 'Must contain at least one lowercase character. Like abcdefg';\n        return msg;\n    }\n}\nif (authSettings.passReq.mustContainMinOneNumber) {\n    if (!containsOneNumber.test(userPassword)) {\n        msg.error = true;\n        msg.topic = 'Password lacks a number';\n        msg.payload = 'Must contain at least one number. Like 1234567';\n        return msg;\n    }\n}\nif (authSettings.passReq.mustContainMinOneSpecialChar) {\n    if (!containsOneSpecialChar.test(userPassword)) {\n        msg.error = true;\n        msg.topic = 'Password lacks a special character';\n        msg.payload = 'Must contain at least one of these special characters. @$!%*?&';\n        return msg;\n    }\n}\nif (true) {\n\n    msg.error = false;\n    msg.userSubmition = userSubmition;\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 1860,
        "wires": [
            [
                "ee384bcf2840e03b"
            ]
        ]
    },
    {
        "id": "0bfa599fd6974cea",
        "type": "ui_form",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "Update Email",
        "label": "Update Your Email",
        "group": "205ac72e296cb65f",
        "order": 4,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "email",
                "value": "userEmail",
                "type": "email",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "userEmail": ""
        },
        "payload": "",
        "submit": "Update",
        "cancel": "",
        "topic": "topic",
        "x": 140,
        "y": 1980,
        "wires": [
            [
                "dde0575d65d919fa"
            ]
        ]
    },
    {
        "id": "ee384bcf2840e03b",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 1860,
        "wires": [
            [
                "11b2242d02af92bf"
            ],
            [
                "8752b7c1031e6a3a"
            ]
        ]
    },
    {
        "id": "11b2242d02af92bf",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 750,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "8752b7c1031e6a3a",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 150,
        "y": 1900,
        "wires": [
            [
                "3cc0117201cfc7d2"
            ]
        ]
    },
    {
        "id": "3cc0117201cfc7d2",
        "type": "moment",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 400,
        "y": 1900,
        "wires": [
            [
                "0b6b108009ba038a"
            ]
        ]
    },
    {
        "id": "88c857749ee84015",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "Update userPassword & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst userSubmition = msg.userSubmition;\nconst authSettings = global.get('authSettings');\nconst humanTimestamp = msg.humanTimestamp;\nvar authUsers = global.get('authUsers');\nvar muiLog = global.get('muiLog')||[];\n\n//clean up muiLog so it does not overflow.\n//Set length of muiLog array, \nvar muiLogMaxLength = authSettings.muiLog.maxmuiLogLength;\n//get length of muiLog array \nvar muiLogLength = muiLog.length;\n//remove 2 items from muiLog if > muiLogMaxLength\nif (muiLogLength > muiLogMaxLength) {   \n    muiLog.splice(muiLogLength - 2, 2);\n}\n\n\n//get socketip first. If user does not have one send them back to login page as they direct linked in here\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n        \n        //Get get the current userName that clicked the button\n        const userName = AuthLoginCredentials[socketid].userName;\n        \n        authUsers[userName].password = userSubmition.userPassword;\n        global.set('authUsers', authUsers);\n        \n        newLineInLog = 'Relative URL: /ui/#!/4 | ' + humanTimestamp + ' | IP - ' + socketip + ' | ' + 'user: ' + userName + ' Updated thier password | socket - ' + socketid;        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        msg.error = false;\n        return msg;\n    }\n    else //no ip found in AuthLoginCredentials send user to login page (this happens when they direct link to page and skip loggin page)\n    {\n        msg.error = true;\n        msg.topic = '';\n        msg.payload = 'Login';\n        return msg;\n    }\n}\nelse // no AuthLoginCredentials found send user to login page (this happens when they direct link to page and skip loggin page)\n{\n    msg.error = true;\n    msg.topic = '';\n    msg.payload = 'Login';\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 360,
        "y": 1940,
        "wires": [
            [
                "f9898a802db93508"
            ]
        ]
    },
    {
        "id": "0b6b108009ba038a",
        "type": "twin-bcrypt",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "",
        "action": "encrypt",
        "field": "userSubmition.userPassword",
        "hash": "",
        "rounds": "4",
        "x": 130,
        "y": 1940,
        "wires": [
            [
                "88c857749ee84015"
            ]
        ]
    },
    {
        "id": "f9898a802db93508",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 1920,
        "wires": [
            [
                "6393e1f58bf73f67"
            ],
            [
                "85b9eb944fbf4cc0"
            ]
        ]
    },
    {
        "id": "6393e1f58bf73f67",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to login page\nmsg.url = '/ui/#!/1?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Login</title></head><body>Login<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1030,
        "y": 1900,
        "wires": [
            [
                "2723a0b38576aa5a"
            ]
        ]
    },
    {
        "id": "2723a0b38576aa5a",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 1900,
        "wires": []
    },
    {
        "id": "5b695cf3f5f90fb5",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 1940,
        "wires": []
    },
    {
        "id": "85b9eb944fbf4cc0",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to login page\nmsg.url = '/ui/#!/1?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Password Updated</title></head><body>Password Updated<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1030,
        "y": 1940,
        "wires": [
            [
                "5b695cf3f5f90fb5"
            ]
        ]
    },
    {
        "id": "f49799d82e90a078",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 1980,
        "wires": [
            [
                "02ed626f22b5e3aa"
            ],
            [
                "35e2bcae446c23f6"
            ]
        ]
    },
    {
        "id": "02ed626f22b5e3aa",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 750,
        "y": 1980,
        "wires": [
            []
        ]
    },
    {
        "id": "dde0575d65d919fa",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "Submition Checks",
        "func": "const userSubmition = msg.payload;\nconst socketid = msg.socketid;\nconst authUsers = global.get('authUsers');\nconst userEmail = msg.payload.userEmail;\nconst authSettings = global.get('authSettings');\n\nvar authUsersEmailsArray = [];\n\n\n//creat an arry of allready used emails\n//get all keys(usernames) from the authUsers object first\nconst authUsersKeys = Object.keys(authUsers);\nauthUsersKeys.forEach(function(eachUserName) {\n    let eachEmail = authUsers[eachUserName].email;\n    authUsersEmailsArray.push(eachEmail);\n});\n\nif (authUsersEmailsArray.includes(userEmail)) {\n    msg.error = true;\n    msg.topic = 'Email already in use';\n    msg.payload = 'Please recover account';\n    msg.userSubmition = userSubmition;\n    return msg;\n}\nif (true) {\n\n    msg.error = false;\n    msg.userSubmition = userSubmition;\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 1980,
        "wires": [
            [
                "f49799d82e90a078"
            ]
        ]
    },
    {
        "id": "35e2bcae446c23f6",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 150,
        "y": 2020,
        "wires": [
            [
                "6be7c77952ca028a"
            ]
        ]
    },
    {
        "id": "6be7c77952ca028a",
        "type": "moment",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 400,
        "y": 2020,
        "wires": [
            [
                "da307dcd4172d6c6"
            ]
        ]
    },
    {
        "id": "da307dcd4172d6c6",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "Update userPassword & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst userSubmition = msg.userSubmition;\nconst authSettings = global.get('authSettings');\nconst humanTimestamp = msg.humanTimestamp;\nvar authUsers = global.get('authUsers');\nvar muiLog = global.get('muiLog')||[];\n\n//clean up muiLog so it does not overflow.\n//Set length of muiLog array, \nvar muiLogMaxLength = authSettings.muiLog.maxmuiLogLength;\n//get length of muiLog array \nvar muiLogLength = muiLog.length;\n//remove 2 items from muiLog if > muiLogMaxLength\nif (muiLogLength > muiLogMaxLength) {   \n    muiLog.splice(muiLogLength - 2, 2);\n}\n\n\n//get socketip first. If user does not have one send them back to login page as they direct linked in here\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n        \n        //Get get the current userName that clicked the button\n        const userName = AuthLoginCredentials[socketid].userName;\n        \n        authUsers[userName].email = userSubmition.userEmail;\n        global.set('authUsers', authUsers);\n        \n        newLineInLog = 'Relative URL: /ui/#!/4 | ' + humanTimestamp + ' | IP - ' + socketip + ' | ' + 'user: ' + userName + ' Updated thier email | socket - ' + socketid;        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        msg.error = false;\n        return msg;\n    }\n    else //no ip found in AuthLoginCredentials send user to login page (this happens when they direct link to page and skip loggin page)\n    {\n        msg.error = true;\n        msg.topic = '';\n        msg.payload = 'Login';\n        return msg;\n    }\n}\nelse // no AuthLoginCredentials found send user to login page (this happens when they direct link to page and skip loggin page)\n{\n    msg.error = true;\n    msg.topic = '';\n    msg.payload = 'Login';\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 200,
        "y": 2060,
        "wires": [
            [
                "b525619e27fde573"
            ]
        ]
    },
    {
        "id": "b525619e27fde573",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 2060,
        "wires": [
            [
                "9dc531e34930449d"
            ],
            [
                "9c9e1a70306a5f37"
            ]
        ]
    },
    {
        "id": "9dc531e34930449d",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to login page\nmsg.url = '/ui/#!/1?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Login</title></head><body>Login<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1030,
        "y": 2040,
        "wires": [
            [
                "bf605a1ca6bd7101"
            ]
        ]
    },
    {
        "id": "bf605a1ca6bd7101",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 2040,
        "wires": []
    },
    {
        "id": "4f280863a740e34b",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 2080,
        "wires": []
    },
    {
        "id": "9c9e1a70306a5f37",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "Format Payload for notification node",
        "func": "const email = msg.userSubmition.userEmail;\nconst socketid = msg.socketid;\n\nmsg.timeout = 2;\nmsg.topic = `Email Updated`;\n\nmsg.payload = email;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1030,
        "y": 2080,
        "wires": [
            [
                "4f280863a740e34b"
            ]
        ]
    },
    {
        "id": "e693b9d9088218e6",
        "type": "comment",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "Admin Tab 5",
        "info": "",
        "x": 110,
        "y": 2220,
        "wires": []
    },
    {
        "id": "2f6ebfd640872d93",
        "type": "ui_ui_control",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "events": "change",
        "x": 120,
        "y": 2260,
        "wires": [
            [
                "91338a61028c2361"
            ]
        ]
    },
    {
        "id": "91338a61028c2361",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "socketid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 2260,
        "wires": [
            [
                "9bca7631b2dae514"
            ]
        ]
    },
    {
        "id": "9bca7631b2dae514",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "Change tab #",
        "property": "tab",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "5",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 440,
        "y": 2260,
        "wires": [
            [
                "6add71cb3e09d844"
            ]
        ]
    },
    {
        "id": "41a33860889cc3e8",
        "type": "comment",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "<----- Put the Page Tab number in here",
        "info": "",
        "x": 690,
        "y": 2260,
        "wires": []
    },
    {
        "id": "1e7a2c47653b9835",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "MUI LOG [connect]",
        "func": "const socketid = msg.socketid;\nconst socketip = msg.socketip;\nconst humanTimestamp = msg.humanTimestamp;\nconst error = msg.error;\nconst tab = msg.tab.toString();\nconst newLineInLog = 'Relative URL: /ui/#!/' + tab +' | ' + humanTimestamp + ` | IP - ` + socketip + ` | ` + error + ` | socket - ` + socketid;\n\n//Get muiLog else create it\nvar muiLog = global.get('muiLog')||[];\n\n//add new log item to the top of the array\nmuiLog.unshift(newLineInLog);\nglobal.set('muiLog', muiLog);\n\n    \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 650,
        "y": 2300,
        "wires": [
            [
                "a33ad65d4b0c856c"
            ]
        ]
    },
    {
        "id": "a33ad65d4b0c856c",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\nconst tab = msg.tab.toString();\nconst pageURL = '/ui/#!/' + tab;\n\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//set AuthLoginCredentials to users accessing this page\nif (!AuthLoginCredentials[socketid])\n{\n    AuthLoginCredentials[socketid] = {};\n    AuthLoginCredentials[socketid]['fromURL'] = pageURL;\n}\nelse\n{\n    AuthLoginCredentials[socketid]['fromURL'] = pageURL;\n}\nglobal.set('AuthLoginCredentials', AuthLoginCredentials);\nAuthLoginCredentials = global.get('AuthLoginCredentials');\nmsg.AuthLoginCredentials = AuthLoginCredentials;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to login page\nmsg.url = '/ui/#!/1?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Login</title></head><body>Login<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1030,
        "y": 2300,
        "wires": [
            [
                "adcb626739a95f30"
            ]
        ]
    },
    {
        "id": "adcb626739a95f30",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 2300,
        "wires": []
    },
    {
        "id": "6add71cb3e09d844",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 2260,
        "wires": [
            [
                "f08fec2160ef41d4"
            ]
        ]
    },
    {
        "id": "f08fec2160ef41d4",
        "type": "moment",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 1260,
        "y": 2260,
        "wires": [
            [
                "dac7daae26f1d2f9"
            ]
        ]
    },
    {
        "id": "dac7daae26f1d2f9",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "Is user logged in?",
        "func": "const socketid = msg.socketid;\nconst socketip = msg.socketip;\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\nvar isuerloggedin = false;\nvar error = 'User not logged in';\n\n\n//check that loggedin is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].loggedin === true) {\n        isuerloggedin = true;\n        //get user information from AuthLoginCredentials\n        const ip = AuthLoginCredentials[socketid].ip;\n        const userName = AuthLoginCredentials[socketid].userName;\n        const email = AuthLoginCredentials[socketid].email;\n        const role = AuthLoginCredentials[socketid].role;\n        const firstname = AuthLoginCredentials[socketid].firstname;\n        const lastname = AuthLoginCredentials[socketid].lastname;\n        const info = AuthLoginCredentials[socketid].info;\n        //if the ip that the user logged in with\n        //that is tied to the socketid of that login\n        //is diffrent then the ip used to get to this page\n        //kick the record and send user back to login page\n        if(ip !== socketip) {\n            delete AuthLoginCredentials[socketid];\n            error = 'User: '+userName+' socketip: '+socketip+' !== to Login ip: '+ip;\n            msg.error = error;\n            isuerloggedin = false;\n            msg.isuerloggedin = isuerloggedin;\n            return msg;\n        }\n        if (role === 'admin') {\n        msg.error = false;\n        return msg;\n        }\n        else {\n            msg.error = 'User: '+userName+' Lacks Role';\n            msg.isuerloggedin = false;\n            return msg;\n        }\n    }\n    else {\n        msg.error = error;\n        msg.isuerloggedin = isuerloggedin;\n        return msg;\n    }\n}\nelse {\n    msg.error = error;\n    msg.isuerloggedin = isuerloggedin;\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 150,
        "y": 2300,
        "wires": [
            [
                "b14283d35dd9c730"
            ]
        ]
    },
    {
        "id": "b14283d35dd9c730",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "1[not logged in] 2[logged in]",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 380,
        "y": 2300,
        "wires": [
            [
                "1e7a2c47653b9835"
            ],
            [
                "9916bef7f5f5c226"
            ]
        ]
    },
    {
        "id": "59fb91b525ba279c",
        "type": "ui_dropdown",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "Current Users",
        "label": "",
        "tooltip": "",
        "place": "Select a User",
        "group": "cc7d7ea92ffb628f",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "topic",
        "x": 520,
        "y": 2340,
        "wires": [
            [
                "fccdcd1495da3786"
            ]
        ]
    },
    {
        "id": "12dea2612f0b91b1",
        "type": "ui_button",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "Current Users",
        "group": "cc7d7ea92ffb628f",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "<font size=\"4\">Current Users</font>",
        "tooltip": "",
        "color": "black",
        "bgcolor": "white",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "x": 1280,
        "y": 2340,
        "wires": [
            []
        ]
    },
    {
        "id": "43e8eb8e3d94f5ec",
        "type": "ui_button",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "group": "cc7d7ea92ffb628f",
        "order": 5,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "Delete User",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "x": 230,
        "y": 2540,
        "wires": [
            [
                "c0d369dddf5d1640"
            ]
        ]
    },
    {
        "id": "c577e9a0e19da9ea",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "Create an arry of Current Users",
        "func": "const authUsers = global.get('authUsers')||{};\n\n//Create an arry of Current Users\nauthUsersNamesArray = Object.keys(authUsers);\n\nmsg.options = authUsersNamesArray\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 290,
        "y": 2340,
        "wires": [
            [
                "59fb91b525ba279c"
            ]
        ]
    },
    {
        "id": "9916bef7f5f5c226",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 75,
        "y": 2340,
        "wires": [
            [
                "c577e9a0e19da9ea",
                "a163912dfe3d0543",
                "787290ef27fb331c"
            ]
        ],
        "l": false
    },
    {
        "id": "fccdcd1495da3786",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "admin selections",
        "func": "const socketid = msg.socketid;\nconst socketip = msg.socketip;\nconst authUsers = global.get('authUsers')||{};\nvar currentUser = msg.payload;\n\n\n//Get admingSelections else create it\nvar admingSelections = global.get('admingSelections')||{};\n\n\n//clean up admingSelections so it does not overflow.\nvar admingSelectionsMaxLength = 1000;\n//get keys admingSelections object \nvar admingSelectionsKeys = Object.keys(admingSelections);\n//get length of admingSelections object \nvar admingSelectionsLength = admingSelectionsKeys.length;\n//remove 2 items from Credentials if > AuthLoginCredentialsMaxLength\nif (admingSelectionsLength > admingSelectionsMaxLength)\n{   \n    delete admingSelections[admingSelectionsKeys[0]];\n    delete admingSelections[admingSelectionsKeys[1]];\n}\n\n\n\n//set admingSelections to users accessing this page\nif (!admingSelections[socketid])\n{\n    admingSelections[socketid] = {};\n    admingSelections[socketid]['currentUser'] = currentUser;\n}\nelse\n{\n    admingSelections[socketid]['currentUser'] = currentUser;\n}\n\n    msg.error = false;\n    msg.currentUser = currentUser;\n    msg.email = authUsers[currentUser].email;\n    msg.role = authUsers[currentUser].role;\n    msg.firstname = authUsers[currentUser].firstname;\n    msg.lastname = authUsers[currentUser].lastname;\n    msg.info = authUsers[currentUser].info;\n    \n    msg.topic = 'User: '+currentUser;\n    msg.payload = 'email: '+authUsers[currentUser].email+'<br>role: '+authUsers[currentUser].role+'<br>firstname: '+authUsers[currentUser].firstname+'<br>lastname: '+authUsers[currentUser].lastname+'<br>info: '+authUsers[currentUser].info+'<br>';\n    return msg;\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 710,
        "y": 2340,
        "wires": [
            [
                "cac6cddf3d620e42"
            ]
        ]
    },
    {
        "id": "604234d1321118d8",
        "type": "ui_text",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "group": "cc7d7ea92ffb628f",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "blank spacer",
        "label": "",
        "format": "",
        "layout": "col-center",
        "x": 1110,
        "y": 2620,
        "wires": []
    },
    {
        "id": "41ade310f7b4e99c",
        "type": "ui_text",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "group": "cc7d7ea92ffb628f",
        "order": 11,
        "width": 0,
        "height": 0,
        "name": "blank spacer",
        "label": "",
        "format": "",
        "layout": "col-center",
        "x": 510,
        "y": 2820,
        "wires": []
    },
    {
        "id": "79f9dcaf9da9e843",
        "type": "ui_button",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "group": "cc7d7ea92ffb628f",
        "order": 3,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "Edit Role",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "x": 220,
        "y": 2380,
        "wires": [
            [
                "77d483b477482b9f"
            ]
        ]
    },
    {
        "id": "19dd273a459375af",
        "type": "ui_button",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "group": "cc7d7ea92ffb628f",
        "order": 10,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Delete User",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "x": 230,
        "y": 2740,
        "wires": [
            [
                "13d4012482ce7302"
            ]
        ]
    },
    {
        "id": "5b4bc452ce94ae40",
        "type": "ui_button",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "group": "cc7d7ea92ffb628f",
        "order": 9,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Add User",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "x": 220,
        "y": 2660,
        "wires": [
            [
                "15a044fc6f0c2001"
            ]
        ]
    },
    {
        "id": "cbfcb6eb9d52b84f",
        "type": "ui_button",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "Administrator",
        "group": "205ac72e296cb65f",
        "order": 8,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "<font size=\"-6\">Administrator</font>",
        "tooltip": "",
        "color": "#0094CE",
        "bgcolor": "white",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "x": 130,
        "y": 2120,
        "wires": [
            [
                "59cb5b03a3882862"
            ]
        ]
    },
    {
        "id": "5e31ae968abe08b1",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 2120,
        "wires": []
    },
    {
        "id": "0aa458a5809a4cbf",
        "type": "ui_text",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "group": "205ac72e296cb65f",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "blank spacer",
        "label": "",
        "format": "",
        "layout": "col-center",
        "x": 430,
        "y": 2080,
        "wires": []
    },
    {
        "id": "a98554748f393990",
        "type": "ui_button",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "Password Requirements",
        "group": "cc7d7ea92ffb628f",
        "order": 12,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "<font size=\"4\">Password Requirements</font>",
        "tooltip": "",
        "color": "black",
        "bgcolor": "white",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "x": 270,
        "y": 2820,
        "wires": [
            []
        ]
    },
    {
        "id": "cf09953ae4360eed",
        "type": "ui_numeric",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "label": "Minimum Length",
        "tooltip": "",
        "group": "cc7d7ea92ffb628f",
        "order": 13,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": false,
        "topic": "topic",
        "format": "{{value}}",
        "min": "4",
        "max": "32",
        "step": 1,
        "x": 380,
        "y": 2860,
        "wires": [
            [
                "896ee2994338fc76"
            ]
        ]
    },
    {
        "id": "15c6a855493c3beb",
        "type": "ui_switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "label": "Require an Uppercase",
        "tooltip": "",
        "group": "cc7d7ea92ffb628f",
        "order": 14,
        "width": "5",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 400,
        "y": 2900,
        "wires": [
            [
                "eb5060a927f5d048"
            ]
        ]
    },
    {
        "id": "39ac47ef6cd19f4d",
        "type": "ui_text",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "group": "cc7d7ea92ffb628f",
        "order": 15,
        "width": "1",
        "height": "1",
        "name": "true/false",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 360,
        "y": 2940,
        "wires": []
    },
    {
        "id": "6fab9da458248d40",
        "type": "ui_switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "label": "Require an Lowercase",
        "tooltip": "",
        "group": "cc7d7ea92ffb628f",
        "order": 16,
        "width": "5",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 400,
        "y": 2980,
        "wires": [
            [
                "dd592b93f0679665"
            ]
        ]
    },
    {
        "id": "ea81c0cf05228539",
        "type": "ui_switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "label": "Require a Number",
        "tooltip": "",
        "group": "cc7d7ea92ffb628f",
        "order": 18,
        "width": "5",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 390,
        "y": 3060,
        "wires": [
            [
                "2018aa2c7e9ee4d3"
            ]
        ]
    },
    {
        "id": "1d4d1ba44c3947c4",
        "type": "ui_switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "label": "Require a SpecialChar",
        "tooltip": "",
        "group": "cc7d7ea92ffb628f",
        "order": 20,
        "width": "5",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 400,
        "y": 3140,
        "wires": [
            [
                "033711dc11081ee9"
            ]
        ]
    },
    {
        "id": "4a53109ad69bc072",
        "type": "ui_text",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "group": "cc7d7ea92ffb628f",
        "order": 22,
        "width": 0,
        "height": 0,
        "name": "blank spacer",
        "label": "",
        "format": "",
        "layout": "col-center",
        "x": 510,
        "y": 3180,
        "wires": []
    },
    {
        "id": "1348e27566db70b4",
        "type": "ui_button",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "Email",
        "group": "cc7d7ea92ffb628f",
        "order": 23,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "<font size=\"4\">Email</font>",
        "tooltip": "",
        "color": "black",
        "bgcolor": "white",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "x": 130,
        "y": 3220,
        "wires": [
            []
        ]
    },
    {
        "id": "0679b522cbae5d1a",
        "type": "ui_switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "label": "Email Support Enabled",
        "tooltip": "",
        "group": "cc7d7ea92ffb628f",
        "order": 24,
        "width": "5",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "topic",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 400,
        "y": 3220,
        "wires": [
            [
                "13c6568262324fcf"
            ]
        ]
    },
    {
        "id": "956ff575ab92f03a",
        "type": "ui_button",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "Log",
        "group": "cc7d7ea92ffb628f",
        "order": 27,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "<font size=\"4\">Log</font>",
        "tooltip": "",
        "color": "black",
        "bgcolor": "white",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "x": 130,
        "y": 3300,
        "wires": [
            []
        ]
    },
    {
        "id": "b7991fbfeb5e720b",
        "type": "ui_numeric",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "label": "Log Length",
        "tooltip": "",
        "group": "cc7d7ea92ffb628f",
        "order": 28,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": false,
        "topic": "topic",
        "format": "{{value}}",
        "min": "25",
        "max": "2000",
        "step": "25",
        "x": 370,
        "y": 3300,
        "wires": [
            [
                "583a27654863c2d7"
            ]
        ]
    },
    {
        "id": "50314fe5ab23afb2",
        "type": "ui_text",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "group": "cc7d7ea92ffb628f",
        "order": 26,
        "width": 0,
        "height": 0,
        "name": "blank spacer",
        "label": "",
        "format": "",
        "layout": "col-center",
        "x": 510,
        "y": 3260,
        "wires": []
    },
    {
        "id": "3d8ff1d0278fde59",
        "type": "ui_button",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "group": "cc7d7ea92ffb628f",
        "order": 29,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Refresh Log",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "x": 150,
        "y": 3340,
        "wires": [
            [
                "a090e0bfab8caeac"
            ]
        ]
    },
    {
        "id": "9cd3d91c5780f9c4",
        "type": "ui_text",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "group": "cc7d7ea92ffb628f",
        "order": 31,
        "width": 0,
        "height": 0,
        "name": "blank spacer",
        "label": "",
        "format": "",
        "layout": "col-center",
        "x": 670,
        "y": 3260,
        "wires": []
    },
    {
        "id": "7e39593fb1e3d2c2",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "execute & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst humanTimestamp = msg.humanTimestamp;\nconst user = msg.currentUser;\nvar muiLog = global.get('muiLog')||[];\n\n//get socketip first.\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n\n        //Get admingSelections else create it\n        var admingSelections = global.get('admingSelections')||{};\n        //remove user submited to admingSelection by socketid\n        delete admingSelections[socketid].currentUser;\n        global.set('admingSelections', admingSelections);\n        \n        //change role\n        var authUsers = global.get('authUsers')||{};\n        if (authUsers[user].role === \"admin\") {\n            authUsers[user].role = \"user\";\n            msg.usertest = true;\n            msg.authUsers = authUsers;\n        }\n        else if (authUsers[user].role === \"user\") { \n            authUsers[user].role = \"admin\";\n            msg.usertest = false;\n            msg.authUsers = authUsers;\n        }\n        global.set('authUsers', authUsers);\n        \n        var newLineInLog = 'Relative URL: /ui/#!/5 | ' + humanTimestamp + ' | IP - ' + socketip + ' | '+AuthLoginCredentials[socketid].userName+' changed '+user+' role to: '+ authUsers[user].role +' | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        global.set('muiLog', muiLog);\n        msg.topic = \"\";\n        msg.payload = user+' role now '+authUsers[user].role;\n        msg.authUsers = authUsers;\n        return msg;\n\n    }\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1080,
        "y": 2400,
        "wires": [
            [
                "c577e9a0e19da9ea",
                "1aa6ba4f2eb2237d",
                "a2e007c41865126d"
            ]
        ]
    },
    {
        "id": "77d483b477482b9f",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "select",
        "func": "const socketid = msg.socketid;\n//Get admingSelections else create it\nconst admingSelections = global.get('admingSelections')||{};\nconst authUsers = global.get('authUsers')||{};\nvar newrole;\n\n//get user selected\nif (admingSelections.hasOwnProperty(socketid) && admingSelections[socketid].hasOwnProperty('currentUser')) {\n    const currentUser = admingSelections[socketid].currentUser;\n    const userrole = authUsers[currentUser].role\n    msg.error = false;\n    msg.currentUser = currentUser;\n    msg.userrole = userrole;\n    msg.topic = 'User: '+currentUser+' has a role: '+userrole;\n    if (userrole === 'user') {\n        newrole = 'admin';\n    }\n    else if (userrole === 'admin') {\n        newrole = 'user';\n    }\n    msg.payload = 'Are you sure you want to make their role: '+newrole;\n    return msg;\n}\nelse {\n    msg.error = true;\n    msg.topic = 'No User Selected';\n    msg.payload = 'Please Select a User';\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 230,
        "y": 2420,
        "wires": [
            [
                "c516dc3620bf72a6"
            ]
        ]
    },
    {
        "id": "7c82fb64a5389391",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 510,
        "y": 2380,
        "wires": [
            []
        ]
    },
    {
        "id": "c516dc3620bf72a6",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 2400,
        "wires": [
            [
                "7c82fb64a5389391"
            ],
            [
                "899e7e8097c7671b"
            ]
        ]
    },
    {
        "id": "899e7e8097c7671b",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 510,
        "y": 2420,
        "wires": [
            [
                "ffc9880c37b9830e"
            ]
        ]
    },
    {
        "id": "ffc9880c37b9830e",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Cancel",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 2400,
        "wires": [
            [
                "c577e9a0e19da9ea"
            ],
            [
                "e9166572e2e5cef7"
            ]
        ]
    },
    {
        "id": "e9166572e2e5cef7",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 2420,
        "wires": [
            [
                "b9ed2b6108632ab2"
            ]
        ]
    },
    {
        "id": "b9ed2b6108632ab2",
        "type": "moment",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 860,
        "y": 2380,
        "wires": [
            [
                "7e39593fb1e3d2c2"
            ]
        ]
    },
    {
        "id": "1aa6ba4f2eb2237d",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 2400,
        "wires": []
    },
    {
        "id": "c0d369dddf5d1640",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "select",
        "func": "const socketid = msg.socketid;\n//Get admingSelections else create it\nconst admingSelections = global.get('admingSelections')||{};\n\n//get user selected\nif (admingSelections.hasOwnProperty(socketid) && admingSelections[socketid].hasOwnProperty('currentUser')) {\n    const currentUser = admingSelections[socketid].currentUser;\n    msg.error = false;\n    msg.currentUser = currentUser;\n    msg.topic = 'This will Delete User: '+currentUser+' from the system';\n    msg.payload = 'Are you sure you want contimue?';\n    return msg;\n}\nelse {\n    msg.error = true;\n    msg.topic = 'No User Selected';\n    msg.payload = 'Please Select a User';\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 230,
        "y": 2580,
        "wires": [
            [
                "558d4c47b9d12dab"
            ]
        ]
    },
    {
        "id": "a41cc2201165538a",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 510,
        "y": 2540,
        "wires": [
            []
        ]
    },
    {
        "id": "558d4c47b9d12dab",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 2560,
        "wires": [
            [
                "a41cc2201165538a"
            ],
            [
                "c6053bdec9f60716"
            ]
        ]
    },
    {
        "id": "5569c5ff696c7ec5",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 2580,
        "wires": [
            [
                "dbf2a85be0a13137"
            ]
        ]
    },
    {
        "id": "dbf2a85be0a13137",
        "type": "moment",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 860,
        "y": 2540,
        "wires": [
            [
                "cbc31439e8fa2b78"
            ]
        ]
    },
    {
        "id": "53a11c2ffe323173",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 2560,
        "wires": []
    },
    {
        "id": "cbc31439e8fa2b78",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "execute & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst humanTimestamp = msg.humanTimestamp;\nconst user = msg.currentUser;\nvar muiLog = global.get('muiLog')||[];\n\n//get socketip first.\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n\n        //Get admingSelections else create it\n        var admingSelections = global.get('admingSelections')||{};\n        //remove user submited to admingSelection by socketid\n        delete admingSelections[socketid].currentUser;\n        global.set('admingSelections', admingSelections);\n        \n        //delete user\n        var authUsers = global.get('authUsers')||{};\n        delete authUsers[user];\n        \n        global.set('authUsers', authUsers);\n        \n        var newLineInLog = 'Relative URL: /ui/#!/5 | ' + humanTimestamp + ' | IP - ' + socketip + ' | '+AuthLoginCredentials[socketid].userName+' deleted user: '+user+' from the system | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        global.set('muiLog', muiLog);\n        msg.topic = \"\";\n        msg.payload = 'User: '+user+' Deleted';\n        msg.authUsers = authUsers;\n        return msg;\n\n    }\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1080,
        "y": 2560,
        "wires": [
            [
                "53a11c2ffe323173",
                "c577e9a0e19da9ea",
                "a2e007c41865126d"
            ]
        ]
    },
    {
        "id": "d11b8012d7b85422",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Cancel",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 2560,
        "wires": [
            [
                "43e8eb8e3d94f5ec"
            ],
            [
                "5569c5ff696c7ec5"
            ]
        ]
    },
    {
        "id": "c6053bdec9f60716",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 510,
        "y": 2580,
        "wires": [
            [
                "d11b8012d7b85422"
            ]
        ]
    },
    {
        "id": "87e9b8336e5bac9c",
        "type": "ui_dropdown",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "Pending Users",
        "label": "",
        "tooltip": "",
        "place": "Select a User",
        "group": "cc7d7ea92ffb628f",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "topic",
        "x": 520,
        "y": 2620,
        "wires": [
            [
                "9df26c1470963cb8"
            ]
        ]
    },
    {
        "id": "b8fe157d325cfc4e",
        "type": "ui_button",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "Pending Users",
        "group": "cc7d7ea92ffb628f",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "<font size=\"4\">Pending Users</font>",
        "tooltip": "",
        "color": "black",
        "bgcolor": "white",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "x": 1280,
        "y": 2620,
        "wires": [
            []
        ]
    },
    {
        "id": "a163912dfe3d0543",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "Create an arry of Pending Users",
        "func": "const newUesrRequests = global.get('newUesrRequests')||{};\n\n//Create an arry of Pending Users\nnewUsersNamesArray = Object.keys(newUesrRequests);\n\nmsg.options = newUsersNamesArray\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 290,
        "y": 2620,
        "wires": [
            [
                "87e9b8336e5bac9c"
            ]
        ]
    },
    {
        "id": "cac6cddf3d620e42",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 950,
        "y": 2340,
        "wires": [
            []
        ]
    },
    {
        "id": "8038a38fda2c4219",
        "type": "ui_button",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "group": "cc7d7ea92ffb628f",
        "order": 4,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "Reset Pass",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "x": 230,
        "y": 2460,
        "wires": [
            [
                "d19a62b8ea5a9c57"
            ]
        ]
    },
    {
        "id": "27802c81f876c9ad",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 510,
        "y": 2460,
        "wires": [
            []
        ]
    },
    {
        "id": "6e3f68ecb71f64be",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 2480,
        "wires": [
            [
                "27802c81f876c9ad"
            ],
            [
                "4cd0192f7fb4fca2"
            ]
        ]
    },
    {
        "id": "4cd0192f7fb4fca2",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 510,
        "y": 2500,
        "wires": [
            [
                "d34656873d81882a"
            ]
        ]
    },
    {
        "id": "d34656873d81882a",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Cancel",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 2460,
        "wires": [
            [
                "c577e9a0e19da9ea"
            ],
            [
                "29ee3813939e4ed8"
            ]
        ]
    },
    {
        "id": "29ee3813939e4ed8",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 2500,
        "wires": [
            [
                "043e18e2200b0d98"
            ]
        ]
    },
    {
        "id": "043e18e2200b0d98",
        "type": "moment",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 860,
        "y": 2460,
        "wires": [
            [
                "e64d1c8f91fff975"
            ]
        ]
    },
    {
        "id": "d19a62b8ea5a9c57",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "select",
        "func": "const socketid = msg.socketid;\n//Get admingSelections else create it\nconst admingSelections = global.get('admingSelections')||{};\nconst authUsers = global.get('authUsers')||{};\nvar newrole;\n\n//get user selected\nif (admingSelections.hasOwnProperty(socketid) && admingSelections[socketid].hasOwnProperty('currentUser')) {\n    const currentUser = admingSelections[socketid].currentUser;\n    msg.error = false;\n    msg.currentUser = currentUser;\n    msg.topic = 'This will Reset User: '+currentUser+' Password';\n    msg.payload = 'Are you sure you want contimue?';\n    return msg;\n}\nelse {\n    msg.error = true;\n    msg.topic = 'No User Selected';\n    msg.payload = 'Please Select a User';\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 230,
        "y": 2500,
        "wires": [
            [
                "6e3f68ecb71f64be"
            ]
        ]
    },
    {
        "id": "e64d1c8f91fff975",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "random 32char string",
        "func": "function randomString(length, chars) {\n    var result = '';\n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}\n//create a random 32 char string\nvar rString = randomString(32, '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');\nmsg.rString = rString;\nmsg.rStringEncrypted = rString;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1080,
        "y": 2460,
        "wires": [
            [
                "e5aebe5611ae5f78"
            ]
        ]
    },
    {
        "id": "e5aebe5611ae5f78",
        "type": "twin-bcrypt",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "action": "encrypt",
        "field": "rStringEncrypted",
        "hash": "",
        "rounds": "4",
        "x": 1290,
        "y": 2460,
        "wires": [
            [
                "4623ef1a87c53293"
            ]
        ]
    },
    {
        "id": "4623ef1a87c53293",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "password & MUI LOG",
        "func": "var authUsers = global.get('authUsers');\nvar muiLog = global.get('muiLog')||[];\nconst humanTimestamp = msg.humanTimestamp;\nvar socketip;\nconst socketid = msg.socketid;\nconst rStringEncrypted = msg.rStringEncrypted\nconst rString = msg.rString;\nconst currentUser = msg.currentUser;\n\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        socketip = AuthLoginCredentials[socketid]['ip'];\n    }\n}\n\n//set new password for user\nauthUsers[currentUser].password = rStringEncrypted;\nglobal.set('authUsers', authUsers);\n\nvar newLineInLog = 'Relative URL: /ui/#!/5 | ' + humanTimestamp + ' | IP - ' + socketip + ' | '+socketid+' Changed password of '+currentUser+' | socket - ' + socketid;\n//add new log item to the top of the array\nmuiLog.unshift(newLineInLog);\nglobal.set('muiLog', muiLog);\n\nmsg.topic = 'Password changed!';\nmsg.payload = '<b>User: '+currentUser+'<br>Password: '+rString+'</b>'+'<br><br>Copy and save the password! <br>Passwords in plain txt are not stored on the system';\nmsg.authUsers = authUsers;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1080,
        "y": 2500,
        "wires": [
            [
                "9e7ed6c0f20918a8",
                "c577e9a0e19da9ea",
                "a2e007c41865126d"
            ]
        ]
    },
    {
        "id": "9e7ed6c0f20918a8",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1290,
        "y": 2500,
        "wires": [
            []
        ]
    },
    {
        "id": "9df26c1470963cb8",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "admin selections",
        "func": "const socketid = msg.socketid;\nconst socketip = msg.socketip;\nconst newUesrRequests = global.get('newUesrRequests')||{};\nvar currentUser = msg.payload;\n\n\n//Get admingSelections else create it\nvar admingSelections = global.get('admingSelections')||{};\n\n\n//clean up admingSelections so it does not overflow.\nvar admingSelectionsMaxLength = 1000;\n//get keys admingSelections object \nvar admingSelectionsKeys = Object.keys(admingSelections);\n//get length of admingSelections object \nvar admingSelectionsLength = admingSelectionsKeys.length;\n//remove 2 items from Credentials if > AuthLoginCredentialsMaxLength\nif (admingSelectionsLength > admingSelectionsMaxLength)\n{   \n    delete admingSelections[admingSelectionsKeys[0]];\n    delete admingSelections[admingSelectionsKeys[1]];\n}\n\n\n\n//set admingSelections \nif (!admingSelections[socketid])\n{\n    admingSelections[socketid] = {};\n    admingSelections[socketid]['newUesrRequestsUser'] = currentUser;\n}\nelse\n{\n    admingSelections[socketid]['newUesrRequestsUser'] = currentUser;\n}\n\n    msg.error = false;\n    msg.currentUser = currentUser;\n    msg.email = newUesrRequests[currentUser].userEmail;\n    msg.role = 'user';\n    msg.firstname = newUesrRequests[currentUser].firstName;\n    msg.lastname = newUesrRequests[currentUser].lastName;\n    msg.info = newUesrRequests[currentUser].info;\n    \n    msg.topic = 'User: '+currentUser;\n    msg.payload = 'email: '+newUesrRequests[currentUser].userEmail+'<br>role: user<br>firstname: '+newUesrRequests[currentUser].firstName+'<br>lastname: '+newUesrRequests[currentUser].lastName+'<br>info: '+newUesrRequests[currentUser].info+'<br>'+'<br>IP address of user who created this account<br> '+newUesrRequests[currentUser].ip+'<br>';\n    return msg;\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 710,
        "y": 2620,
        "wires": [
            [
                "974be58b3f54c0b9"
            ]
        ]
    },
    {
        "id": "974be58b3f54c0b9",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 950,
        "y": 2620,
        "wires": [
            []
        ]
    },
    {
        "id": "93a0cc64b722e4ed",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "Remove Credentials",
        "func": "const socketid = msg.socketid;\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\nvar admingSelections = global.get('admingSelections')||{};\n//RemoveAuthLoginCredentials when user connects to stop hijacking attempt of socketid\ndelete AuthLoginCredentials[socketid];\ndelete admingSelections[socketid];\n\n\nglobal.set('AuthLoginCredentials', AuthLoginCredentials);\nglobal.set('admingSelections', admingSelections);\n\n//AuthLoginCredentials = global.get('AuthLoginCredentials');\n//msg.AuthLoginCredentials = AuthLoginCredentials;\n\n    \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1080,
        "y": 560,
        "wires": [
            [
                "de71fe4ed0997974"
            ]
        ]
    },
    {
        "id": "de71fe4ed0997974",
        "type": "debug",
        "z": "c41dabcb5f7e3c2a",
        "g": "aed77accfef15d69",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 560,
        "wires": []
    },
    {
        "id": "1cdb742aeb29abb0",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "execute & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst humanTimestamp = msg.humanTimestamp;\nconst user = msg.currentUser;\nvar muiLog = global.get('muiLog')||[];\n\n//get socketip first.\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n\n        //Get newUesrRequests else create it\n        var newUesrRequests = global.get('newUesrRequests')||{};\n        //add user submited to admingSelections by socketid to authUsers Object\n        var authUsers = global.get('authUsers')||{};\n        \n        authUsers[user] = {};\n        authUsers[user]['password'] = newUesrRequests[user].userPassword;\n        authUsers[user]['email'] = newUesrRequests[user].userEmail;\n        authUsers[user]['role'] = newUesrRequests[user].userRole;\n        authUsers[user]['firstname'] = newUesrRequests[user].firstName;\n        authUsers[user]['lastname'] = newUesrRequests[user].lastName;\n        authUsers[user]['info'] = newUesrRequests[user].info;\n        \n        global.set('authUsers', authUsers);\n        \n        //now that user is added ... remove from newUesrRequests object\n        delete newUesrRequests[user];\n        global.set('newUesrRequests', newUesrRequests);\n        \n        var newLineInLog = 'Relative URL: /ui/#!/5 | ' + humanTimestamp + ' | IP - ' + socketip + ' | '+AuthLoginCredentials[socketid].userName+' added '+user+' to system | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        global.set('muiLog', muiLog);\n        msg.topic = \"\";\n        msg.payload = ' added User: '+user+' to system'\n        msg.authUsers = authUsers;\n        return msg;\n\n    }\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1080,
        "y": 2680,
        "wires": [
            [
                "e9b969c95d5778bc",
                "a2e007c41865126d",
                "a163912dfe3d0543"
            ]
        ]
    },
    {
        "id": "e4f7431a1903f1e0",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 510,
        "y": 2660,
        "wires": [
            []
        ]
    },
    {
        "id": "3789aef0b9f2e1ab",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 2680,
        "wires": [
            [
                "e4f7431a1903f1e0"
            ],
            [
                "c7092f2f2e67dac9"
            ]
        ]
    },
    {
        "id": "c7092f2f2e67dac9",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 510,
        "y": 2700,
        "wires": [
            [
                "29718fbaed2535cd"
            ]
        ]
    },
    {
        "id": "29718fbaed2535cd",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Cancel",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 2680,
        "wires": [
            [
                "a163912dfe3d0543"
            ],
            [
                "561a9c200abebd0b"
            ]
        ]
    },
    {
        "id": "561a9c200abebd0b",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 2700,
        "wires": [
            [
                "a9d86c8ef282bb91"
            ]
        ]
    },
    {
        "id": "a9d86c8ef282bb91",
        "type": "moment",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 860,
        "y": 2660,
        "wires": [
            [
                "1cdb742aeb29abb0"
            ]
        ]
    },
    {
        "id": "e9b969c95d5778bc",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 2680,
        "wires": []
    },
    {
        "id": "15a044fc6f0c2001",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "select",
        "func": "const socketid = msg.socketid;\n//Get admingSelections else create it\nconst admingSelections = global.get('admingSelections')||{};\n\n//get user selected\nif (admingSelections.hasOwnProperty(socketid) && admingSelections[socketid].hasOwnProperty('newUesrRequestsUser')) {\n    const currentUser = admingSelections[socketid].newUesrRequestsUser;\n    msg.error = false;\n    msg.currentUser = currentUser;\n    msg.topic = 'This will Add User: '+currentUser+' to the system';\n    msg.payload = 'Are you sure you want contimue?';\n    return msg;\n}\nelse {\n    msg.error = true;\n    msg.topic = 'No User Selected';\n    msg.payload = 'Please Select a User';\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 230,
        "y": 2700,
        "wires": [
            [
                "3789aef0b9f2e1ab"
            ]
        ]
    },
    {
        "id": "9edb23f357d59dcc",
        "type": "file",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "filename": "./data/auth/authUsers.dat",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1250,
        "y": 2820,
        "wires": [
            []
        ]
    },
    {
        "id": "b685e53c12548239",
        "type": "json",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1070,
        "y": 2820,
        "wires": [
            [
                "9edb23f357d59dcc"
            ]
        ]
    },
    {
        "id": "a2e007c41865126d",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "set msg.payload to msg.authUsers",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "authUsers",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 2780,
        "wires": [
            [
                "b685e53c12548239"
            ]
        ]
    },
    {
        "id": "4458f5c9cfeedc0d",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "execute & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst humanTimestamp = msg.humanTimestamp;\nconst user = msg.currentUser;\nvar muiLog = global.get('muiLog')||[];\n\n//get socketip first.\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n\n        //Get newUesrRequests else create it\n        var newUesrRequests = global.get('newUesrRequests')||{};\n        \n        //remove user from newUesrRequests object\n        delete newUesrRequests[user];\n        global.set('newUesrRequests', newUesrRequests);\n        \n        var newLineInLog = 'Relative URL: /ui/#!/5 | ' + humanTimestamp + ' | IP - ' + socketip + ' | '+AuthLoginCredentials[socketid].userName+' Deleted '+user+' from system | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        global.set('muiLog', muiLog);\n        msg.topic = \"\";\n        msg.payload = user+' role now '+authUsers[user].role;\n        return msg;\n\n    }\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1080,
        "y": 2740,
        "wires": [
            [
                "0b5559898ad8da18"
            ]
        ]
    },
    {
        "id": "94ccd1b57a90e602",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 510,
        "y": 2740,
        "wires": [
            []
        ]
    },
    {
        "id": "ebdee6d0fae6c6f5",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 2760,
        "wires": [
            [
                "94ccd1b57a90e602"
            ],
            [
                "b15331c0e18d3e21"
            ]
        ]
    },
    {
        "id": "b15331c0e18d3e21",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 510,
        "y": 2780,
        "wires": [
            [
                "bfa72de2354bc3fe"
            ]
        ]
    },
    {
        "id": "bfa72de2354bc3fe",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Cancel",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 2760,
        "wires": [
            [],
            [
                "5d7d82c8670245f3"
            ]
        ]
    },
    {
        "id": "5d7d82c8670245f3",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 2780,
        "wires": [
            [
                "bf10724ee5b988c2"
            ]
        ]
    },
    {
        "id": "bf10724ee5b988c2",
        "type": "moment",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 860,
        "y": 2740,
        "wires": [
            [
                "4458f5c9cfeedc0d"
            ]
        ]
    },
    {
        "id": "0b5559898ad8da18",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 2740,
        "wires": []
    },
    {
        "id": "13d4012482ce7302",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "select",
        "func": "const socketid = msg.socketid;\n//Get admingSelections else create it\nconst admingSelections = global.get('admingSelections')||{};\n\n//get user selected\nif (admingSelections.hasOwnProperty(socketid) && admingSelections[socketid].hasOwnProperty('newUesrRequestsUser')) {\n    const currentUser = admingSelections[socketid].newUesrRequestsUser;\n    msg.error = false;\n    msg.currentUser = currentUser;\n    msg.topic = 'This will remove Pending User\\'s Account Request for user: '+currentUser;\n    msg.payload = 'Are you sure you want contimue?';\n    return msg;\n}\nelse {\n    msg.error = true;\n    msg.topic = 'No User Selected';\n    msg.payload = 'Please Select a User';\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 230,
        "y": 2780,
        "wires": [
            [
                "ebdee6d0fae6c6f5"
            ]
        ]
    },
    {
        "id": "484ac935427ac595",
        "type": "ui_text",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "group": "205ac72e296cb65f",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "blank spacer",
        "label": "",
        "format": "",
        "layout": "col-center",
        "x": 590,
        "y": 2080,
        "wires": []
    },
    {
        "id": "787290ef27fb331c",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "get settings",
        "func": "const authSettings = global.get('authSettings')||{};\nconst muiLog = global.get('muiLog')||{};\n\nmsg.password_mustContainMinCharOf = authSettings.passReq.mustContainMinCharOf;\nmsg.password_mustContainMinOneUppercase = authSettings.passReq.mustContainMinOneUppercase;\nmsg.password_mustContainMinOneLowercase = authSettings.passReq.mustContainMinOneLowercase;\nmsg.password_mustContainMinOneNumber = authSettings.passReq.mustContainMinOneNumber;\nmsg.password_mustContainMinOneSpecialChar = authSettings.passReq.mustContainMinOneSpecialChar;\nmsg.password_emailSupportEnabled = authSettings.emailSupportEnabled;\nmsg.password_maxmuiLogLength = authSettings.muiLog.maxmuiLogLength;\nmsg.log_maxmuiLogLength = authSettings.muiLog.maxmuiLogLength\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 150,
        "y": 2860,
        "wires": [
            [
                "8e02d9c93738f4a8",
                "4a011d850c917617",
                "a582fad23925d224",
                "18199f4fa0831ba0",
                "92dd127ff102ff6f",
                "2d2354f1af05e1c6",
                "f5146760de4e8758",
                "a090e0bfab8caeac"
            ]
        ]
    },
    {
        "id": "8e02d9c93738f4a8",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "password_mustContainMinCharOf",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 255,
        "y": 2860,
        "wires": [
            [
                "cf09953ae4360eed"
            ]
        ],
        "l": false
    },
    {
        "id": "4a011d850c917617",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "password_mustContainMinOneUppercase",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 255,
        "y": 2920,
        "wires": [
            [
                "15c6a855493c3beb",
                "39ac47ef6cd19f4d"
            ]
        ],
        "l": false
    },
    {
        "id": "a582fad23925d224",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "password_mustContainMinOneLowercase",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 255,
        "y": 2980,
        "wires": [
            [
                "6fab9da458248d40",
                "3e1f3842fb5e08ab"
            ]
        ],
        "l": false
    },
    {
        "id": "18199f4fa0831ba0",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "password_mustContainMinOneNumber",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 255,
        "y": 3080,
        "wires": [
            [
                "ea81c0cf05228539",
                "5fc7845076ec7ce6"
            ]
        ],
        "l": false
    },
    {
        "id": "92dd127ff102ff6f",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "password_mustContainMinOneSpecialChar",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 255,
        "y": 3160,
        "wires": [
            [
                "1d4d1ba44c3947c4",
                "786eb56c2c281851"
            ]
        ],
        "l": false
    },
    {
        "id": "2d2354f1af05e1c6",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "password_emailSupportEnabled",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 255,
        "y": 3240,
        "wires": [
            [
                "0679b522cbae5d1a",
                "67041f0dab406657"
            ]
        ],
        "l": false
    },
    {
        "id": "f5146760de4e8758",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "log_maxmuiLogLength",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 255,
        "y": 3300,
        "wires": [
            [
                "b7991fbfeb5e720b"
            ]
        ],
        "l": false
    },
    {
        "id": "08a57e6b52ae549d",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "execute & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst humanTimestamp = msg.humanTimestamp;\nconst payload = msg.payload;\nvar muiLog = global.get('muiLog')||[];\n\n//get socketip first.\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n\n        //update setting\n        var authSettings = global.get('authSettings')||{};\n        authSettings.passReq.mustContainMinCharOf = payload;\n        global.set('authSettings', authSettings);\n        \n        var newLineInLog = 'Relative URL: /ui/#!/5 | ' + humanTimestamp + ' | IP - ' + socketip + ' | '+AuthLoginCredentials[socketid].userName+' Changed Password Minimum Length to '+payload.toString()+' | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        global.set('muiLog', muiLog);\n        msg.topic = \"\";\n        msg.payload = 'Password Minimum Length: '+payload.toString();\n        msg.authSettings = authSettings;\n        return msg;\n\n    }\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1040,
        "y": 2860,
        "wires": [
            [
                "787290ef27fb331c",
                "a2d2efe645ab4831",
                "45e4fdf6ea399bad"
            ]
        ]
    },
    {
        "id": "544095b98b439bfe",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "execute & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst humanTimestamp = msg.humanTimestamp;\nconst payload = msg.payload;\nvar muiLog = global.get('muiLog')||[];\n\n//get socketip first.\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n\n        //update setting\n        var authSettings = global.get('authSettings')||{};\n        authSettings.passReq.mustContainMinOneUppercase = payload;\n        global.set('authSettings', authSettings);\n        \n        var newLineInLog = 'Relative URL: /ui/#!/5 | ' + humanTimestamp + ' | IP - ' + socketip + ' | '+AuthLoginCredentials[socketid].userName+' Changed Require an Uppercase to '+payload.toString()+' | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        global.set('muiLog', muiLog);\n        msg.topic = \"\";\n        msg.payload = 'Require an Uppercase: '+payload.toString();\n        msg.authSettings = authSettings;\n        return msg;\n\n    }\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1040,
        "y": 2900,
        "wires": [
            [
                "787290ef27fb331c",
                "a2d2efe645ab4831",
                "45e4fdf6ea399bad"
            ]
        ]
    },
    {
        "id": "3e1f3842fb5e08ab",
        "type": "ui_text",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "group": "cc7d7ea92ffb628f",
        "order": 17,
        "width": "1",
        "height": "1",
        "name": "true/false",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 360,
        "y": 3020,
        "wires": []
    },
    {
        "id": "5fc7845076ec7ce6",
        "type": "ui_text",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "group": "cc7d7ea92ffb628f",
        "order": 19,
        "width": "1",
        "height": "1",
        "name": "true/false",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 360,
        "y": 3100,
        "wires": []
    },
    {
        "id": "786eb56c2c281851",
        "type": "ui_text",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "group": "cc7d7ea92ffb628f",
        "order": 21,
        "width": "1",
        "height": "1",
        "name": "true/false",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 360,
        "y": 3180,
        "wires": []
    },
    {
        "id": "67041f0dab406657",
        "type": "ui_text",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "group": "cc7d7ea92ffb628f",
        "order": 25,
        "width": "1",
        "height": "1",
        "name": "true/false",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 360,
        "y": 3260,
        "wires": []
    },
    {
        "id": "74b3ec5e0b604173",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "execute & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst humanTimestamp = msg.humanTimestamp;\nconst payload = msg.payload;\nvar muiLog = global.get('muiLog')||[];\n\n//get socketip first.\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n\n        //update setting\n        var authSettings = global.get('authSettings')||{};\n        authSettings.passReq.mustContainMinOneLowercase = payload;\n        global.set('authSettings', authSettings);\n        \n        var newLineInLog = 'Relative URL: /ui/#!/5 | ' + humanTimestamp + ' | IP - ' + socketip + ' | '+AuthLoginCredentials[socketid].userName+' Changed Require an Lowercase to '+payload.toString()+' | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        global.set('muiLog', muiLog);\n        msg.topic = \"\";\n        msg.payload = 'Require an Lowercase: '+payload.toString();\n        msg.authSettings = authSettings;\n        return msg;\n\n    }\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1040,
        "y": 2980,
        "wires": [
            [
                "787290ef27fb331c",
                "a2d2efe645ab4831",
                "45e4fdf6ea399bad"
            ]
        ]
    },
    {
        "id": "c50ac02107e51607",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "execute & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst humanTimestamp = msg.humanTimestamp;\nconst payload = msg.payload;\nvar muiLog = global.get('muiLog')||[];\n\n//get socketip first.\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n\n        //update setting\n        var authSettings = global.get('authSettings')||{};\n        authSettings.passReq.mustContainMinOneNumber = payload;\n        global.set('authSettings', authSettings);\n        \n        var newLineInLog = 'Relative URL: /ui/#!/5 | ' + humanTimestamp + ' | IP - ' + socketip + ' | '+AuthLoginCredentials[socketid].userName+' Changed Require a Number to '+payload.toString()+' | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        global.set('muiLog', muiLog);\n        msg.topic = \"\";\n        msg.payload = 'Require a Number: '+payload.toString();\n        msg.authSettings = authSettings;\n        return msg;\n\n    }\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1040,
        "y": 3060,
        "wires": [
            [
                "787290ef27fb331c",
                "a2d2efe645ab4831",
                "45e4fdf6ea399bad"
            ]
        ]
    },
    {
        "id": "fcda572602b0a1f6",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "execute & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst humanTimestamp = msg.humanTimestamp;\nconst payload = msg.payload;\nvar muiLog = global.get('muiLog')||[];\n\n//get socketip first.\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n\n        //update setting\n        var authSettings = global.get('authSettings')||{};\n        authSettings.passReq.mustContainMinOneSpecialChar = payload;\n        global.set('authSettings', authSettings);\n        \n        var newLineInLog = 'Relative URL: /ui/#!/5 | ' + humanTimestamp + ' | IP - ' + socketip + ' | '+AuthLoginCredentials[socketid].userName+' Changed Require a SpecialChar to '+payload.toString()+' | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        global.set('muiLog', muiLog);\n        msg.topic = \"\";\n        msg.payload = 'Require a SpecialChar: '+payload.toString();\n        msg.authSettings = authSettings;\n        return msg;\n\n    }\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1040,
        "y": 3140,
        "wires": [
            [
                "787290ef27fb331c",
                "a2d2efe645ab4831",
                "45e4fdf6ea399bad"
            ]
        ]
    },
    {
        "id": "54fa49eb3fb62714",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "execute & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst humanTimestamp = msg.humanTimestamp;\nconst payload = msg.payload;\nvar muiLog = global.get('muiLog')||[];\n\n//get socketip first.\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n\n        //update setting\n        var authSettings = global.get('authSettings')||{};\n        authSettings.emailSupportEnabled = payload;\n        global.set('authSettings', authSettings);\n        \n        var newLineInLog = 'Relative URL: /ui/#!/5 | ' + humanTimestamp + ' | IP - ' + socketip + ' | '+AuthLoginCredentials[socketid].userName+' Changed Email Support Enabled to '+payload.toString()+' | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        global.set('muiLog', muiLog);\n        msg.topic = \"\";\n        msg.payload = 'Email Support Enabled: '+payload.toString();\n        msg.authSettings = authSettings;\n        return msg;\n\n    }\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1040,
        "y": 3220,
        "wires": [
            [
                "787290ef27fb331c",
                "a2d2efe645ab4831",
                "45e4fdf6ea399bad"
            ]
        ]
    },
    {
        "id": "4b2aeae8521c0df0",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "execute & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst humanTimestamp = msg.humanTimestamp;\nconst payload = msg.payload;\nvar muiLog = global.get('muiLog')||[];\n\n//get socketip first.\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n\n        //update setting\n        var authSettings = global.get('authSettings')||{};\n        authSettings.muiLog.maxmuiLogLength = payload;\n        global.set('authSettings', authSettings);\n        \n        var newLineInLog = 'Relative URL: /ui/#!/5 | ' + humanTimestamp + ' | IP - ' + socketip + ' | '+AuthLoginCredentials[socketid].userName+' Changed Log Length to '+payload.toString()+' | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        global.set('muiLog', muiLog);\n        msg.topic = \"\";\n        msg.payload = 'Log Length: '+payload.toString();\n        msg.authSettings = authSettings;\n        return msg;\n\n    }\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1040,
        "y": 3300,
        "wires": [
            [
                "787290ef27fb331c",
                "a2d2efe645ab4831",
                "45e4fdf6ea399bad"
            ]
        ]
    },
    {
        "id": "a2d2efe645ab4831",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "payload to authSettings",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "authSettings",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1310,
        "y": 2900,
        "wires": [
            [
                "6457278e7553a1cc"
            ]
        ]
    },
    {
        "id": "6457278e7553a1cc",
        "type": "json",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1250,
        "y": 2940,
        "wires": [
            [
                "4f1afb269bf53e5c"
            ]
        ]
    },
    {
        "id": "4f1afb269bf53e5c",
        "type": "file",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "filename": "./data/auth/authSettings.dat",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1320,
        "y": 2980,
        "wires": [
            []
        ]
    },
    {
        "id": "45e4fdf6ea399bad",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 2860,
        "wires": []
    },
    {
        "id": "a090e0bfab8caeac",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "muiLog",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 255,
        "y": 3340,
        "wires": [
            [
                "05fd1227e81deb37"
            ]
        ],
        "l": false
    },
    {
        "id": "05fd1227e81deb37",
        "type": "split",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 490,
        "y": 3340,
        "wires": [
            [
                "b74f1aa24cc905e5"
            ]
        ]
    },
    {
        "id": "c50ed7267bc4792c",
        "type": "join",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n\\r",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 870,
        "y": 3340,
        "wires": [
            [
                "32f1e25ff50f7403"
            ]
        ]
    },
    {
        "id": "b74f1aa24cc905e5",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "func": "var payload = msg.payload;\npayload = payload+'<br><br>';\nmsg.payload = payload;\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 3340,
        "wires": [
            [
                "c50ed7267bc4792c"
            ]
        ]
    },
    {
        "id": "45cc70f93dfe7c9d",
        "type": "moment",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 820,
        "y": 2860,
        "wires": [
            [
                "08a57e6b52ae549d"
            ]
        ]
    },
    {
        "id": "896ee2994338fc76",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 2860,
        "wires": [
            [
                "45cc70f93dfe7c9d"
            ]
        ]
    },
    {
        "id": "4ed47483a0c1e420",
        "type": "moment",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 820,
        "y": 2900,
        "wires": [
            [
                "544095b98b439bfe"
            ]
        ]
    },
    {
        "id": "eb5060a927f5d048",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 2900,
        "wires": [
            [
                "4ed47483a0c1e420"
            ]
        ]
    },
    {
        "id": "a6b7ae535c52113d",
        "type": "moment",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 820,
        "y": 2980,
        "wires": [
            [
                "74b3ec5e0b604173"
            ]
        ]
    },
    {
        "id": "dd592b93f0679665",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 2980,
        "wires": [
            [
                "a6b7ae535c52113d"
            ]
        ]
    },
    {
        "id": "9ac1ddbe2e0e59d7",
        "type": "moment",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 820,
        "y": 3060,
        "wires": [
            [
                "c50ac02107e51607"
            ]
        ]
    },
    {
        "id": "2018aa2c7e9ee4d3",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 3060,
        "wires": [
            [
                "9ac1ddbe2e0e59d7"
            ]
        ]
    },
    {
        "id": "ab2ebc25210b0c4a",
        "type": "moment",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 820,
        "y": 3140,
        "wires": [
            [
                "fcda572602b0a1f6"
            ]
        ]
    },
    {
        "id": "033711dc11081ee9",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 3140,
        "wires": [
            [
                "ab2ebc25210b0c4a"
            ]
        ]
    },
    {
        "id": "8d3b886b47cca5aa",
        "type": "moment",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 820,
        "y": 3220,
        "wires": [
            [
                "54fa49eb3fb62714"
            ]
        ]
    },
    {
        "id": "13c6568262324fcf",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 3220,
        "wires": [
            [
                "8d3b886b47cca5aa"
            ]
        ]
    },
    {
        "id": "d648727fbdc5181e",
        "type": "moment",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 820,
        "y": 3300,
        "wires": [
            [
                "4b2aeae8521c0df0"
            ]
        ]
    },
    {
        "id": "583a27654863c2d7",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 3300,
        "wires": [
            [
                "d648727fbdc5181e"
            ]
        ]
    },
    {
        "id": "32f1e25ff50f7403",
        "type": "ui_template",
        "z": "c41dabcb5f7e3c2a",
        "g": "56111ac47191353b",
        "group": "cc7d7ea92ffb628f",
        "name": "",
        "order": 30,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1020,
        "y": 3340,
        "wires": [
            []
        ]
    },
    {
        "id": "2a769c7e6722c2f5",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "Chek user for admin role & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst humanTimestamp = msg.humanTimestamp;\nconst authSettings = global.get('authSettings')||{};\nvar muiLog = global.get('muiLog')||[];\n\n//clean up muiLog so it does not overflow.\n//Set length of muiLog array, \nvar muiLogMaxLength = authSettings.muiLog.maxmuiLogLength;\n//get length of muiLog array \nvar muiLogLength = muiLog.length;\n//remove 2 items from muiLog if > muiLogMaxLength\nif (muiLogLength > muiLogMaxLength) {   \n    muiLog.splice(muiLogLength - 2, 2);\n}\n\n//get socketip first. If user does not have one send them back to login page as they direct linked in here\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n        \n    \n        //Get get the current userName that clicked the button\n        const userName = AuthLoginCredentials[socketid].userName||{};\n        const role = AuthLoginCredentials[socketid].role||{};\n        \n        \n        if (role === 'admin') {\n        msg.error = false;\n        msg.url = '/ui/#!/5?socketid='+socketid;\n        msg.topic = '';\n        msg.payload = '<!DOCTYPE html><html><head><title>Administratort</title></head><body>Administrator<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\n        return msg;\n        }\n        if (role === 'user') {\n        newLineInLog = 'Relative URL: /ui/#!/5 | ' + humanTimestamp + ' | IP - ' + socketip + ' | ' + 'user: ' + userName + ' Was Declined Accessed Administrator Button | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        msg.error = true;\n        msg.timeout = 2;\n        msg.topic = 'Access Denied';\n        msg.payload = 'You lack proper user role';\n        return msg;\n        }\n        \n        msg.test = 'test';\n        msg.role = role;\n        return msg;\n        \n        \n    }\n    else //no ip found in AuthLoginCredentials send user to login page (this happens when they direct link to page and skip loggin page)\n    {\n        msg.error = true;\n        msg.timeout = 2;\n        msg.url = '/ui/#!/1?socketid='+socketid;\n        msg.topic = '';\n        msg.payload = '<!DOCTYPE html><html><head><title>Login</title></head><body>Login<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\n        return msg;\n    }\n}\nelse // no AuthLoginCredentials found send user to login page (this happens when they direct link to page and skip loggin page)\n{\n    msg.error = true;\n        msg.timeout = 2;\n        msg.url = '/ui/#!/1?socketid='+socketid;\n        msg.topic = '';\n        msg.payload = '<!DOCTYPE html><html><head><title>Login</title></head><body>Login<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\n        return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1030,
        "y": 2120,
        "wires": [
            [
                "5e31ae968abe08b1"
            ]
        ]
    },
    {
        "id": "59cb5b03a3882862",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 2120,
        "wires": [
            [
                "a36cebefdfc67741"
            ]
        ]
    },
    {
        "id": "a36cebefdfc67741",
        "type": "moment",
        "z": "c41dabcb5f7e3c2a",
        "g": "2e4a973ce65408b1",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 620,
        "y": 2120,
        "wires": [
            [
                "2a769c7e6722c2f5"
            ]
        ]
    },
    {
        "id": "0fa9a5258a1622f6",
        "type": "comment",
        "z": "c41dabcb5f7e3c2a",
        "g": "12a71c68e037171b",
        "name": "Look at Automation Tab 6 below for example of secureing your page",
        "info": "",
        "x": 280,
        "y": 240,
        "wires": []
    },
    {
        "id": "8ffd4af903f8b09a",
        "type": "comment",
        "z": "c41dabcb5f7e3c2a",
        "g": "7ae971cd6a4ab6e7",
        "name": "AccountRecovery Tab 3",
        "info": "",
        "x": 140,
        "y": 1360,
        "wires": []
    },
    {
        "id": "fd4cb80e51ab4136",
        "type": "ui_form",
        "z": "c41dabcb5f7e3c2a",
        "g": "7ae971cd6a4ab6e7",
        "name": "Account Recovery",
        "label": "Enter the Username or email<br>used to create your account",
        "group": "a40bb0d9c16471df",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username or email",
                "value": "userNameorEmail",
                "type": "text",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "userNameorEmail": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "",
        "topic": "topic",
        "x": 150,
        "y": 1400,
        "wires": [
            [
                "60c84b7a129edfb7"
            ]
        ]
    },
    {
        "id": "60c84b7a129edfb7",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "7ae971cd6a4ab6e7",
        "name": "Username/Email exists?",
        "func": "const socketid = msg.socketid;\nconst authUsers = global.get('authUsers');\nconst userNameorEmail = msg.payload.userNameorEmail;\nconst authSettings = global.get('authSettings');\nvar authUsersNamesArray = [];\nvar authUsersEmailsArray = [];\n\n//populate an arry of with Current userNames stored in authUsers object\nauthUsersNamesArray = Object.keys(authUsers);\n//check if userSubmition is one of the userNames\nif (authUsersNamesArray.includes(userNameorEmail)) {\n    msg.error = false;\n    msg.userName = userNameorEmail;\n    return msg;\n}\n//populate an arry with Current userEmails stored in authUsers object\nauthUsersNamesArray.forEach(function(eachUserName) {\n    let eachEmail = authUsers[eachUserName].email;\n    authUsersEmailsArray.push(eachEmail);\n});\n//check if userSubmition is one of the userEmails\n//lowerCase the email submition\nvar userNameorEmailtoLowercase = userNameorEmail.toLowerCase();\nif (authUsersEmailsArray.includes(userNameorEmailtoLowercase)) {\n    //we want the userName attached to that email\n    msg.error = false;\n    //we want the userName attached to that email\n    msg.userName = authUsersNamesArray[authUsersEmailsArray.indexOf(userNameorEmailtoLowercase)];\n    return msg;\n}\nelse {\n    msg.error = true;\n    msg.topic = 'Can not find Username or email';\n    msg.payload = 'Try again or create a new account';\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 370,
        "y": 1400,
        "wires": [
            [
                "6d7507f6d7771ac2"
            ]
        ]
    },
    {
        "id": "73395e138a5fdc41",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "7ae971cd6a4ab6e7",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 990,
        "y": 1400,
        "wires": [
            [
                "8da253e70d21fd83"
            ],
            [
                "08707fa8c89728d2"
            ]
        ]
    },
    {
        "id": "8da253e70d21fd83",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "7ae971cd6a4ab6e7",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1290,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "08707fa8c89728d2",
        "type": "switch",
        "z": "c41dabcb5f7e3c2a",
        "g": "7ae971cd6a4ab6e7",
        "name": "email Support Enabled?",
        "property": "authSettings.emailSupportEnabled",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 170,
        "y": 1440,
        "wires": [
            [
                "775ab5fd91b135ae"
            ],
            [
                "33e3930ec32a9a8b"
            ]
        ]
    },
    {
        "id": "8c9d6715a971ad35",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "7ae971cd6a4ab6e7",
        "name": "random 32char string",
        "func": "function randomString(length, chars) {\n    var result = '';\n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}\n//create a random 32 char string\nvar rString = randomString(32, '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');\nmsg.rString = rString;\nmsg.rStringEncrypted = rString;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 1480,
        "wires": [
            [
                "c36f976a2e761131"
            ]
        ]
    },
    {
        "id": "92a0c52394ac9d4a",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "7ae971cd6a4ab6e7",
        "name": "Format email with new password for user",
        "func": "var authUsers = global.get('authUsers');\nconst userName = msg.userName;\nconst rStringEncrypted = msg.rStringEncrypted\nconst rString = msg.rString;\n\n//set new password for user\nauthUsers[userName].password = rStringEncrypted;\nglobal.set('authUsers', authUsers);\n\n\n\n//format email\nmsg.to = authUsers[userName].email;\nmsg.topic = \"Account Recovery\";\nmsg.payload = \"Please login with...\"+\"\\r\\n\"+\"\\r\\n\"+\"Username: \"+userName+\"\\r\\n\"+\"Password: \"+rString+\"\\r\\n\"+\"\\r\\n\"+\"You can change the password after loggin in by going to the Account tab on the left and entering a new Password\"+\"\\r\\n\"+\"\\r\\n\"+\"Thank you!\";\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1020,
        "y": 1480,
        "wires": [
            [
                "21eb15a68b127821"
            ]
        ]
    },
    {
        "id": "c36f976a2e761131",
        "type": "twin-bcrypt",
        "z": "c41dabcb5f7e3c2a",
        "g": "7ae971cd6a4ab6e7",
        "name": "",
        "action": "encrypt",
        "field": "rStringEncrypted",
        "hash": "",
        "rounds": "4",
        "x": 770,
        "y": 1480,
        "wires": [
            [
                "92a0c52394ac9d4a"
            ]
        ]
    },
    {
        "id": "6d7507f6d7771ac2",
        "type": "change",
        "z": "c41dabcb5f7e3c2a",
        "g": "7ae971cd6a4ab6e7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 1400,
        "wires": [
            [
                "04ef67ee654f6958"
            ]
        ]
    },
    {
        "id": "04ef67ee654f6958",
        "type": "moment",
        "z": "c41dabcb5f7e3c2a",
        "g": "7ae971cd6a4ab6e7",
        "name": "",
        "topic": "",
        "input": "timestamp",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "Do MMMM YYYY HH:mm:ss z",
        "locale": "en-US",
        "output": "humanTimestamp",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 800,
        "y": 1400,
        "wires": [
            [
                "73395e138a5fdc41"
            ]
        ]
    },
    {
        "id": "33e3930ec32a9a8b",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "7ae971cd6a4ab6e7",
        "name": "newUesrRequests & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst userName = msg.userName;\nconst authSettings = global.get('authSettings');\nconst humanTimestamp = msg.humanTimestamp;\nvar muiLog = global.get('muiLog')||[];\n\n//clean up muiLog so it does not overflow.\n//Set length of muiLog array, \nvar muiLogMaxLength = authSettings.muiLog.maxmuiLogLength;\n//get length of muiLog array \nvar muiLogLength = muiLog.length;\n//remove 2 items from muiLog if > muiLogMaxLength\nif (muiLogLength > muiLogMaxLength) {   \n    muiLog.splice(muiLogLength - 2, 2);\n}\n\n//get socketip first. If user does not have one send them back to login page as they direct linked in here\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n\n        newLineInLog = 'Relative URL: /ui/#!/3 | ' + humanTimestamp + ' | IP - ' + socketip + ' | ' + 'user: ' + userName + ' Cant complete account recovery request - setup email to fix this | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        msg.error = false;\n        msg.topic = 'Warning, email support not enabled';\n        msg.payload = 'Please contact your admin about resetting your password';\n        return msg;\n    }\n    else //no ip found in AuthLoginCredentials send user to login page (this happens when they direct link to page and skip loggin page)\n    {\n        msg.error = true;\n        return msg;\n    }\n}\nelse // no AuthLoginCredentials found send user to login page (this happens when they direct link to page and skip loggin page)\n{\n    msg.error = true;\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 490,
        "y": 1520,
        "wires": [
            [
                "b3a89553cafe55e8"
            ]
        ]
    },
    {
        "id": "b3a89553cafe55e8",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "7ae971cd6a4ab6e7",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 770,
        "y": 1520,
        "wires": [
            [
                "fb544b431717be3f"
            ]
        ]
    },
    {
        "id": "fb544b431717be3f",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "7ae971cd6a4ab6e7",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to homepage\nmsg.url = '/ui/#!/0?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Home</title></head><body>Home<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1030,
        "y": 1520,
        "wires": [
            [
                "597d06a42a43b1c1"
            ]
        ]
    },
    {
        "id": "597d06a42a43b1c1",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "7ae971cd6a4ab6e7",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 1520,
        "wires": []
    },
    {
        "id": "21eb15a68b127821",
        "type": "link out",
        "z": "c41dabcb5f7e3c2a",
        "g": "7ae971cd6a4ab6e7",
        "name": "email link out",
        "links": [
            "ab5207a49a69a7de"
        ],
        "x": 1215,
        "y": 1480,
        "wires": []
    },
    {
        "id": "2a55bbc652195838",
        "type": "comment",
        "z": "c41dabcb5f7e3c2a",
        "g": "7ae971cd6a4ab6e7",
        "name": "Email",
        "info": "",
        "x": 1310,
        "y": 1480,
        "wires": []
    },
    {
        "id": "775ab5fd91b135ae",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "7ae971cd6a4ab6e7",
        "name": "newUesrRequests & MUI LOG",
        "func": "const socketid = msg.socketid;\nconst userName = msg.userName;\nconst authSettings = global.get('authSettings');\nconst humanTimestamp = msg.humanTimestamp;\nvar muiLog = global.get('muiLog')||[];\n\n//clean up muiLog so it does not overflow.\n//Set length of muiLog array, \nvar muiLogMaxLength = authSettings.muiLog.maxmuiLogLength;\n//get length of muiLog array \nvar muiLogLength = muiLog.length;\n//remove 2 items from muiLog if > muiLogMaxLength\nif (muiLogLength > muiLogMaxLength) {   \n    muiLog.splice(muiLogLength - 2, 2);\n}\n\n//get socketip first. If user does not have one send them back to login page as they direct linked in here\n//Get AuthLoginCredentials else create it\nvar AuthLoginCredentials = global.get('AuthLoginCredentials')||{};\n//check that ip is in AuthLoginCredentials\nif (AuthLoginCredentials.hasOwnProperty(socketid)) {\n    if (AuthLoginCredentials[socketid].hasOwnProperty('ip')) {\n        const socketip = AuthLoginCredentials[socketid]['ip'];\n\n        newLineInLog = 'Relative URL: /ui/#!/3 | ' + humanTimestamp + ' | IP - ' + socketip + ' | ' + 'user: ' + userName + ' Submitted a account recovery request | socket - ' + socketid;\n        //add new log item to the top of the array\n        muiLog.unshift(newLineInLog);\n        msg.error = false;\n        msg.topic = 'Request Submitted';\n        msg.payload = 'Check your email tied to this account';\n        return msg;\n    }\n    else //no ip found in AuthLoginCredentials send user to login page (this happens when they direct link to page and skip loggin page)\n    {\n        msg.error = true;\n        return msg;\n    }\n}\nelse // no AuthLoginCredentials found send user to login page (this happens when they direct link to page and skip loggin page)\n{\n    msg.error = true;\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 490,
        "y": 1440,
        "wires": [
            [
                "8c9d6715a971ad35",
                "8713baa42835d74f"
            ]
        ]
    },
    {
        "id": "e79a56e9a9b55cae",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "7ae971cd6a4ab6e7",
        "position": "top right",
        "displayTime": "",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1280,
        "y": 1440,
        "wires": []
    },
    {
        "id": "8713baa42835d74f",
        "type": "ui_toast",
        "z": "c41dabcb5f7e3c2a",
        "g": "7ae971cd6a4ab6e7",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 770,
        "y": 1440,
        "wires": [
            [
                "928f8660eeae5a19"
            ]
        ]
    },
    {
        "id": "928f8660eeae5a19",
        "type": "function",
        "z": "c41dabcb5f7e3c2a",
        "g": "7ae971cd6a4ab6e7",
        "name": "Format Payload for notification node",
        "func": "const socketid = msg.socketid;\n\nmsg.timeout = 2;\nmsg.topic = ``;\n//send user to homepage\nmsg.url = '/ui/#!/0?socketid='+socketid;\n\nmsg.payload = '<!DOCTYPE html><html><head><title>Home</title></head><body>Home<script>var url= \"'+msg.url+'\"; window.location.href = url; </script></body></html>';\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1030,
        "y": 1440,
        "wires": [
            [
                "e79a56e9a9b55cae"
            ]
        ]
    }
]